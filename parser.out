Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start_program
Rule 1     start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body end
Rule 2     start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body end
Rule 3     start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body end
Rule 4     start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body end
Rule 5     cuadruploMain -> empty
Rule 6     multiple_funcs -> dec_func
Rule 7     multiple_funcs -> dec_func multiple_funcs
Rule 8     main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
Rule 9     crearTablaMain -> empty
Rule 10    gotoMain -> empty
Rule 11    end -> empty
Rule 12    vars -> VAR varss
Rule 13    varss -> type guardarTipo mvar SEMICOLON varss
Rule 14    varss -> type guardarTipo mvar SEMICOLON
Rule 15    guardarTipo -> empty
Rule 16    mvar -> ID COLON mvar
Rule 17    mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
Rule 18    mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
Rule 19    mvar -> ID
Rule 20    mvar -> ID BRACEOPEN CTEINT BRACECLOSE
Rule 21    mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE
Rule 22    dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
Rule 23    dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
Rule 24    crearSymbolTable -> empty
Rule 25    exitFunc -> empty
Rule 26    param -> typeParam ID
Rule 27    param -> typeParam ID COLON param
Rule 28    param -> empty
Rule 29    numeroParam -> empty
Rule 30    typeParam -> INT
Rule 31    typeParam -> FLOAT
Rule 32    typeParam -> CHAR
Rule 33    type -> INT
Rule 34    type -> FLOAT
Rule 35    type -> CHAR
Rule 36    startFunc -> empty
Rule 37    body -> BRACKETOPEN bodyy BRACKETCLOSE
Rule 38    bodyy -> statement
Rule 39    bodyy -> statement bodyy
Rule 40    bodyy -> empty
Rule 41    statement -> dec_variables
Rule 42    statement -> assignment
Rule 43    statement -> condition
Rule 44    statement -> writing
Rule 45    statement -> reading
Rule 46    statement -> call_func
Rule 47    statement -> graph
Rule 48    statement -> return
Rule 49    statement -> while_loop
Rule 50    statement -> for_loop
Rule 51    statement -> max
Rule 52    statement -> min
Rule 53    statement -> sum
Rule 54    statement -> normal
Rule 55    statement -> uniforme
Rule 56    statement -> poisson
Rule 57    statement -> binomial
Rule 58    dec_variables -> dec_variabless
Rule 59    dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless
Rule 60    dec_variabless -> type guardarTipo dec_mvar SEMICOLON
Rule 61    dec_mvar -> ID COLON dec_mvar
Rule 62    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
Rule 63    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
Rule 64    dec_mvar -> ID
Rule 65    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE
Rule 66    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE
Rule 67    assignment -> variableAssignment EQUAL exp SEMICOLON
Rule 68    call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE
Rule 69    generarERA -> empty
Rule 70    call_funcc -> exp mandarParam
Rule 71    call_funcc -> exp mandarParam COLON call_funcc
Rule 72    call_funcc -> empty
Rule 73    mandarParam -> empty
Rule 74    graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON
Rule 75    exp -> expp
Rule 76    exp -> exp AND expp
Rule 77    exp -> exp OR expp
Rule 78    expp -> m_exp
Rule 79    expp -> expp GREATHERTHAN m_exp
Rule 80    expp -> expp LESSTHAN m_exp
Rule 81    expp -> expp GREATHEREQUAL m_exp
Rule 82    expp -> expp LESSEQUAL m_exp
Rule 83    expp -> expp DIFFERENT m_exp
Rule 84    expp -> expp SAME m_exp
Rule 85    m_exp -> termino
Rule 86    m_exp -> m_exp PLUS termino
Rule 87    m_exp -> m_exp MINUS termino
Rule 88    termino -> factor
Rule 89    termino -> termino MULTIPLY factor
Rule 90    termino -> termino DIVIDE factor
Rule 91    factor -> ID
Rule 92    factor -> CTEINT guardarConstanteInt
Rule 93    factor -> CTFLOAT guardarConstanteFloat
Rule 94    factor -> CTECHAR guardarConstanteChar
Rule 95    factor -> variable
Rule 96    factor -> call_func
Rule 97    factor -> PARENOPEN exp PARENCLOSE
Rule 98    guardarConstanteInt -> empty
Rule 99    guardarConstanteFloat -> empty
Rule 100   guardarConstanteChar -> empty
Rule 101   variable -> ID
Rule 102   variable -> ID BRACEOPEN exp BRACECLOSE
Rule 103   variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
Rule 104   variableAssignment -> ID
Rule 105   variableAssignment -> ID BRACEOPEN exp BRACECLOSE
Rule 106   variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
Rule 107   condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
Rule 108   condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
Rule 109   cuadruploIF -> empty
Rule 110   ifEnd -> empty
Rule 111   cuadruploElse -> empty
Rule 112   ifEndElse -> empty
Rule 113   writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
Rule 114   writingg -> exp
Rule 115   writingg -> exp COLON writingg
Rule 116   writingg -> auxString
Rule 117   writingg -> auxString COLON writingg
Rule 118   auxString -> CTESTRING
Rule 119   reading -> READ multivariables SEMICOLON
Rule 120   multivariables -> variable
Rule 121   multivariables -> variable COLON multivariables
Rule 122   while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
Rule 123   whileMigaja -> empty
Rule 124   whileEval -> empty
Rule 125   whileEnd -> empty
Rule 126   for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
Rule 127   guardarValorFor -> empty
Rule 128   forEnd -> empty
Rule 129   return -> RETURN exp SEMICOLON
Rule 130   max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON
Rule 131   min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON
Rule 132   sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON
Rule 133   param_dist -> variable
Rule 134   param_dist -> variable COLON param_dist
Rule 135   binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 136   poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 137   uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 138   normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 139   empty -> <empty>

Terminals, with rules where they appear

AND                  : 76
BINOMIAL             : 135
BRACECLOSE           : 17 18 18 20 21 21 62 63 63 65 66 66 102 103 103 105 106 106
BRACEOPEN            : 17 18 18 20 21 21 62 63 63 65 66 66 102 103 103 105 106 106
BRACKETCLOSE         : 37
BRACKETOPEN          : 37
CHAR                 : 32 35
COLON                : 16 17 18 27 61 62 63 71 115 117 121 134
CTECHAR              : 94
CTEINT               : 17 18 18 20 21 21 62 63 63 65 66 66 92
CTESTRING            : 118
CTFLOAT              : 93
DIFFERENT            : 83
DIVIDE               : 90
ELSE                 : 108
EQUAL                : 67 126
FLOAT                : 31 34
FOR                  : 126
FUNCTION             : 22 23
GREATHEREQUAL        : 81
GREATHERTHAN         : 79
ID                   : 1 2 3 4 16 17 18 19 20 21 22 23 26 27 61 62 63 64 65 66 68 91 101 102 103 104 105 106 126
IF                   : 107 108
INT                  : 30 33
LESSEQUAL            : 82
LESSTHAN             : 80
MAIN                 : 8
MAX                  : 130
MIN                  : 131
MINUS                : 87
MULTIPLY             : 89
NORMAL               : 138
OR                   : 77
PARENCLOSE           : 8 22 23 68 74 97 107 108 113 122 126 130 131 132 135 136 137 138
PARENOPEN            : 8 22 23 68 74 97 107 108 113 122 126 130 131 132 135 136 137 138
PLOT                 : 74
PLUS                 : 86
POISSON              : 136
PRINT                : 113
PROGRAM              : 1 2 3 4
READ                 : 119
RETURN               : 129
SAME                 : 84
SEMICOLON            : 1 2 3 4 13 14 59 60 67 74 113 119 129 130 131 132 135 136 137 138
SUM                  : 132
TO                   : 126
UNIFORME             : 137
VAR                  : 12
VOID                 : 23
WHILE                : 122
error                : 

Nonterminals, with rules where they appear

assignment           : 42
auxString            : 116 117
binomial             : 57
body                 : 8 22 23 107 108 108 122 126
bodyy                : 37 39
call_func            : 46 96
call_funcc           : 68 71
condition            : 43
crearSymbolTable     : 22 23
crearTablaMain       : 8
cuadruploElse        : 108
cuadruploIF          : 107 108
cuadruploMain        : 1 2 3 4
dec_func             : 6 7
dec_mvar             : 59 60 61 62 63
dec_variables        : 41
dec_variabless       : 58 59
empty                : 5 9 10 11 15 24 25 28 29 36 40 69 72 73 98 99 100 109 110 111 112 123 124 125 127 128
end                  : 1 2 3 4
exitFunc             : 22 23
exp                  : 67 70 71 74 76 77 97 102 103 103 105 106 106 107 108 114 115 122 126 126 129 130 131 132
expp                 : 75 76 77 79 80 81 82 83 84
factor               : 88 89 90
forEnd               : 126
for_loop             : 50
generarERA           : 68
gotoMain             : 8
graph                : 47
guardarConstanteChar : 94
guardarConstanteFloat : 93
guardarConstanteInt  : 92
guardarTipo          : 13 14 59 60
guardarValorFor      : 126
ifEnd                : 107
ifEndElse            : 108
m_exp                : 78 79 80 81 82 83 84 86 87
main_body            : 1 2 3 4
mandarParam          : 70 71
max                  : 51
min                  : 52
multiple_funcs       : 1 3 7
multivariables       : 119 121
mvar                 : 13 14 16 17 18
normal               : 54
numeroParam          : 22 23
param                : 22 23 27
param_dist           : 134 135 136 137 138
poisson              : 56
reading              : 45
return               : 48
startFunc            : 22 23
start_program        : 0
statement            : 38 39
sum                  : 53
termino              : 85 86 87 89 90
type                 : 13 14 22 59 60
typeParam            : 26 27
uniforme             : 55
variable             : 95 120 121 133 134
variableAssignment   : 67
vars                 : 1 2
varss                : 12 13
whileEnd             : 122
whileEval            : 122
whileMigaja          : 122
while_loop           : 49
writing              : 44
writingg             : 113 115 117

Parsing method: LALR

state 0

    (0) S' -> . start_program
    (1) start_program -> . cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body end
    (2) start_program -> . cuadruploMain PROGRAM ID SEMICOLON vars main_body end
    (3) start_program -> . cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body end
    (4) start_program -> . cuadruploMain PROGRAM ID SEMICOLON main_body end
    (5) cuadruploMain -> . empty
    (139) empty -> .

    PROGRAM         reduce using rule 139 (empty -> .)

    start_program                  shift and go to state 1
    cuadruploMain                  shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start_program .



state 2

    (1) start_program -> cuadruploMain . PROGRAM ID SEMICOLON vars multiple_funcs main_body end
    (2) start_program -> cuadruploMain . PROGRAM ID SEMICOLON vars main_body end
    (3) start_program -> cuadruploMain . PROGRAM ID SEMICOLON multiple_funcs main_body end
    (4) start_program -> cuadruploMain . PROGRAM ID SEMICOLON main_body end

    PROGRAM         shift and go to state 4


state 3

    (5) cuadruploMain -> empty .

    PROGRAM         reduce using rule 5 (cuadruploMain -> empty .)


state 4

    (1) start_program -> cuadruploMain PROGRAM . ID SEMICOLON vars multiple_funcs main_body end
    (2) start_program -> cuadruploMain PROGRAM . ID SEMICOLON vars main_body end
    (3) start_program -> cuadruploMain PROGRAM . ID SEMICOLON multiple_funcs main_body end
    (4) start_program -> cuadruploMain PROGRAM . ID SEMICOLON main_body end

    ID              shift and go to state 5


state 5

    (1) start_program -> cuadruploMain PROGRAM ID . SEMICOLON vars multiple_funcs main_body end
    (2) start_program -> cuadruploMain PROGRAM ID . SEMICOLON vars main_body end
    (3) start_program -> cuadruploMain PROGRAM ID . SEMICOLON multiple_funcs main_body end
    (4) start_program -> cuadruploMain PROGRAM ID . SEMICOLON main_body end

    SEMICOLON       shift and go to state 6


state 6

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON . vars multiple_funcs main_body end
    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON . vars main_body end
    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON . multiple_funcs main_body end
    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON . main_body end
    (12) vars -> . VAR varss
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (22) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
    (23) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc

    VAR             shift and go to state 10
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 13

    vars                           shift and go to state 7
    multiple_funcs                 shift and go to state 8
    main_body                      shift and go to state 9
    dec_func                       shift and go to state 11

state 7

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars . multiple_funcs main_body end
    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars . main_body end
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (22) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
    (23) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc

    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 13

    multiple_funcs                 shift and go to state 14
    main_body                      shift and go to state 15
    dec_func                       shift and go to state 11

state 8

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs . main_body end
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body

    MAIN            shift and go to state 12

    main_body                      shift and go to state 16

state 9

    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body . end
    (11) end -> . empty
    (139) empty -> .

    $end            reduce using rule 139 (empty -> .)

    end                            shift and go to state 17
    empty                          shift and go to state 18

state 10

    (12) vars -> VAR . varss
    (13) varss -> . type guardarTipo mvar SEMICOLON varss
    (14) varss -> . type guardarTipo mvar SEMICOLON
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . CHAR

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    varss                          shift and go to state 19
    type                           shift and go to state 20

state 11

    (6) multiple_funcs -> dec_func .
    (7) multiple_funcs -> dec_func . multiple_funcs
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (22) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
    (23) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc

    MAIN            reduce using rule 6 (multiple_funcs -> dec_func .)
    FUNCTION        shift and go to state 13

    dec_func                       shift and go to state 11
    multiple_funcs                 shift and go to state 24

state 12

    (8) main_body -> MAIN . crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (9) crearTablaMain -> . empty
    (139) empty -> .

    PARENOPEN       reduce using rule 139 (empty -> .)

    crearTablaMain                 shift and go to state 25
    empty                          shift and go to state 26

state 13

    (22) dec_func -> FUNCTION . type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
    (23) dec_func -> FUNCTION . VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . CHAR

    VOID            shift and go to state 28
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    type                           shift and go to state 27

state 14

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs . main_body end
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body

    MAIN            shift and go to state 12

    main_body                      shift and go to state 29

state 15

    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body . end
    (11) end -> . empty
    (139) empty -> .

    $end            reduce using rule 139 (empty -> .)

    end                            shift and go to state 30
    empty                          shift and go to state 18

state 16

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body . end
    (11) end -> . empty
    (139) empty -> .

    $end            reduce using rule 139 (empty -> .)

    end                            shift and go to state 31
    empty                          shift and go to state 18

state 17

    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body end .

    $end            reduce using rule 4 (start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body end .)


state 18

    (11) end -> empty .

    $end            reduce using rule 11 (end -> empty .)


state 19

    (12) vars -> VAR varss .

    MAIN            reduce using rule 12 (vars -> VAR varss .)
    FUNCTION        reduce using rule 12 (vars -> VAR varss .)


state 20

    (13) varss -> type . guardarTipo mvar SEMICOLON varss
    (14) varss -> type . guardarTipo mvar SEMICOLON
    (15) guardarTipo -> . empty
    (139) empty -> .

    ID              reduce using rule 139 (empty -> .)

    guardarTipo                    shift and go to state 32
    empty                          shift and go to state 33

state 21

    (33) type -> INT .

    ID              reduce using rule 33 (type -> INT .)


state 22

    (34) type -> FLOAT .

    ID              reduce using rule 34 (type -> FLOAT .)


state 23

    (35) type -> CHAR .

    ID              reduce using rule 35 (type -> CHAR .)


state 24

    (7) multiple_funcs -> dec_func multiple_funcs .

    MAIN            reduce using rule 7 (multiple_funcs -> dec_func multiple_funcs .)


state 25

    (8) main_body -> MAIN crearTablaMain . PARENOPEN PARENCLOSE gotoMain body

    PARENOPEN       shift and go to state 34


state 26

    (9) crearTablaMain -> empty .

    PARENOPEN       reduce using rule 9 (crearTablaMain -> empty .)


state 27

    (22) dec_func -> FUNCTION type . ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc

    ID              shift and go to state 35


state 28

    (23) dec_func -> FUNCTION VOID . ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc

    ID              shift and go to state 36


state 29

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body . end
    (11) end -> . empty
    (139) empty -> .

    $end            reduce using rule 139 (empty -> .)

    end                            shift and go to state 37
    empty                          shift and go to state 18

state 30

    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body end .

    $end            reduce using rule 2 (start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body end .)


state 31

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body end .

    $end            reduce using rule 3 (start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body end .)


state 32

    (13) varss -> type guardarTipo . mvar SEMICOLON varss
    (14) varss -> type guardarTipo . mvar SEMICOLON
    (16) mvar -> . ID COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> . ID
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 39

    mvar                           shift and go to state 38

state 33

    (15) guardarTipo -> empty .

    ID              reduce using rule 15 (guardarTipo -> empty .)


state 34

    (8) main_body -> MAIN crearTablaMain PARENOPEN . PARENCLOSE gotoMain body

    PARENCLOSE      shift and go to state 40


state 35

    (22) dec_func -> FUNCTION type ID . crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
    (24) crearSymbolTable -> . empty
    (139) empty -> .

    PARENOPEN       reduce using rule 139 (empty -> .)

    crearSymbolTable               shift and go to state 41
    empty                          shift and go to state 42

state 36

    (23) dec_func -> FUNCTION VOID ID . crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc
    (24) crearSymbolTable -> . empty
    (139) empty -> .

    PARENOPEN       reduce using rule 139 (empty -> .)

    crearSymbolTable               shift and go to state 43
    empty                          shift and go to state 42

state 37

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body end .

    $end            reduce using rule 1 (start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body end .)


state 38

    (13) varss -> type guardarTipo mvar . SEMICOLON varss
    (14) varss -> type guardarTipo mvar . SEMICOLON

    SEMICOLON       shift and go to state 44


state 39

    (16) mvar -> ID . COLON mvar
    (17) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> ID .
    (20) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 45
    BRACEOPEN       shift and go to state 46
    SEMICOLON       reduce using rule 19 (mvar -> ID .)


state 40

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE . gotoMain body
    (10) gotoMain -> . empty
    (139) empty -> .

    BRACKETOPEN     reduce using rule 139 (empty -> .)

    gotoMain                       shift and go to state 47
    empty                          shift and go to state 48

state 41

    (22) dec_func -> FUNCTION type ID crearSymbolTable . PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc

    PARENOPEN       shift and go to state 49


state 42

    (24) crearSymbolTable -> empty .

    PARENOPEN       reduce using rule 24 (crearSymbolTable -> empty .)


state 43

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable . PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc

    PARENOPEN       shift and go to state 50


state 44

    (13) varss -> type guardarTipo mvar SEMICOLON . varss
    (14) varss -> type guardarTipo mvar SEMICOLON .
    (13) varss -> . type guardarTipo mvar SEMICOLON varss
    (14) varss -> . type guardarTipo mvar SEMICOLON
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . CHAR

    MAIN            reduce using rule 14 (varss -> type guardarTipo mvar SEMICOLON .)
    FUNCTION        reduce using rule 14 (varss -> type guardarTipo mvar SEMICOLON .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    type                           shift and go to state 20
    varss                          shift and go to state 51

state 45

    (16) mvar -> ID COLON . mvar
    (16) mvar -> . ID COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> . ID
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 39

    mvar                           shift and go to state 52

state 46

    (17) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE COLON mvar
    (18) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (20) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE
    (21) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    CTEINT          shift and go to state 53


state 47

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain . body
    (37) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 54

state 48

    (10) gotoMain -> empty .

    BRACKETOPEN     reduce using rule 10 (gotoMain -> empty .)


state 49

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN . param numeroParam PARENCLOSE startFunc body exitFunc
    (26) param -> . typeParam ID
    (27) param -> . typeParam ID COLON param
    (28) param -> . empty
    (30) typeParam -> . INT
    (31) typeParam -> . FLOAT
    (32) typeParam -> . CHAR
    (139) empty -> .

    INT             shift and go to state 59
    FLOAT           shift and go to state 60
    CHAR            shift and go to state 61
    PARENCLOSE      reduce using rule 139 (empty -> .)

    param                          shift and go to state 56
    typeParam                      shift and go to state 57
    empty                          shift and go to state 58

state 50

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN . param numeroParam PARENCLOSE startFunc body exitFunc
    (26) param -> . typeParam ID
    (27) param -> . typeParam ID COLON param
    (28) param -> . empty
    (30) typeParam -> . INT
    (31) typeParam -> . FLOAT
    (32) typeParam -> . CHAR
    (139) empty -> .

    INT             shift and go to state 59
    FLOAT           shift and go to state 60
    CHAR            shift and go to state 61
    PARENCLOSE      reduce using rule 139 (empty -> .)

    param                          shift and go to state 62
    typeParam                      shift and go to state 57
    empty                          shift and go to state 58

state 51

    (13) varss -> type guardarTipo mvar SEMICOLON varss .

    MAIN            reduce using rule 13 (varss -> type guardarTipo mvar SEMICOLON varss .)
    FUNCTION        reduce using rule 13 (varss -> type guardarTipo mvar SEMICOLON varss .)


state 52

    (16) mvar -> ID COLON mvar .

    SEMICOLON       reduce using rule 16 (mvar -> ID COLON mvar .)


state 53

    (17) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE COLON mvar
    (18) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (20) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE
    (21) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    BRACECLOSE      shift and go to state 63


state 54

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body .

    $end            reduce using rule 8 (main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body .)


state 55

    (37) body -> BRACKETOPEN . bodyy BRACKETCLOSE
    (38) bodyy -> . statement
    (39) bodyy -> . statement bodyy
    (40) bodyy -> . empty
    (41) statement -> . dec_variables
    (42) statement -> . assignment
    (43) statement -> . condition
    (44) statement -> . writing
    (45) statement -> . reading
    (46) statement -> . call_func
    (47) statement -> . graph
    (48) statement -> . return
    (49) statement -> . while_loop
    (50) statement -> . for_loop
    (51) statement -> . max
    (52) statement -> . min
    (53) statement -> . sum
    (54) statement -> . normal
    (55) statement -> . uniforme
    (56) statement -> . poisson
    (57) statement -> . binomial
    (139) empty -> .
    (58) dec_variables -> . dec_variabless
    (67) assignment -> . variableAssignment EQUAL exp SEMICOLON
    (107) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (108) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (113) writing -> . PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
    (119) reading -> . READ multivariables SEMICOLON
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE
    (74) graph -> . PLOT PARENOPEN exp PARENCLOSE SEMICOLON
    (129) return -> . RETURN exp SEMICOLON
    (122) while_loop -> . WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (126) for_loop -> . FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
    (130) max -> . MAX PARENOPEN exp PARENCLOSE SEMICOLON
    (131) min -> . MIN PARENOPEN exp PARENCLOSE SEMICOLON
    (132) sum -> . SUM PARENOPEN exp PARENCLOSE SEMICOLON
    (138) normal -> . NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (137) uniforme -> . UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
    (136) poisson -> . POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
    (135) binomial -> . BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (59) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (60) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (104) variableAssignment -> . ID
    (105) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE
    (106) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . CHAR

    BRACKETCLOSE    reduce using rule 139 (empty -> .)
    IF              shift and go to state 86
    PRINT           shift and go to state 87
    READ            shift and go to state 88
    ID              shift and go to state 89
    PLOT            shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    MAX             shift and go to state 94
    MIN             shift and go to state 95
    SUM             shift and go to state 96
    NORMAL          shift and go to state 97
    UNIFORME        shift and go to state 98
    POISSON         shift and go to state 99
    BINOMIAL        shift and go to state 100
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    bodyy                          shift and go to state 64
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    dec_variables                  shift and go to state 67
    assignment                     shift and go to state 68
    condition                      shift and go to state 69
    writing                        shift and go to state 70
    reading                        shift and go to state 71
    call_func                      shift and go to state 72
    graph                          shift and go to state 73
    return                         shift and go to state 74
    while_loop                     shift and go to state 75
    for_loop                       shift and go to state 76
    max                            shift and go to state 77
    min                            shift and go to state 78
    sum                            shift and go to state 79
    normal                         shift and go to state 80
    uniforme                       shift and go to state 81
    poisson                        shift and go to state 82
    binomial                       shift and go to state 83
    dec_variabless                 shift and go to state 84
    variableAssignment             shift and go to state 85
    type                           shift and go to state 101

state 56

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param . numeroParam PARENCLOSE startFunc body exitFunc
    (29) numeroParam -> . empty
    (139) empty -> .

    PARENCLOSE      reduce using rule 139 (empty -> .)

    numeroParam                    shift and go to state 102
    empty                          shift and go to state 103

state 57

    (26) param -> typeParam . ID
    (27) param -> typeParam . ID COLON param

    ID              shift and go to state 104


state 58

    (28) param -> empty .

    PARENCLOSE      reduce using rule 28 (param -> empty .)


state 59

    (30) typeParam -> INT .

    ID              reduce using rule 30 (typeParam -> INT .)


state 60

    (31) typeParam -> FLOAT .

    ID              reduce using rule 31 (typeParam -> FLOAT .)


state 61

    (32) typeParam -> CHAR .

    ID              reduce using rule 32 (typeParam -> CHAR .)


state 62

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param . numeroParam PARENCLOSE startFunc body exitFunc
    (29) numeroParam -> . empty
    (139) empty -> .

    PARENCLOSE      reduce using rule 139 (empty -> .)

    numeroParam                    shift and go to state 105
    empty                          shift and go to state 103

state 63

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . COLON mvar
    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (20) mvar -> ID BRACEOPEN CTEINT BRACECLOSE .
    (21) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 107
    BRACEOPEN       shift and go to state 106
    SEMICOLON       reduce using rule 20 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE .)


state 64

    (37) body -> BRACKETOPEN bodyy . BRACKETCLOSE

    BRACKETCLOSE    shift and go to state 108


state 65

    (38) bodyy -> statement .
    (39) bodyy -> statement . bodyy
    (38) bodyy -> . statement
    (39) bodyy -> . statement bodyy
    (40) bodyy -> . empty
    (41) statement -> . dec_variables
    (42) statement -> . assignment
    (43) statement -> . condition
    (44) statement -> . writing
    (45) statement -> . reading
    (46) statement -> . call_func
    (47) statement -> . graph
    (48) statement -> . return
    (49) statement -> . while_loop
    (50) statement -> . for_loop
    (51) statement -> . max
    (52) statement -> . min
    (53) statement -> . sum
    (54) statement -> . normal
    (55) statement -> . uniforme
    (56) statement -> . poisson
    (57) statement -> . binomial
    (139) empty -> .
    (58) dec_variables -> . dec_variabless
    (67) assignment -> . variableAssignment EQUAL exp SEMICOLON
    (107) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (108) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (113) writing -> . PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
    (119) reading -> . READ multivariables SEMICOLON
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE
    (74) graph -> . PLOT PARENOPEN exp PARENCLOSE SEMICOLON
    (129) return -> . RETURN exp SEMICOLON
    (122) while_loop -> . WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (126) for_loop -> . FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
    (130) max -> . MAX PARENOPEN exp PARENCLOSE SEMICOLON
    (131) min -> . MIN PARENOPEN exp PARENCLOSE SEMICOLON
    (132) sum -> . SUM PARENOPEN exp PARENCLOSE SEMICOLON
    (138) normal -> . NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (137) uniforme -> . UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
    (136) poisson -> . POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
    (135) binomial -> . BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (59) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (60) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (104) variableAssignment -> . ID
    (105) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE
    (106) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . CHAR

  ! reduce/reduce conflict for BRACKETCLOSE resolved using rule 38 (bodyy -> statement .)
    BRACKETCLOSE    reduce using rule 38 (bodyy -> statement .)
    IF              shift and go to state 86
    PRINT           shift and go to state 87
    READ            shift and go to state 88
    ID              shift and go to state 89
    PLOT            shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    MAX             shift and go to state 94
    MIN             shift and go to state 95
    SUM             shift and go to state 96
    NORMAL          shift and go to state 97
    UNIFORME        shift and go to state 98
    POISSON         shift and go to state 99
    BINOMIAL        shift and go to state 100
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

  ! BRACKETCLOSE    [ reduce using rule 139 (empty -> .) ]

    statement                      shift and go to state 65
    bodyy                          shift and go to state 109
    empty                          shift and go to state 66
    dec_variables                  shift and go to state 67
    assignment                     shift and go to state 68
    condition                      shift and go to state 69
    writing                        shift and go to state 70
    reading                        shift and go to state 71
    call_func                      shift and go to state 72
    graph                          shift and go to state 73
    return                         shift and go to state 74
    while_loop                     shift and go to state 75
    for_loop                       shift and go to state 76
    max                            shift and go to state 77
    min                            shift and go to state 78
    sum                            shift and go to state 79
    normal                         shift and go to state 80
    uniforme                       shift and go to state 81
    poisson                        shift and go to state 82
    binomial                       shift and go to state 83
    dec_variabless                 shift and go to state 84
    variableAssignment             shift and go to state 85
    type                           shift and go to state 101

state 66

    (40) bodyy -> empty .

    BRACKETCLOSE    reduce using rule 40 (bodyy -> empty .)


state 67

    (41) statement -> dec_variables .

    IF              reduce using rule 41 (statement -> dec_variables .)
    PRINT           reduce using rule 41 (statement -> dec_variables .)
    READ            reduce using rule 41 (statement -> dec_variables .)
    ID              reduce using rule 41 (statement -> dec_variables .)
    PLOT            reduce using rule 41 (statement -> dec_variables .)
    RETURN          reduce using rule 41 (statement -> dec_variables .)
    WHILE           reduce using rule 41 (statement -> dec_variables .)
    FOR             reduce using rule 41 (statement -> dec_variables .)
    MAX             reduce using rule 41 (statement -> dec_variables .)
    MIN             reduce using rule 41 (statement -> dec_variables .)
    SUM             reduce using rule 41 (statement -> dec_variables .)
    NORMAL          reduce using rule 41 (statement -> dec_variables .)
    UNIFORME        reduce using rule 41 (statement -> dec_variables .)
    POISSON         reduce using rule 41 (statement -> dec_variables .)
    BINOMIAL        reduce using rule 41 (statement -> dec_variables .)
    INT             reduce using rule 41 (statement -> dec_variables .)
    FLOAT           reduce using rule 41 (statement -> dec_variables .)
    CHAR            reduce using rule 41 (statement -> dec_variables .)
    BRACKETCLOSE    reduce using rule 41 (statement -> dec_variables .)


state 68

    (42) statement -> assignment .

    IF              reduce using rule 42 (statement -> assignment .)
    PRINT           reduce using rule 42 (statement -> assignment .)
    READ            reduce using rule 42 (statement -> assignment .)
    ID              reduce using rule 42 (statement -> assignment .)
    PLOT            reduce using rule 42 (statement -> assignment .)
    RETURN          reduce using rule 42 (statement -> assignment .)
    WHILE           reduce using rule 42 (statement -> assignment .)
    FOR             reduce using rule 42 (statement -> assignment .)
    MAX             reduce using rule 42 (statement -> assignment .)
    MIN             reduce using rule 42 (statement -> assignment .)
    SUM             reduce using rule 42 (statement -> assignment .)
    NORMAL          reduce using rule 42 (statement -> assignment .)
    UNIFORME        reduce using rule 42 (statement -> assignment .)
    POISSON         reduce using rule 42 (statement -> assignment .)
    BINOMIAL        reduce using rule 42 (statement -> assignment .)
    INT             reduce using rule 42 (statement -> assignment .)
    FLOAT           reduce using rule 42 (statement -> assignment .)
    CHAR            reduce using rule 42 (statement -> assignment .)
    BRACKETCLOSE    reduce using rule 42 (statement -> assignment .)


state 69

    (43) statement -> condition .

    IF              reduce using rule 43 (statement -> condition .)
    PRINT           reduce using rule 43 (statement -> condition .)
    READ            reduce using rule 43 (statement -> condition .)
    ID              reduce using rule 43 (statement -> condition .)
    PLOT            reduce using rule 43 (statement -> condition .)
    RETURN          reduce using rule 43 (statement -> condition .)
    WHILE           reduce using rule 43 (statement -> condition .)
    FOR             reduce using rule 43 (statement -> condition .)
    MAX             reduce using rule 43 (statement -> condition .)
    MIN             reduce using rule 43 (statement -> condition .)
    SUM             reduce using rule 43 (statement -> condition .)
    NORMAL          reduce using rule 43 (statement -> condition .)
    UNIFORME        reduce using rule 43 (statement -> condition .)
    POISSON         reduce using rule 43 (statement -> condition .)
    BINOMIAL        reduce using rule 43 (statement -> condition .)
    INT             reduce using rule 43 (statement -> condition .)
    FLOAT           reduce using rule 43 (statement -> condition .)
    CHAR            reduce using rule 43 (statement -> condition .)
    BRACKETCLOSE    reduce using rule 43 (statement -> condition .)


state 70

    (44) statement -> writing .

    IF              reduce using rule 44 (statement -> writing .)
    PRINT           reduce using rule 44 (statement -> writing .)
    READ            reduce using rule 44 (statement -> writing .)
    ID              reduce using rule 44 (statement -> writing .)
    PLOT            reduce using rule 44 (statement -> writing .)
    RETURN          reduce using rule 44 (statement -> writing .)
    WHILE           reduce using rule 44 (statement -> writing .)
    FOR             reduce using rule 44 (statement -> writing .)
    MAX             reduce using rule 44 (statement -> writing .)
    MIN             reduce using rule 44 (statement -> writing .)
    SUM             reduce using rule 44 (statement -> writing .)
    NORMAL          reduce using rule 44 (statement -> writing .)
    UNIFORME        reduce using rule 44 (statement -> writing .)
    POISSON         reduce using rule 44 (statement -> writing .)
    BINOMIAL        reduce using rule 44 (statement -> writing .)
    INT             reduce using rule 44 (statement -> writing .)
    FLOAT           reduce using rule 44 (statement -> writing .)
    CHAR            reduce using rule 44 (statement -> writing .)
    BRACKETCLOSE    reduce using rule 44 (statement -> writing .)


state 71

    (45) statement -> reading .

    IF              reduce using rule 45 (statement -> reading .)
    PRINT           reduce using rule 45 (statement -> reading .)
    READ            reduce using rule 45 (statement -> reading .)
    ID              reduce using rule 45 (statement -> reading .)
    PLOT            reduce using rule 45 (statement -> reading .)
    RETURN          reduce using rule 45 (statement -> reading .)
    WHILE           reduce using rule 45 (statement -> reading .)
    FOR             reduce using rule 45 (statement -> reading .)
    MAX             reduce using rule 45 (statement -> reading .)
    MIN             reduce using rule 45 (statement -> reading .)
    SUM             reduce using rule 45 (statement -> reading .)
    NORMAL          reduce using rule 45 (statement -> reading .)
    UNIFORME        reduce using rule 45 (statement -> reading .)
    POISSON         reduce using rule 45 (statement -> reading .)
    BINOMIAL        reduce using rule 45 (statement -> reading .)
    INT             reduce using rule 45 (statement -> reading .)
    FLOAT           reduce using rule 45 (statement -> reading .)
    CHAR            reduce using rule 45 (statement -> reading .)
    BRACKETCLOSE    reduce using rule 45 (statement -> reading .)


state 72

    (46) statement -> call_func .

    IF              reduce using rule 46 (statement -> call_func .)
    PRINT           reduce using rule 46 (statement -> call_func .)
    READ            reduce using rule 46 (statement -> call_func .)
    ID              reduce using rule 46 (statement -> call_func .)
    PLOT            reduce using rule 46 (statement -> call_func .)
    RETURN          reduce using rule 46 (statement -> call_func .)
    WHILE           reduce using rule 46 (statement -> call_func .)
    FOR             reduce using rule 46 (statement -> call_func .)
    MAX             reduce using rule 46 (statement -> call_func .)
    MIN             reduce using rule 46 (statement -> call_func .)
    SUM             reduce using rule 46 (statement -> call_func .)
    NORMAL          reduce using rule 46 (statement -> call_func .)
    UNIFORME        reduce using rule 46 (statement -> call_func .)
    POISSON         reduce using rule 46 (statement -> call_func .)
    BINOMIAL        reduce using rule 46 (statement -> call_func .)
    INT             reduce using rule 46 (statement -> call_func .)
    FLOAT           reduce using rule 46 (statement -> call_func .)
    CHAR            reduce using rule 46 (statement -> call_func .)
    BRACKETCLOSE    reduce using rule 46 (statement -> call_func .)


state 73

    (47) statement -> graph .

    IF              reduce using rule 47 (statement -> graph .)
    PRINT           reduce using rule 47 (statement -> graph .)
    READ            reduce using rule 47 (statement -> graph .)
    ID              reduce using rule 47 (statement -> graph .)
    PLOT            reduce using rule 47 (statement -> graph .)
    RETURN          reduce using rule 47 (statement -> graph .)
    WHILE           reduce using rule 47 (statement -> graph .)
    FOR             reduce using rule 47 (statement -> graph .)
    MAX             reduce using rule 47 (statement -> graph .)
    MIN             reduce using rule 47 (statement -> graph .)
    SUM             reduce using rule 47 (statement -> graph .)
    NORMAL          reduce using rule 47 (statement -> graph .)
    UNIFORME        reduce using rule 47 (statement -> graph .)
    POISSON         reduce using rule 47 (statement -> graph .)
    BINOMIAL        reduce using rule 47 (statement -> graph .)
    INT             reduce using rule 47 (statement -> graph .)
    FLOAT           reduce using rule 47 (statement -> graph .)
    CHAR            reduce using rule 47 (statement -> graph .)
    BRACKETCLOSE    reduce using rule 47 (statement -> graph .)


state 74

    (48) statement -> return .

    IF              reduce using rule 48 (statement -> return .)
    PRINT           reduce using rule 48 (statement -> return .)
    READ            reduce using rule 48 (statement -> return .)
    ID              reduce using rule 48 (statement -> return .)
    PLOT            reduce using rule 48 (statement -> return .)
    RETURN          reduce using rule 48 (statement -> return .)
    WHILE           reduce using rule 48 (statement -> return .)
    FOR             reduce using rule 48 (statement -> return .)
    MAX             reduce using rule 48 (statement -> return .)
    MIN             reduce using rule 48 (statement -> return .)
    SUM             reduce using rule 48 (statement -> return .)
    NORMAL          reduce using rule 48 (statement -> return .)
    UNIFORME        reduce using rule 48 (statement -> return .)
    POISSON         reduce using rule 48 (statement -> return .)
    BINOMIAL        reduce using rule 48 (statement -> return .)
    INT             reduce using rule 48 (statement -> return .)
    FLOAT           reduce using rule 48 (statement -> return .)
    CHAR            reduce using rule 48 (statement -> return .)
    BRACKETCLOSE    reduce using rule 48 (statement -> return .)


state 75

    (49) statement -> while_loop .

    IF              reduce using rule 49 (statement -> while_loop .)
    PRINT           reduce using rule 49 (statement -> while_loop .)
    READ            reduce using rule 49 (statement -> while_loop .)
    ID              reduce using rule 49 (statement -> while_loop .)
    PLOT            reduce using rule 49 (statement -> while_loop .)
    RETURN          reduce using rule 49 (statement -> while_loop .)
    WHILE           reduce using rule 49 (statement -> while_loop .)
    FOR             reduce using rule 49 (statement -> while_loop .)
    MAX             reduce using rule 49 (statement -> while_loop .)
    MIN             reduce using rule 49 (statement -> while_loop .)
    SUM             reduce using rule 49 (statement -> while_loop .)
    NORMAL          reduce using rule 49 (statement -> while_loop .)
    UNIFORME        reduce using rule 49 (statement -> while_loop .)
    POISSON         reduce using rule 49 (statement -> while_loop .)
    BINOMIAL        reduce using rule 49 (statement -> while_loop .)
    INT             reduce using rule 49 (statement -> while_loop .)
    FLOAT           reduce using rule 49 (statement -> while_loop .)
    CHAR            reduce using rule 49 (statement -> while_loop .)
    BRACKETCLOSE    reduce using rule 49 (statement -> while_loop .)


state 76

    (50) statement -> for_loop .

    IF              reduce using rule 50 (statement -> for_loop .)
    PRINT           reduce using rule 50 (statement -> for_loop .)
    READ            reduce using rule 50 (statement -> for_loop .)
    ID              reduce using rule 50 (statement -> for_loop .)
    PLOT            reduce using rule 50 (statement -> for_loop .)
    RETURN          reduce using rule 50 (statement -> for_loop .)
    WHILE           reduce using rule 50 (statement -> for_loop .)
    FOR             reduce using rule 50 (statement -> for_loop .)
    MAX             reduce using rule 50 (statement -> for_loop .)
    MIN             reduce using rule 50 (statement -> for_loop .)
    SUM             reduce using rule 50 (statement -> for_loop .)
    NORMAL          reduce using rule 50 (statement -> for_loop .)
    UNIFORME        reduce using rule 50 (statement -> for_loop .)
    POISSON         reduce using rule 50 (statement -> for_loop .)
    BINOMIAL        reduce using rule 50 (statement -> for_loop .)
    INT             reduce using rule 50 (statement -> for_loop .)
    FLOAT           reduce using rule 50 (statement -> for_loop .)
    CHAR            reduce using rule 50 (statement -> for_loop .)
    BRACKETCLOSE    reduce using rule 50 (statement -> for_loop .)


state 77

    (51) statement -> max .

    IF              reduce using rule 51 (statement -> max .)
    PRINT           reduce using rule 51 (statement -> max .)
    READ            reduce using rule 51 (statement -> max .)
    ID              reduce using rule 51 (statement -> max .)
    PLOT            reduce using rule 51 (statement -> max .)
    RETURN          reduce using rule 51 (statement -> max .)
    WHILE           reduce using rule 51 (statement -> max .)
    FOR             reduce using rule 51 (statement -> max .)
    MAX             reduce using rule 51 (statement -> max .)
    MIN             reduce using rule 51 (statement -> max .)
    SUM             reduce using rule 51 (statement -> max .)
    NORMAL          reduce using rule 51 (statement -> max .)
    UNIFORME        reduce using rule 51 (statement -> max .)
    POISSON         reduce using rule 51 (statement -> max .)
    BINOMIAL        reduce using rule 51 (statement -> max .)
    INT             reduce using rule 51 (statement -> max .)
    FLOAT           reduce using rule 51 (statement -> max .)
    CHAR            reduce using rule 51 (statement -> max .)
    BRACKETCLOSE    reduce using rule 51 (statement -> max .)


state 78

    (52) statement -> min .

    IF              reduce using rule 52 (statement -> min .)
    PRINT           reduce using rule 52 (statement -> min .)
    READ            reduce using rule 52 (statement -> min .)
    ID              reduce using rule 52 (statement -> min .)
    PLOT            reduce using rule 52 (statement -> min .)
    RETURN          reduce using rule 52 (statement -> min .)
    WHILE           reduce using rule 52 (statement -> min .)
    FOR             reduce using rule 52 (statement -> min .)
    MAX             reduce using rule 52 (statement -> min .)
    MIN             reduce using rule 52 (statement -> min .)
    SUM             reduce using rule 52 (statement -> min .)
    NORMAL          reduce using rule 52 (statement -> min .)
    UNIFORME        reduce using rule 52 (statement -> min .)
    POISSON         reduce using rule 52 (statement -> min .)
    BINOMIAL        reduce using rule 52 (statement -> min .)
    INT             reduce using rule 52 (statement -> min .)
    FLOAT           reduce using rule 52 (statement -> min .)
    CHAR            reduce using rule 52 (statement -> min .)
    BRACKETCLOSE    reduce using rule 52 (statement -> min .)


state 79

    (53) statement -> sum .

    IF              reduce using rule 53 (statement -> sum .)
    PRINT           reduce using rule 53 (statement -> sum .)
    READ            reduce using rule 53 (statement -> sum .)
    ID              reduce using rule 53 (statement -> sum .)
    PLOT            reduce using rule 53 (statement -> sum .)
    RETURN          reduce using rule 53 (statement -> sum .)
    WHILE           reduce using rule 53 (statement -> sum .)
    FOR             reduce using rule 53 (statement -> sum .)
    MAX             reduce using rule 53 (statement -> sum .)
    MIN             reduce using rule 53 (statement -> sum .)
    SUM             reduce using rule 53 (statement -> sum .)
    NORMAL          reduce using rule 53 (statement -> sum .)
    UNIFORME        reduce using rule 53 (statement -> sum .)
    POISSON         reduce using rule 53 (statement -> sum .)
    BINOMIAL        reduce using rule 53 (statement -> sum .)
    INT             reduce using rule 53 (statement -> sum .)
    FLOAT           reduce using rule 53 (statement -> sum .)
    CHAR            reduce using rule 53 (statement -> sum .)
    BRACKETCLOSE    reduce using rule 53 (statement -> sum .)


state 80

    (54) statement -> normal .

    IF              reduce using rule 54 (statement -> normal .)
    PRINT           reduce using rule 54 (statement -> normal .)
    READ            reduce using rule 54 (statement -> normal .)
    ID              reduce using rule 54 (statement -> normal .)
    PLOT            reduce using rule 54 (statement -> normal .)
    RETURN          reduce using rule 54 (statement -> normal .)
    WHILE           reduce using rule 54 (statement -> normal .)
    FOR             reduce using rule 54 (statement -> normal .)
    MAX             reduce using rule 54 (statement -> normal .)
    MIN             reduce using rule 54 (statement -> normal .)
    SUM             reduce using rule 54 (statement -> normal .)
    NORMAL          reduce using rule 54 (statement -> normal .)
    UNIFORME        reduce using rule 54 (statement -> normal .)
    POISSON         reduce using rule 54 (statement -> normal .)
    BINOMIAL        reduce using rule 54 (statement -> normal .)
    INT             reduce using rule 54 (statement -> normal .)
    FLOAT           reduce using rule 54 (statement -> normal .)
    CHAR            reduce using rule 54 (statement -> normal .)
    BRACKETCLOSE    reduce using rule 54 (statement -> normal .)


state 81

    (55) statement -> uniforme .

    IF              reduce using rule 55 (statement -> uniforme .)
    PRINT           reduce using rule 55 (statement -> uniforme .)
    READ            reduce using rule 55 (statement -> uniforme .)
    ID              reduce using rule 55 (statement -> uniforme .)
    PLOT            reduce using rule 55 (statement -> uniforme .)
    RETURN          reduce using rule 55 (statement -> uniforme .)
    WHILE           reduce using rule 55 (statement -> uniforme .)
    FOR             reduce using rule 55 (statement -> uniforme .)
    MAX             reduce using rule 55 (statement -> uniforme .)
    MIN             reduce using rule 55 (statement -> uniforme .)
    SUM             reduce using rule 55 (statement -> uniforme .)
    NORMAL          reduce using rule 55 (statement -> uniforme .)
    UNIFORME        reduce using rule 55 (statement -> uniforme .)
    POISSON         reduce using rule 55 (statement -> uniforme .)
    BINOMIAL        reduce using rule 55 (statement -> uniforme .)
    INT             reduce using rule 55 (statement -> uniforme .)
    FLOAT           reduce using rule 55 (statement -> uniforme .)
    CHAR            reduce using rule 55 (statement -> uniforme .)
    BRACKETCLOSE    reduce using rule 55 (statement -> uniforme .)


state 82

    (56) statement -> poisson .

    IF              reduce using rule 56 (statement -> poisson .)
    PRINT           reduce using rule 56 (statement -> poisson .)
    READ            reduce using rule 56 (statement -> poisson .)
    ID              reduce using rule 56 (statement -> poisson .)
    PLOT            reduce using rule 56 (statement -> poisson .)
    RETURN          reduce using rule 56 (statement -> poisson .)
    WHILE           reduce using rule 56 (statement -> poisson .)
    FOR             reduce using rule 56 (statement -> poisson .)
    MAX             reduce using rule 56 (statement -> poisson .)
    MIN             reduce using rule 56 (statement -> poisson .)
    SUM             reduce using rule 56 (statement -> poisson .)
    NORMAL          reduce using rule 56 (statement -> poisson .)
    UNIFORME        reduce using rule 56 (statement -> poisson .)
    POISSON         reduce using rule 56 (statement -> poisson .)
    BINOMIAL        reduce using rule 56 (statement -> poisson .)
    INT             reduce using rule 56 (statement -> poisson .)
    FLOAT           reduce using rule 56 (statement -> poisson .)
    CHAR            reduce using rule 56 (statement -> poisson .)
    BRACKETCLOSE    reduce using rule 56 (statement -> poisson .)


state 83

    (57) statement -> binomial .

    IF              reduce using rule 57 (statement -> binomial .)
    PRINT           reduce using rule 57 (statement -> binomial .)
    READ            reduce using rule 57 (statement -> binomial .)
    ID              reduce using rule 57 (statement -> binomial .)
    PLOT            reduce using rule 57 (statement -> binomial .)
    RETURN          reduce using rule 57 (statement -> binomial .)
    WHILE           reduce using rule 57 (statement -> binomial .)
    FOR             reduce using rule 57 (statement -> binomial .)
    MAX             reduce using rule 57 (statement -> binomial .)
    MIN             reduce using rule 57 (statement -> binomial .)
    SUM             reduce using rule 57 (statement -> binomial .)
    NORMAL          reduce using rule 57 (statement -> binomial .)
    UNIFORME        reduce using rule 57 (statement -> binomial .)
    POISSON         reduce using rule 57 (statement -> binomial .)
    BINOMIAL        reduce using rule 57 (statement -> binomial .)
    INT             reduce using rule 57 (statement -> binomial .)
    FLOAT           reduce using rule 57 (statement -> binomial .)
    CHAR            reduce using rule 57 (statement -> binomial .)
    BRACKETCLOSE    reduce using rule 57 (statement -> binomial .)


state 84

    (58) dec_variables -> dec_variabless .

    IF              reduce using rule 58 (dec_variables -> dec_variabless .)
    PRINT           reduce using rule 58 (dec_variables -> dec_variabless .)
    READ            reduce using rule 58 (dec_variables -> dec_variabless .)
    ID              reduce using rule 58 (dec_variables -> dec_variabless .)
    PLOT            reduce using rule 58 (dec_variables -> dec_variabless .)
    RETURN          reduce using rule 58 (dec_variables -> dec_variabless .)
    WHILE           reduce using rule 58 (dec_variables -> dec_variabless .)
    FOR             reduce using rule 58 (dec_variables -> dec_variabless .)
    MAX             reduce using rule 58 (dec_variables -> dec_variabless .)
    MIN             reduce using rule 58 (dec_variables -> dec_variabless .)
    SUM             reduce using rule 58 (dec_variables -> dec_variabless .)
    NORMAL          reduce using rule 58 (dec_variables -> dec_variabless .)
    UNIFORME        reduce using rule 58 (dec_variables -> dec_variabless .)
    POISSON         reduce using rule 58 (dec_variables -> dec_variabless .)
    BINOMIAL        reduce using rule 58 (dec_variables -> dec_variabless .)
    INT             reduce using rule 58 (dec_variables -> dec_variabless .)
    FLOAT           reduce using rule 58 (dec_variables -> dec_variabless .)
    CHAR            reduce using rule 58 (dec_variables -> dec_variabless .)
    BRACKETCLOSE    reduce using rule 58 (dec_variables -> dec_variabless .)


state 85

    (67) assignment -> variableAssignment . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 110


state 86

    (107) condition -> IF . PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (108) condition -> IF . PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse

    PARENOPEN       shift and go to state 111


state 87

    (113) writing -> PRINT . PARENOPEN writingg PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 112


state 88

    (119) reading -> READ . multivariables SEMICOLON
    (120) multivariables -> . variable
    (121) multivariables -> . variable COLON multivariables
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 115

    multivariables                 shift and go to state 113
    variable                       shift and go to state 114

state 89

    (68) call_func -> ID . generarERA PARENOPEN call_funcc PARENCLOSE
    (104) variableAssignment -> ID .
    (105) variableAssignment -> ID . BRACEOPEN exp BRACECLOSE
    (106) variableAssignment -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (69) generarERA -> . empty
    (139) empty -> .

    EQUAL           reduce using rule 104 (variableAssignment -> ID .)
    BRACEOPEN       shift and go to state 117
    PARENOPEN       reduce using rule 139 (empty -> .)

    generarERA                     shift and go to state 116
    empty                          shift and go to state 118

state 90

    (74) graph -> PLOT . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 119


state 91

    (129) return -> RETURN . exp SEMICOLON
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 120
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 92

    (122) while_loop -> WHILE . whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (123) whileMigaja -> . empty
    (139) empty -> .

    PARENOPEN       reduce using rule 139 (empty -> .)

    whileMigaja                    shift and go to state 132
    empty                          shift and go to state 133

state 93

    (126) for_loop -> FOR . PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd

    PARENOPEN       shift and go to state 134


state 94

    (130) max -> MAX . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 135


state 95

    (131) min -> MIN . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 136


state 96

    (132) sum -> SUM . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 137


state 97

    (138) normal -> NORMAL . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 138


state 98

    (137) uniforme -> UNIFORME . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 139


state 99

    (136) poisson -> POISSON . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 140


state 100

    (135) binomial -> BINOMIAL . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 141


state 101

    (59) dec_variabless -> type . guardarTipo dec_mvar SEMICOLON dec_variabless
    (60) dec_variabless -> type . guardarTipo dec_mvar SEMICOLON
    (15) guardarTipo -> . empty
    (139) empty -> .

    ID              reduce using rule 139 (empty -> .)

    guardarTipo                    shift and go to state 142
    empty                          shift and go to state 33

state 102

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam . PARENCLOSE startFunc body exitFunc

    PARENCLOSE      shift and go to state 143


state 103

    (29) numeroParam -> empty .

    PARENCLOSE      reduce using rule 29 (numeroParam -> empty .)


state 104

    (26) param -> typeParam ID .
    (27) param -> typeParam ID . COLON param

    PARENCLOSE      reduce using rule 26 (param -> typeParam ID .)
    COLON           shift and go to state 144


state 105

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam . PARENCLOSE startFunc body exitFunc

    PARENCLOSE      shift and go to state 145


state 106

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE COLON mvar
    (21) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE

    CTEINT          shift and go to state 146


state 107

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON . mvar
    (16) mvar -> . ID COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> . ID
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 39

    mvar                           shift and go to state 147

state 108

    (37) body -> BRACKETOPEN bodyy BRACKETCLOSE .

    $end            reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FUNCTION        reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MAIN            reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    ELSE            reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    IF              reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    PRINT           reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    READ            reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    ID              reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    PLOT            reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    RETURN          reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    WHILE           reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FOR             reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MAX             reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MIN             reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    SUM             reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    NORMAL          reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    UNIFORME        reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    POISSON         reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    BINOMIAL        reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    INT             reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FLOAT           reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    CHAR            reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    BRACKETCLOSE    reduce using rule 37 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)


state 109

    (39) bodyy -> statement bodyy .

    BRACKETCLOSE    reduce using rule 39 (bodyy -> statement bodyy .)


state 110

    (67) assignment -> variableAssignment EQUAL . exp SEMICOLON
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 148
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 111

    (107) condition -> IF PARENOPEN . exp PARENCLOSE cuadruploIF body ifEnd
    (108) condition -> IF PARENOPEN . exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 149
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 112

    (113) writing -> PRINT PARENOPEN . writingg PARENCLOSE SEMICOLON
    (114) writingg -> . exp
    (115) writingg -> . exp COLON writingg
    (116) writingg -> . auxString
    (117) writingg -> . auxString COLON writingg
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (118) auxString -> . CTESTRING
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 153
    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    writingg                       shift and go to state 150
    exp                            shift and go to state 151
    auxString                      shift and go to state 152
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 113

    (119) reading -> READ multivariables . SEMICOLON

    SEMICOLON       shift and go to state 154


state 114

    (120) multivariables -> variable .
    (121) multivariables -> variable . COLON multivariables

    SEMICOLON       reduce using rule 120 (multivariables -> variable .)
    COLON           shift and go to state 155


state 115

    (101) variable -> ID .
    (102) variable -> ID . BRACEOPEN exp BRACECLOSE
    (103) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    COLON           reduce using rule 101 (variable -> ID .)
    SEMICOLON       reduce using rule 101 (variable -> ID .)
    PARENCLOSE      reduce using rule 101 (variable -> ID .)
    BRACEOPEN       shift and go to state 156


state 116

    (68) call_func -> ID generarERA . PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 157


state 117

    (105) variableAssignment -> ID BRACEOPEN . exp BRACECLOSE
    (106) variableAssignment -> ID BRACEOPEN . exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 158
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 118

    (69) generarERA -> empty .

    PARENOPEN       reduce using rule 69 (generarERA -> empty .)


state 119

    (74) graph -> PLOT PARENOPEN . exp PARENCLOSE SEMICOLON
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 159
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 120

    (129) return -> RETURN exp . SEMICOLON
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    SEMICOLON       shift and go to state 160
    AND             shift and go to state 161
    OR              shift and go to state 162


state 121

    (75) exp -> expp .
    (79) expp -> expp . GREATHERTHAN m_exp
    (80) expp -> expp . LESSTHAN m_exp
    (81) expp -> expp . GREATHEREQUAL m_exp
    (82) expp -> expp . LESSEQUAL m_exp
    (83) expp -> expp . DIFFERENT m_exp
    (84) expp -> expp . SAME m_exp

    SEMICOLON       reduce using rule 75 (exp -> expp .)
    AND             reduce using rule 75 (exp -> expp .)
    OR              reduce using rule 75 (exp -> expp .)
    PARENCLOSE      reduce using rule 75 (exp -> expp .)
    COLON           reduce using rule 75 (exp -> expp .)
    BRACECLOSE      reduce using rule 75 (exp -> expp .)
    TO              reduce using rule 75 (exp -> expp .)
    GREATHERTHAN    shift and go to state 163
    LESSTHAN        shift and go to state 164
    GREATHEREQUAL   shift and go to state 165
    LESSEQUAL       shift and go to state 166
    DIFFERENT       shift and go to state 167
    SAME            shift and go to state 168


state 122

    (78) expp -> m_exp .
    (86) m_exp -> m_exp . PLUS termino
    (87) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 78 (expp -> m_exp .)
    LESSTHAN        reduce using rule 78 (expp -> m_exp .)
    GREATHEREQUAL   reduce using rule 78 (expp -> m_exp .)
    LESSEQUAL       reduce using rule 78 (expp -> m_exp .)
    DIFFERENT       reduce using rule 78 (expp -> m_exp .)
    SAME            reduce using rule 78 (expp -> m_exp .)
    SEMICOLON       reduce using rule 78 (expp -> m_exp .)
    AND             reduce using rule 78 (expp -> m_exp .)
    OR              reduce using rule 78 (expp -> m_exp .)
    PARENCLOSE      reduce using rule 78 (expp -> m_exp .)
    COLON           reduce using rule 78 (expp -> m_exp .)
    BRACECLOSE      reduce using rule 78 (expp -> m_exp .)
    TO              reduce using rule 78 (expp -> m_exp .)
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170


state 123

    (85) m_exp -> termino .
    (89) termino -> termino . MULTIPLY factor
    (90) termino -> termino . DIVIDE factor

    PLUS            reduce using rule 85 (m_exp -> termino .)
    MINUS           reduce using rule 85 (m_exp -> termino .)
    GREATHERTHAN    reduce using rule 85 (m_exp -> termino .)
    LESSTHAN        reduce using rule 85 (m_exp -> termino .)
    GREATHEREQUAL   reduce using rule 85 (m_exp -> termino .)
    LESSEQUAL       reduce using rule 85 (m_exp -> termino .)
    DIFFERENT       reduce using rule 85 (m_exp -> termino .)
    SAME            reduce using rule 85 (m_exp -> termino .)
    SEMICOLON       reduce using rule 85 (m_exp -> termino .)
    AND             reduce using rule 85 (m_exp -> termino .)
    OR              reduce using rule 85 (m_exp -> termino .)
    PARENCLOSE      reduce using rule 85 (m_exp -> termino .)
    COLON           reduce using rule 85 (m_exp -> termino .)
    BRACECLOSE      reduce using rule 85 (m_exp -> termino .)
    TO              reduce using rule 85 (m_exp -> termino .)
    MULTIPLY        shift and go to state 171
    DIVIDE          shift and go to state 172


state 124

    (88) termino -> factor .

    MULTIPLY        reduce using rule 88 (termino -> factor .)
    DIVIDE          reduce using rule 88 (termino -> factor .)
    PLUS            reduce using rule 88 (termino -> factor .)
    MINUS           reduce using rule 88 (termino -> factor .)
    GREATHERTHAN    reduce using rule 88 (termino -> factor .)
    LESSTHAN        reduce using rule 88 (termino -> factor .)
    GREATHEREQUAL   reduce using rule 88 (termino -> factor .)
    LESSEQUAL       reduce using rule 88 (termino -> factor .)
    DIFFERENT       reduce using rule 88 (termino -> factor .)
    SAME            reduce using rule 88 (termino -> factor .)
    SEMICOLON       reduce using rule 88 (termino -> factor .)
    AND             reduce using rule 88 (termino -> factor .)
    OR              reduce using rule 88 (termino -> factor .)
    PARENCLOSE      reduce using rule 88 (termino -> factor .)
    COLON           reduce using rule 88 (termino -> factor .)
    BRACECLOSE      reduce using rule 88 (termino -> factor .)
    TO              reduce using rule 88 (termino -> factor .)


state 125

    (91) factor -> ID .
    (101) variable -> ID .
    (102) variable -> ID . BRACEOPEN exp BRACECLOSE
    (103) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> ID . generarERA PARENOPEN call_funcc PARENCLOSE
    (69) generarERA -> . empty
    (139) empty -> .

  ! reduce/reduce conflict for MULTIPLY resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for GREATHERTHAN resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for SAME resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for PARENCLOSE resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for BRACECLOSE resolved using rule 91 (factor -> ID .)
  ! reduce/reduce conflict for TO resolved using rule 91 (factor -> ID .)
    MULTIPLY        reduce using rule 91 (factor -> ID .)
    DIVIDE          reduce using rule 91 (factor -> ID .)
    PLUS            reduce using rule 91 (factor -> ID .)
    MINUS           reduce using rule 91 (factor -> ID .)
    GREATHERTHAN    reduce using rule 91 (factor -> ID .)
    LESSTHAN        reduce using rule 91 (factor -> ID .)
    GREATHEREQUAL   reduce using rule 91 (factor -> ID .)
    LESSEQUAL       reduce using rule 91 (factor -> ID .)
    DIFFERENT       reduce using rule 91 (factor -> ID .)
    SAME            reduce using rule 91 (factor -> ID .)
    SEMICOLON       reduce using rule 91 (factor -> ID .)
    AND             reduce using rule 91 (factor -> ID .)
    OR              reduce using rule 91 (factor -> ID .)
    PARENCLOSE      reduce using rule 91 (factor -> ID .)
    COLON           reduce using rule 91 (factor -> ID .)
    BRACECLOSE      reduce using rule 91 (factor -> ID .)
    TO              reduce using rule 91 (factor -> ID .)
    BRACEOPEN       shift and go to state 156
    PARENOPEN       reduce using rule 139 (empty -> .)

  ! MULTIPLY        [ reduce using rule 101 (variable -> ID .) ]
  ! DIVIDE          [ reduce using rule 101 (variable -> ID .) ]
  ! PLUS            [ reduce using rule 101 (variable -> ID .) ]
  ! MINUS           [ reduce using rule 101 (variable -> ID .) ]
  ! GREATHERTHAN    [ reduce using rule 101 (variable -> ID .) ]
  ! LESSTHAN        [ reduce using rule 101 (variable -> ID .) ]
  ! GREATHEREQUAL   [ reduce using rule 101 (variable -> ID .) ]
  ! LESSEQUAL       [ reduce using rule 101 (variable -> ID .) ]
  ! DIFFERENT       [ reduce using rule 101 (variable -> ID .) ]
  ! SAME            [ reduce using rule 101 (variable -> ID .) ]
  ! SEMICOLON       [ reduce using rule 101 (variable -> ID .) ]
  ! AND             [ reduce using rule 101 (variable -> ID .) ]
  ! OR              [ reduce using rule 101 (variable -> ID .) ]
  ! PARENCLOSE      [ reduce using rule 101 (variable -> ID .) ]
  ! COLON           [ reduce using rule 101 (variable -> ID .) ]
  ! BRACECLOSE      [ reduce using rule 101 (variable -> ID .) ]
  ! TO              [ reduce using rule 101 (variable -> ID .) ]

    generarERA                     shift and go to state 116
    empty                          shift and go to state 118

state 126

    (92) factor -> CTEINT . guardarConstanteInt
    (98) guardarConstanteInt -> . empty
    (139) empty -> .

    MULTIPLY        reduce using rule 139 (empty -> .)
    DIVIDE          reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GREATHERTHAN    reduce using rule 139 (empty -> .)
    LESSTHAN        reduce using rule 139 (empty -> .)
    GREATHEREQUAL   reduce using rule 139 (empty -> .)
    LESSEQUAL       reduce using rule 139 (empty -> .)
    DIFFERENT       reduce using rule 139 (empty -> .)
    SAME            reduce using rule 139 (empty -> .)
    SEMICOLON       reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    PARENCLOSE      reduce using rule 139 (empty -> .)
    COLON           reduce using rule 139 (empty -> .)
    BRACECLOSE      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

    guardarConstanteInt            shift and go to state 173
    empty                          shift and go to state 174

state 127

    (93) factor -> CTFLOAT . guardarConstanteFloat
    (99) guardarConstanteFloat -> . empty
    (139) empty -> .

    MULTIPLY        reduce using rule 139 (empty -> .)
    DIVIDE          reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GREATHERTHAN    reduce using rule 139 (empty -> .)
    LESSTHAN        reduce using rule 139 (empty -> .)
    GREATHEREQUAL   reduce using rule 139 (empty -> .)
    LESSEQUAL       reduce using rule 139 (empty -> .)
    DIFFERENT       reduce using rule 139 (empty -> .)
    SAME            reduce using rule 139 (empty -> .)
    SEMICOLON       reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    PARENCLOSE      reduce using rule 139 (empty -> .)
    COLON           reduce using rule 139 (empty -> .)
    BRACECLOSE      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

    guardarConstanteFloat          shift and go to state 175
    empty                          shift and go to state 176

state 128

    (94) factor -> CTECHAR . guardarConstanteChar
    (100) guardarConstanteChar -> . empty
    (139) empty -> .

    MULTIPLY        reduce using rule 139 (empty -> .)
    DIVIDE          reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GREATHERTHAN    reduce using rule 139 (empty -> .)
    LESSTHAN        reduce using rule 139 (empty -> .)
    GREATHEREQUAL   reduce using rule 139 (empty -> .)
    LESSEQUAL       reduce using rule 139 (empty -> .)
    DIFFERENT       reduce using rule 139 (empty -> .)
    SAME            reduce using rule 139 (empty -> .)
    SEMICOLON       reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    PARENCLOSE      reduce using rule 139 (empty -> .)
    COLON           reduce using rule 139 (empty -> .)
    BRACECLOSE      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

    guardarConstanteChar           shift and go to state 177
    empty                          shift and go to state 178

state 129

    (95) factor -> variable .

    MULTIPLY        reduce using rule 95 (factor -> variable .)
    DIVIDE          reduce using rule 95 (factor -> variable .)
    PLUS            reduce using rule 95 (factor -> variable .)
    MINUS           reduce using rule 95 (factor -> variable .)
    GREATHERTHAN    reduce using rule 95 (factor -> variable .)
    LESSTHAN        reduce using rule 95 (factor -> variable .)
    GREATHEREQUAL   reduce using rule 95 (factor -> variable .)
    LESSEQUAL       reduce using rule 95 (factor -> variable .)
    DIFFERENT       reduce using rule 95 (factor -> variable .)
    SAME            reduce using rule 95 (factor -> variable .)
    SEMICOLON       reduce using rule 95 (factor -> variable .)
    AND             reduce using rule 95 (factor -> variable .)
    OR              reduce using rule 95 (factor -> variable .)
    PARENCLOSE      reduce using rule 95 (factor -> variable .)
    COLON           reduce using rule 95 (factor -> variable .)
    BRACECLOSE      reduce using rule 95 (factor -> variable .)
    TO              reduce using rule 95 (factor -> variable .)


state 130

    (96) factor -> call_func .

    MULTIPLY        reduce using rule 96 (factor -> call_func .)
    DIVIDE          reduce using rule 96 (factor -> call_func .)
    PLUS            reduce using rule 96 (factor -> call_func .)
    MINUS           reduce using rule 96 (factor -> call_func .)
    GREATHERTHAN    reduce using rule 96 (factor -> call_func .)
    LESSTHAN        reduce using rule 96 (factor -> call_func .)
    GREATHEREQUAL   reduce using rule 96 (factor -> call_func .)
    LESSEQUAL       reduce using rule 96 (factor -> call_func .)
    DIFFERENT       reduce using rule 96 (factor -> call_func .)
    SAME            reduce using rule 96 (factor -> call_func .)
    SEMICOLON       reduce using rule 96 (factor -> call_func .)
    AND             reduce using rule 96 (factor -> call_func .)
    OR              reduce using rule 96 (factor -> call_func .)
    PARENCLOSE      reduce using rule 96 (factor -> call_func .)
    COLON           reduce using rule 96 (factor -> call_func .)
    BRACECLOSE      reduce using rule 96 (factor -> call_func .)
    TO              reduce using rule 96 (factor -> call_func .)


state 131

    (97) factor -> PARENOPEN . exp PARENCLOSE
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 179
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 132

    (122) while_loop -> WHILE whileMigaja . PARENOPEN exp PARENCLOSE whileEval body whileEnd

    PARENOPEN       shift and go to state 180


state 133

    (123) whileMigaja -> empty .

    PARENOPEN       reduce using rule 123 (whileMigaja -> empty .)


state 134

    (126) for_loop -> FOR PARENOPEN . ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd

    ID              shift and go to state 181


state 135

    (130) max -> MAX PARENOPEN . exp PARENCLOSE SEMICOLON
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 182
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 136

    (131) min -> MIN PARENOPEN . exp PARENCLOSE SEMICOLON
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 183
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 137

    (132) sum -> SUM PARENOPEN . exp PARENCLOSE SEMICOLON
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 184
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 138

    (138) normal -> NORMAL PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (133) param_dist -> . variable
    (134) param_dist -> . variable COLON param_dist
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 115

    param_dist                     shift and go to state 185
    variable                       shift and go to state 186

state 139

    (137) uniforme -> UNIFORME PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (133) param_dist -> . variable
    (134) param_dist -> . variable COLON param_dist
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 115

    param_dist                     shift and go to state 187
    variable                       shift and go to state 186

state 140

    (136) poisson -> POISSON PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (133) param_dist -> . variable
    (134) param_dist -> . variable COLON param_dist
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 115

    param_dist                     shift and go to state 188
    variable                       shift and go to state 186

state 141

    (135) binomial -> BINOMIAL PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (133) param_dist -> . variable
    (134) param_dist -> . variable COLON param_dist
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 115

    param_dist                     shift and go to state 189
    variable                       shift and go to state 186

state 142

    (59) dec_variabless -> type guardarTipo . dec_mvar SEMICOLON dec_variabless
    (60) dec_variabless -> type guardarTipo . dec_mvar SEMICOLON
    (61) dec_mvar -> . ID COLON dec_mvar
    (62) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (64) dec_mvar -> . ID
    (65) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (66) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 191

    dec_mvar                       shift and go to state 190

state 143

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE . startFunc body exitFunc
    (36) startFunc -> . empty
    (139) empty -> .

    BRACKETOPEN     reduce using rule 139 (empty -> .)

    startFunc                      shift and go to state 192
    empty                          shift and go to state 193

state 144

    (27) param -> typeParam ID COLON . param
    (26) param -> . typeParam ID
    (27) param -> . typeParam ID COLON param
    (28) param -> . empty
    (30) typeParam -> . INT
    (31) typeParam -> . FLOAT
    (32) typeParam -> . CHAR
    (139) empty -> .

    INT             shift and go to state 59
    FLOAT           shift and go to state 60
    CHAR            shift and go to state 61
    PARENCLOSE      reduce using rule 139 (empty -> .)

    typeParam                      shift and go to state 57
    param                          shift and go to state 194
    empty                          shift and go to state 58

state 145

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE . startFunc body exitFunc
    (36) startFunc -> . empty
    (139) empty -> .

    BRACKETOPEN     reduce using rule 139 (empty -> .)

    startFunc                      shift and go to state 195
    empty                          shift and go to state 193

state 146

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE COLON mvar
    (21) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE

    BRACECLOSE      shift and go to state 196


state 147

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar .

    SEMICOLON       reduce using rule 17 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar .)


state 148

    (67) assignment -> variableAssignment EQUAL exp . SEMICOLON
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    SEMICOLON       shift and go to state 197
    AND             shift and go to state 161
    OR              shift and go to state 162


state 149

    (107) condition -> IF PARENOPEN exp . PARENCLOSE cuadruploIF body ifEnd
    (108) condition -> IF PARENOPEN exp . PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 198
    AND             shift and go to state 161
    OR              shift and go to state 162


state 150

    (113) writing -> PRINT PARENOPEN writingg . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 199


state 151

    (114) writingg -> exp .
    (115) writingg -> exp . COLON writingg
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      reduce using rule 114 (writingg -> exp .)
    COLON           shift and go to state 200
    AND             shift and go to state 161
    OR              shift and go to state 162


state 152

    (116) writingg -> auxString .
    (117) writingg -> auxString . COLON writingg

    PARENCLOSE      reduce using rule 116 (writingg -> auxString .)
    COLON           shift and go to state 201


state 153

    (118) auxString -> CTESTRING .

    COLON           reduce using rule 118 (auxString -> CTESTRING .)
    PARENCLOSE      reduce using rule 118 (auxString -> CTESTRING .)


state 154

    (119) reading -> READ multivariables SEMICOLON .

    IF              reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    PRINT           reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    READ            reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    ID              reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    PLOT            reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    RETURN          reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    WHILE           reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    FOR             reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    MAX             reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    MIN             reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    SUM             reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    NORMAL          reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    UNIFORME        reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    POISSON         reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    BINOMIAL        reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    INT             reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    FLOAT           reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    CHAR            reduce using rule 119 (reading -> READ multivariables SEMICOLON .)
    BRACKETCLOSE    reduce using rule 119 (reading -> READ multivariables SEMICOLON .)


state 155

    (121) multivariables -> variable COLON . multivariables
    (120) multivariables -> . variable
    (121) multivariables -> . variable COLON multivariables
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 115

    variable                       shift and go to state 114
    multivariables                 shift and go to state 202

state 156

    (102) variable -> ID BRACEOPEN . exp BRACECLOSE
    (103) variable -> ID BRACEOPEN . exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 203
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 157

    (68) call_func -> ID generarERA PARENOPEN . call_funcc PARENCLOSE
    (70) call_funcc -> . exp mandarParam
    (71) call_funcc -> . exp mandarParam COLON call_funcc
    (72) call_funcc -> . empty
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (139) empty -> .
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    PARENCLOSE      reduce using rule 139 (empty -> .)
    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    call_funcc                     shift and go to state 204
    exp                            shift and go to state 205
    empty                          shift and go to state 206
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 158

    (105) variableAssignment -> ID BRACEOPEN exp . BRACECLOSE
    (106) variableAssignment -> ID BRACEOPEN exp . BRACECLOSE BRACEOPEN exp BRACECLOSE
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    BRACECLOSE      shift and go to state 207
    AND             shift and go to state 161
    OR              shift and go to state 162


state 159

    (74) graph -> PLOT PARENOPEN exp . PARENCLOSE SEMICOLON
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 208
    AND             shift and go to state 161
    OR              shift and go to state 162


state 160

    (129) return -> RETURN exp SEMICOLON .

    IF              reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    READ            reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    ID              reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    PLOT            reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    MAX             reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    MIN             reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    SUM             reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    NORMAL          reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    UNIFORME        reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    POISSON         reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    BINOMIAL        reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    INT             reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    FLOAT           reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    CHAR            reduce using rule 129 (return -> RETURN exp SEMICOLON .)
    BRACKETCLOSE    reduce using rule 129 (return -> RETURN exp SEMICOLON .)


state 161

    (76) exp -> exp AND . expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    expp                           shift and go to state 209
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 162

    (77) exp -> exp OR . expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    expp                           shift and go to state 210
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 163

    (79) expp -> expp GREATHERTHAN . m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    m_exp                          shift and go to state 211
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 164

    (80) expp -> expp LESSTHAN . m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    m_exp                          shift and go to state 212
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 165

    (81) expp -> expp GREATHEREQUAL . m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    m_exp                          shift and go to state 213
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 166

    (82) expp -> expp LESSEQUAL . m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    m_exp                          shift and go to state 214
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 167

    (83) expp -> expp DIFFERENT . m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    m_exp                          shift and go to state 215
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 168

    (84) expp -> expp SAME . m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    m_exp                          shift and go to state 216
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 169

    (86) m_exp -> m_exp PLUS . termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    termino                        shift and go to state 217
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 170

    (87) m_exp -> m_exp MINUS . termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    termino                        shift and go to state 218
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 171

    (89) termino -> termino MULTIPLY . factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    factor                         shift and go to state 219
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 172

    (90) termino -> termino DIVIDE . factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    factor                         shift and go to state 220
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 173

    (92) factor -> CTEINT guardarConstanteInt .

    MULTIPLY        reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    DIVIDE          reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    PLUS            reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    MINUS           reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    GREATHERTHAN    reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    LESSTHAN        reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    GREATHEREQUAL   reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    LESSEQUAL       reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    DIFFERENT       reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    SAME            reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    SEMICOLON       reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    AND             reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    OR              reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    PARENCLOSE      reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    COLON           reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    BRACECLOSE      reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)
    TO              reduce using rule 92 (factor -> CTEINT guardarConstanteInt .)


state 174

    (98) guardarConstanteInt -> empty .

    MULTIPLY        reduce using rule 98 (guardarConstanteInt -> empty .)
    DIVIDE          reduce using rule 98 (guardarConstanteInt -> empty .)
    PLUS            reduce using rule 98 (guardarConstanteInt -> empty .)
    MINUS           reduce using rule 98 (guardarConstanteInt -> empty .)
    GREATHERTHAN    reduce using rule 98 (guardarConstanteInt -> empty .)
    LESSTHAN        reduce using rule 98 (guardarConstanteInt -> empty .)
    GREATHEREQUAL   reduce using rule 98 (guardarConstanteInt -> empty .)
    LESSEQUAL       reduce using rule 98 (guardarConstanteInt -> empty .)
    DIFFERENT       reduce using rule 98 (guardarConstanteInt -> empty .)
    SAME            reduce using rule 98 (guardarConstanteInt -> empty .)
    SEMICOLON       reduce using rule 98 (guardarConstanteInt -> empty .)
    AND             reduce using rule 98 (guardarConstanteInt -> empty .)
    OR              reduce using rule 98 (guardarConstanteInt -> empty .)
    PARENCLOSE      reduce using rule 98 (guardarConstanteInt -> empty .)
    COLON           reduce using rule 98 (guardarConstanteInt -> empty .)
    BRACECLOSE      reduce using rule 98 (guardarConstanteInt -> empty .)
    TO              reduce using rule 98 (guardarConstanteInt -> empty .)


state 175

    (93) factor -> CTFLOAT guardarConstanteFloat .

    MULTIPLY        reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    DIVIDE          reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    PLUS            reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    MINUS           reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    GREATHERTHAN    reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    LESSTHAN        reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    GREATHEREQUAL   reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    LESSEQUAL       reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    DIFFERENT       reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    SAME            reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    SEMICOLON       reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    AND             reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    OR              reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    PARENCLOSE      reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    COLON           reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    BRACECLOSE      reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)
    TO              reduce using rule 93 (factor -> CTFLOAT guardarConstanteFloat .)


state 176

    (99) guardarConstanteFloat -> empty .

    MULTIPLY        reduce using rule 99 (guardarConstanteFloat -> empty .)
    DIVIDE          reduce using rule 99 (guardarConstanteFloat -> empty .)
    PLUS            reduce using rule 99 (guardarConstanteFloat -> empty .)
    MINUS           reduce using rule 99 (guardarConstanteFloat -> empty .)
    GREATHERTHAN    reduce using rule 99 (guardarConstanteFloat -> empty .)
    LESSTHAN        reduce using rule 99 (guardarConstanteFloat -> empty .)
    GREATHEREQUAL   reduce using rule 99 (guardarConstanteFloat -> empty .)
    LESSEQUAL       reduce using rule 99 (guardarConstanteFloat -> empty .)
    DIFFERENT       reduce using rule 99 (guardarConstanteFloat -> empty .)
    SAME            reduce using rule 99 (guardarConstanteFloat -> empty .)
    SEMICOLON       reduce using rule 99 (guardarConstanteFloat -> empty .)
    AND             reduce using rule 99 (guardarConstanteFloat -> empty .)
    OR              reduce using rule 99 (guardarConstanteFloat -> empty .)
    PARENCLOSE      reduce using rule 99 (guardarConstanteFloat -> empty .)
    COLON           reduce using rule 99 (guardarConstanteFloat -> empty .)
    BRACECLOSE      reduce using rule 99 (guardarConstanteFloat -> empty .)
    TO              reduce using rule 99 (guardarConstanteFloat -> empty .)


state 177

    (94) factor -> CTECHAR guardarConstanteChar .

    MULTIPLY        reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    DIVIDE          reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    PLUS            reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    MINUS           reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    GREATHERTHAN    reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    LESSTHAN        reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    GREATHEREQUAL   reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    LESSEQUAL       reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    DIFFERENT       reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    SAME            reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    SEMICOLON       reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    AND             reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    OR              reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    PARENCLOSE      reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    COLON           reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    BRACECLOSE      reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)
    TO              reduce using rule 94 (factor -> CTECHAR guardarConstanteChar .)


state 178

    (100) guardarConstanteChar -> empty .

    MULTIPLY        reduce using rule 100 (guardarConstanteChar -> empty .)
    DIVIDE          reduce using rule 100 (guardarConstanteChar -> empty .)
    PLUS            reduce using rule 100 (guardarConstanteChar -> empty .)
    MINUS           reduce using rule 100 (guardarConstanteChar -> empty .)
    GREATHERTHAN    reduce using rule 100 (guardarConstanteChar -> empty .)
    LESSTHAN        reduce using rule 100 (guardarConstanteChar -> empty .)
    GREATHEREQUAL   reduce using rule 100 (guardarConstanteChar -> empty .)
    LESSEQUAL       reduce using rule 100 (guardarConstanteChar -> empty .)
    DIFFERENT       reduce using rule 100 (guardarConstanteChar -> empty .)
    SAME            reduce using rule 100 (guardarConstanteChar -> empty .)
    SEMICOLON       reduce using rule 100 (guardarConstanteChar -> empty .)
    AND             reduce using rule 100 (guardarConstanteChar -> empty .)
    OR              reduce using rule 100 (guardarConstanteChar -> empty .)
    PARENCLOSE      reduce using rule 100 (guardarConstanteChar -> empty .)
    COLON           reduce using rule 100 (guardarConstanteChar -> empty .)
    BRACECLOSE      reduce using rule 100 (guardarConstanteChar -> empty .)
    TO              reduce using rule 100 (guardarConstanteChar -> empty .)


state 179

    (97) factor -> PARENOPEN exp . PARENCLOSE
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 221
    AND             shift and go to state 161
    OR              shift and go to state 162


state 180

    (122) while_loop -> WHILE whileMigaja PARENOPEN . exp PARENCLOSE whileEval body whileEnd
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 222
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 181

    (126) for_loop -> FOR PARENOPEN ID . EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd

    EQUAL           shift and go to state 223


state 182

    (130) max -> MAX PARENOPEN exp . PARENCLOSE SEMICOLON
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 224
    AND             shift and go to state 161
    OR              shift and go to state 162


state 183

    (131) min -> MIN PARENOPEN exp . PARENCLOSE SEMICOLON
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 225
    AND             shift and go to state 161
    OR              shift and go to state 162


state 184

    (132) sum -> SUM PARENOPEN exp . PARENCLOSE SEMICOLON
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 226
    AND             shift and go to state 161
    OR              shift and go to state 162


state 185

    (138) normal -> NORMAL PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 227


state 186

    (133) param_dist -> variable .
    (134) param_dist -> variable . COLON param_dist

    PARENCLOSE      reduce using rule 133 (param_dist -> variable .)
    COLON           shift and go to state 228


state 187

    (137) uniforme -> UNIFORME PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 229


state 188

    (136) poisson -> POISSON PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 230


state 189

    (135) binomial -> BINOMIAL PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 231


state 190

    (59) dec_variabless -> type guardarTipo dec_mvar . SEMICOLON dec_variabless
    (60) dec_variabless -> type guardarTipo dec_mvar . SEMICOLON

    SEMICOLON       shift and go to state 232


state 191

    (61) dec_mvar -> ID . COLON dec_mvar
    (62) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (64) dec_mvar -> ID .
    (65) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE
    (66) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 233
    BRACEOPEN       shift and go to state 234
    SEMICOLON       reduce using rule 64 (dec_mvar -> ID .)


state 192

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc . body exitFunc
    (37) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 235

state 193

    (36) startFunc -> empty .

    BRACKETOPEN     reduce using rule 36 (startFunc -> empty .)


state 194

    (27) param -> typeParam ID COLON param .

    PARENCLOSE      reduce using rule 27 (param -> typeParam ID COLON param .)


state 195

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc . body exitFunc
    (37) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 236

state 196

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE . COLON mvar
    (21) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .

    COLON           shift and go to state 237
    SEMICOLON       reduce using rule 21 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .)


state 197

    (67) assignment -> variableAssignment EQUAL exp SEMICOLON .

    IF              reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    READ            reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    ID              reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    PLOT            reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    FOR             reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    MAX             reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    MIN             reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    SUM             reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    NORMAL          reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    UNIFORME        reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    POISSON         reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    BINOMIAL        reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    INT             reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    FLOAT           reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    CHAR            reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    BRACKETCLOSE    reduce using rule 67 (assignment -> variableAssignment EQUAL exp SEMICOLON .)


state 198

    (107) condition -> IF PARENOPEN exp PARENCLOSE . cuadruploIF body ifEnd
    (108) condition -> IF PARENOPEN exp PARENCLOSE . cuadruploIF body cuadruploElse ELSE body ifEndElse
    (109) cuadruploIF -> . empty
    (139) empty -> .

    BRACKETOPEN     reduce using rule 139 (empty -> .)

    cuadruploIF                    shift and go to state 238
    empty                          shift and go to state 239

state 199

    (113) writing -> PRINT PARENOPEN writingg PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 240


state 200

    (115) writingg -> exp COLON . writingg
    (114) writingg -> . exp
    (115) writingg -> . exp COLON writingg
    (116) writingg -> . auxString
    (117) writingg -> . auxString COLON writingg
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (118) auxString -> . CTESTRING
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 153
    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 151
    writingg                       shift and go to state 241
    auxString                      shift and go to state 152
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 201

    (117) writingg -> auxString COLON . writingg
    (114) writingg -> . exp
    (115) writingg -> . exp COLON writingg
    (116) writingg -> . auxString
    (117) writingg -> . auxString COLON writingg
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (118) auxString -> . CTESTRING
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 153
    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    auxString                      shift and go to state 152
    writingg                       shift and go to state 242
    exp                            shift and go to state 151
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 202

    (121) multivariables -> variable COLON multivariables .

    SEMICOLON       reduce using rule 121 (multivariables -> variable COLON multivariables .)


state 203

    (102) variable -> ID BRACEOPEN exp . BRACECLOSE
    (103) variable -> ID BRACEOPEN exp . BRACECLOSE BRACEOPEN exp BRACECLOSE
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    BRACECLOSE      shift and go to state 243
    AND             shift and go to state 161
    OR              shift and go to state 162


state 204

    (68) call_func -> ID generarERA PARENOPEN call_funcc . PARENCLOSE

    PARENCLOSE      shift and go to state 244


state 205

    (70) call_funcc -> exp . mandarParam
    (71) call_funcc -> exp . mandarParam COLON call_funcc
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp
    (73) mandarParam -> . empty
    (139) empty -> .

    AND             shift and go to state 161
    OR              shift and go to state 162
    COLON           reduce using rule 139 (empty -> .)
    PARENCLOSE      reduce using rule 139 (empty -> .)

    mandarParam                    shift and go to state 245
    empty                          shift and go to state 246

state 206

    (72) call_funcc -> empty .

    PARENCLOSE      reduce using rule 72 (call_funcc -> empty .)


state 207

    (105) variableAssignment -> ID BRACEOPEN exp BRACECLOSE .
    (106) variableAssignment -> ID BRACEOPEN exp BRACECLOSE . BRACEOPEN exp BRACECLOSE

    EQUAL           reduce using rule 105 (variableAssignment -> ID BRACEOPEN exp BRACECLOSE .)
    BRACEOPEN       shift and go to state 247


state 208

    (74) graph -> PLOT PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 248


state 209

    (76) exp -> exp AND expp .
    (79) expp -> expp . GREATHERTHAN m_exp
    (80) expp -> expp . LESSTHAN m_exp
    (81) expp -> expp . GREATHEREQUAL m_exp
    (82) expp -> expp . LESSEQUAL m_exp
    (83) expp -> expp . DIFFERENT m_exp
    (84) expp -> expp . SAME m_exp

    SEMICOLON       reduce using rule 76 (exp -> exp AND expp .)
    AND             reduce using rule 76 (exp -> exp AND expp .)
    OR              reduce using rule 76 (exp -> exp AND expp .)
    PARENCLOSE      reduce using rule 76 (exp -> exp AND expp .)
    COLON           reduce using rule 76 (exp -> exp AND expp .)
    BRACECLOSE      reduce using rule 76 (exp -> exp AND expp .)
    TO              reduce using rule 76 (exp -> exp AND expp .)
    GREATHERTHAN    shift and go to state 163
    LESSTHAN        shift and go to state 164
    GREATHEREQUAL   shift and go to state 165
    LESSEQUAL       shift and go to state 166
    DIFFERENT       shift and go to state 167
    SAME            shift and go to state 168


state 210

    (77) exp -> exp OR expp .
    (79) expp -> expp . GREATHERTHAN m_exp
    (80) expp -> expp . LESSTHAN m_exp
    (81) expp -> expp . GREATHEREQUAL m_exp
    (82) expp -> expp . LESSEQUAL m_exp
    (83) expp -> expp . DIFFERENT m_exp
    (84) expp -> expp . SAME m_exp

    SEMICOLON       reduce using rule 77 (exp -> exp OR expp .)
    AND             reduce using rule 77 (exp -> exp OR expp .)
    OR              reduce using rule 77 (exp -> exp OR expp .)
    PARENCLOSE      reduce using rule 77 (exp -> exp OR expp .)
    COLON           reduce using rule 77 (exp -> exp OR expp .)
    BRACECLOSE      reduce using rule 77 (exp -> exp OR expp .)
    TO              reduce using rule 77 (exp -> exp OR expp .)
    GREATHERTHAN    shift and go to state 163
    LESSTHAN        shift and go to state 164
    GREATHEREQUAL   shift and go to state 165
    LESSEQUAL       shift and go to state 166
    DIFFERENT       shift and go to state 167
    SAME            shift and go to state 168


state 211

    (79) expp -> expp GREATHERTHAN m_exp .
    (86) m_exp -> m_exp . PLUS termino
    (87) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    LESSTHAN        reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    GREATHEREQUAL   reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    LESSEQUAL       reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    DIFFERENT       reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    SAME            reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    SEMICOLON       reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    AND             reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    OR              reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    PARENCLOSE      reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    COLON           reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    BRACECLOSE      reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    TO              reduce using rule 79 (expp -> expp GREATHERTHAN m_exp .)
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170


state 212

    (80) expp -> expp LESSTHAN m_exp .
    (86) m_exp -> m_exp . PLUS termino
    (87) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    LESSTHAN        reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    GREATHEREQUAL   reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    LESSEQUAL       reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    DIFFERENT       reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    SAME            reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    SEMICOLON       reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    AND             reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    OR              reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    PARENCLOSE      reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    COLON           reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    BRACECLOSE      reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    TO              reduce using rule 80 (expp -> expp LESSTHAN m_exp .)
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170


state 213

    (81) expp -> expp GREATHEREQUAL m_exp .
    (86) m_exp -> m_exp . PLUS termino
    (87) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    LESSTHAN        reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    GREATHEREQUAL   reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    LESSEQUAL       reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    DIFFERENT       reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    SAME            reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    SEMICOLON       reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    AND             reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    OR              reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    PARENCLOSE      reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    COLON           reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    BRACECLOSE      reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    TO              reduce using rule 81 (expp -> expp GREATHEREQUAL m_exp .)
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170


state 214

    (82) expp -> expp LESSEQUAL m_exp .
    (86) m_exp -> m_exp . PLUS termino
    (87) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    LESSTHAN        reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    GREATHEREQUAL   reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    LESSEQUAL       reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    DIFFERENT       reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    SAME            reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    SEMICOLON       reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    AND             reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    OR              reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    PARENCLOSE      reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    COLON           reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    BRACECLOSE      reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    TO              reduce using rule 82 (expp -> expp LESSEQUAL m_exp .)
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170


state 215

    (83) expp -> expp DIFFERENT m_exp .
    (86) m_exp -> m_exp . PLUS termino
    (87) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    LESSTHAN        reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    GREATHEREQUAL   reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    LESSEQUAL       reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    DIFFERENT       reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    SAME            reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    SEMICOLON       reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    AND             reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    OR              reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    PARENCLOSE      reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    COLON           reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    BRACECLOSE      reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    TO              reduce using rule 83 (expp -> expp DIFFERENT m_exp .)
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170


state 216

    (84) expp -> expp SAME m_exp .
    (86) m_exp -> m_exp . PLUS termino
    (87) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 84 (expp -> expp SAME m_exp .)
    LESSTHAN        reduce using rule 84 (expp -> expp SAME m_exp .)
    GREATHEREQUAL   reduce using rule 84 (expp -> expp SAME m_exp .)
    LESSEQUAL       reduce using rule 84 (expp -> expp SAME m_exp .)
    DIFFERENT       reduce using rule 84 (expp -> expp SAME m_exp .)
    SAME            reduce using rule 84 (expp -> expp SAME m_exp .)
    SEMICOLON       reduce using rule 84 (expp -> expp SAME m_exp .)
    AND             reduce using rule 84 (expp -> expp SAME m_exp .)
    OR              reduce using rule 84 (expp -> expp SAME m_exp .)
    PARENCLOSE      reduce using rule 84 (expp -> expp SAME m_exp .)
    COLON           reduce using rule 84 (expp -> expp SAME m_exp .)
    BRACECLOSE      reduce using rule 84 (expp -> expp SAME m_exp .)
    TO              reduce using rule 84 (expp -> expp SAME m_exp .)
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170


state 217

    (86) m_exp -> m_exp PLUS termino .
    (89) termino -> termino . MULTIPLY factor
    (90) termino -> termino . DIVIDE factor

    PLUS            reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    MINUS           reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    GREATHERTHAN    reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    LESSTHAN        reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    GREATHEREQUAL   reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    LESSEQUAL       reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    DIFFERENT       reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    SAME            reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    SEMICOLON       reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    AND             reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    OR              reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    PARENCLOSE      reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    COLON           reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    BRACECLOSE      reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    TO              reduce using rule 86 (m_exp -> m_exp PLUS termino .)
    MULTIPLY        shift and go to state 171
    DIVIDE          shift and go to state 172


state 218

    (87) m_exp -> m_exp MINUS termino .
    (89) termino -> termino . MULTIPLY factor
    (90) termino -> termino . DIVIDE factor

    PLUS            reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    MINUS           reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    GREATHERTHAN    reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    LESSTHAN        reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    GREATHEREQUAL   reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    LESSEQUAL       reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    DIFFERENT       reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    SAME            reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    SEMICOLON       reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    AND             reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    OR              reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    PARENCLOSE      reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    COLON           reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    BRACECLOSE      reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    TO              reduce using rule 87 (m_exp -> m_exp MINUS termino .)
    MULTIPLY        shift and go to state 171
    DIVIDE          shift and go to state 172


state 219

    (89) termino -> termino MULTIPLY factor .

    MULTIPLY        reduce using rule 89 (termino -> termino MULTIPLY factor .)
    DIVIDE          reduce using rule 89 (termino -> termino MULTIPLY factor .)
    PLUS            reduce using rule 89 (termino -> termino MULTIPLY factor .)
    MINUS           reduce using rule 89 (termino -> termino MULTIPLY factor .)
    GREATHERTHAN    reduce using rule 89 (termino -> termino MULTIPLY factor .)
    LESSTHAN        reduce using rule 89 (termino -> termino MULTIPLY factor .)
    GREATHEREQUAL   reduce using rule 89 (termino -> termino MULTIPLY factor .)
    LESSEQUAL       reduce using rule 89 (termino -> termino MULTIPLY factor .)
    DIFFERENT       reduce using rule 89 (termino -> termino MULTIPLY factor .)
    SAME            reduce using rule 89 (termino -> termino MULTIPLY factor .)
    SEMICOLON       reduce using rule 89 (termino -> termino MULTIPLY factor .)
    AND             reduce using rule 89 (termino -> termino MULTIPLY factor .)
    OR              reduce using rule 89 (termino -> termino MULTIPLY factor .)
    PARENCLOSE      reduce using rule 89 (termino -> termino MULTIPLY factor .)
    COLON           reduce using rule 89 (termino -> termino MULTIPLY factor .)
    BRACECLOSE      reduce using rule 89 (termino -> termino MULTIPLY factor .)
    TO              reduce using rule 89 (termino -> termino MULTIPLY factor .)


state 220

    (90) termino -> termino DIVIDE factor .

    MULTIPLY        reduce using rule 90 (termino -> termino DIVIDE factor .)
    DIVIDE          reduce using rule 90 (termino -> termino DIVIDE factor .)
    PLUS            reduce using rule 90 (termino -> termino DIVIDE factor .)
    MINUS           reduce using rule 90 (termino -> termino DIVIDE factor .)
    GREATHERTHAN    reduce using rule 90 (termino -> termino DIVIDE factor .)
    LESSTHAN        reduce using rule 90 (termino -> termino DIVIDE factor .)
    GREATHEREQUAL   reduce using rule 90 (termino -> termino DIVIDE factor .)
    LESSEQUAL       reduce using rule 90 (termino -> termino DIVIDE factor .)
    DIFFERENT       reduce using rule 90 (termino -> termino DIVIDE factor .)
    SAME            reduce using rule 90 (termino -> termino DIVIDE factor .)
    SEMICOLON       reduce using rule 90 (termino -> termino DIVIDE factor .)
    AND             reduce using rule 90 (termino -> termino DIVIDE factor .)
    OR              reduce using rule 90 (termino -> termino DIVIDE factor .)
    PARENCLOSE      reduce using rule 90 (termino -> termino DIVIDE factor .)
    COLON           reduce using rule 90 (termino -> termino DIVIDE factor .)
    BRACECLOSE      reduce using rule 90 (termino -> termino DIVIDE factor .)
    TO              reduce using rule 90 (termino -> termino DIVIDE factor .)


state 221

    (97) factor -> PARENOPEN exp PARENCLOSE .

    MULTIPLY        reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    DIVIDE          reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    PLUS            reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    MINUS           reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    GREATHERTHAN    reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    LESSTHAN        reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    GREATHEREQUAL   reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    LESSEQUAL       reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    DIFFERENT       reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    SAME            reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    SEMICOLON       reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    AND             reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    OR              reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    PARENCLOSE      reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    COLON           reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    BRACECLOSE      reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)
    TO              reduce using rule 97 (factor -> PARENOPEN exp PARENCLOSE .)


state 222

    (122) while_loop -> WHILE whileMigaja PARENOPEN exp . PARENCLOSE whileEval body whileEnd
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 249
    AND             shift and go to state 161
    OR              shift and go to state 162


state 223

    (126) for_loop -> FOR PARENOPEN ID EQUAL . exp guardarValorFor TO exp PARENCLOSE body forEnd
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 250
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 224

    (130) max -> MAX PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 251


state 225

    (131) min -> MIN PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 252


state 226

    (132) sum -> SUM PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 253


state 227

    (138) normal -> NORMAL PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 254


state 228

    (134) param_dist -> variable COLON . param_dist
    (133) param_dist -> . variable
    (134) param_dist -> . variable COLON param_dist
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 115

    variable                       shift and go to state 186
    param_dist                     shift and go to state 255

state 229

    (137) uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 256


state 230

    (136) poisson -> POISSON PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 257


state 231

    (135) binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 258


state 232

    (59) dec_variabless -> type guardarTipo dec_mvar SEMICOLON . dec_variabless
    (60) dec_variabless -> type guardarTipo dec_mvar SEMICOLON .
    (59) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (60) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . CHAR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    IF              reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    PRINT           reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    READ            reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    ID              reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    PLOT            reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    RETURN          reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    WHILE           reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    FOR             reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    MAX             reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    MIN             reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    SUM             reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    NORMAL          reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    UNIFORME        reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    POISSON         reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    BINOMIAL        reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    BRACKETCLOSE    reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

  ! INT             [ reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]
  ! CHAR            [ reduce using rule 60 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]

    type                           shift and go to state 101
    dec_variabless                 shift and go to state 259

state 233

    (61) dec_mvar -> ID COLON . dec_mvar
    (61) dec_mvar -> . ID COLON dec_mvar
    (62) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (64) dec_mvar -> . ID
    (65) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (66) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 191

    dec_mvar                       shift and go to state 260

state 234

    (62) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (65) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE
    (66) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    CTEINT          shift and go to state 261


state 235

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body . exitFunc
    (25) exitFunc -> . empty
    (139) empty -> .

    FUNCTION        reduce using rule 139 (empty -> .)
    MAIN            reduce using rule 139 (empty -> .)

    exitFunc                       shift and go to state 262
    empty                          shift and go to state 263

state 236

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body . exitFunc
    (25) exitFunc -> . empty
    (139) empty -> .

    FUNCTION        reduce using rule 139 (empty -> .)
    MAIN            reduce using rule 139 (empty -> .)

    exitFunc                       shift and go to state 264
    empty                          shift and go to state 263

state 237

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON . mvar
    (16) mvar -> . ID COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> . ID
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 39

    mvar                           shift and go to state 265

state 238

    (107) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF . body ifEnd
    (108) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF . body cuadruploElse ELSE body ifEndElse
    (37) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 266

state 239

    (109) cuadruploIF -> empty .

    BRACKETOPEN     reduce using rule 109 (cuadruploIF -> empty .)


state 240

    (113) writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .

    IF              reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    READ            reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    ID              reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    INT             reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 113 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)


state 241

    (115) writingg -> exp COLON writingg .

    PARENCLOSE      reduce using rule 115 (writingg -> exp COLON writingg .)


state 242

    (117) writingg -> auxString COLON writingg .

    PARENCLOSE      reduce using rule 117 (writingg -> auxString COLON writingg .)


state 243

    (102) variable -> ID BRACEOPEN exp BRACECLOSE .
    (103) variable -> ID BRACEOPEN exp BRACECLOSE . BRACEOPEN exp BRACECLOSE

    COLON           reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    SEMICOLON       reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    MULTIPLY        reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    DIVIDE          reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    PLUS            reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    MINUS           reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    GREATHERTHAN    reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    LESSTHAN        reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    GREATHEREQUAL   reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    LESSEQUAL       reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    DIFFERENT       reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    SAME            reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    AND             reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    OR              reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    PARENCLOSE      reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    BRACECLOSE      reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    TO              reduce using rule 102 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    BRACEOPEN       shift and go to state 267


state 244

    (68) call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .

    IF              reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    PRINT           reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    READ            reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    ID              reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    PLOT            reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    RETURN          reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    WHILE           reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    FOR             reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    MAX             reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    MIN             reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    SUM             reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    NORMAL          reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    UNIFORME        reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    POISSON         reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    BINOMIAL        reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    INT             reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    FLOAT           reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    CHAR            reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    BRACKETCLOSE    reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    MULTIPLY        reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    DIVIDE          reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    PLUS            reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    MINUS           reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    GREATHERTHAN    reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    LESSTHAN        reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    GREATHEREQUAL   reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    LESSEQUAL       reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    DIFFERENT       reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    SAME            reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    SEMICOLON       reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    AND             reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    OR              reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    PARENCLOSE      reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    COLON           reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    BRACECLOSE      reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    TO              reduce using rule 68 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)


state 245

    (70) call_funcc -> exp mandarParam .
    (71) call_funcc -> exp mandarParam . COLON call_funcc

    PARENCLOSE      reduce using rule 70 (call_funcc -> exp mandarParam .)
    COLON           shift and go to state 268


state 246

    (73) mandarParam -> empty .

    COLON           reduce using rule 73 (mandarParam -> empty .)
    PARENCLOSE      reduce using rule 73 (mandarParam -> empty .)


state 247

    (106) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN . exp BRACECLOSE
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 269
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 248

    (74) graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 74 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)


state 249

    (122) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE . whileEval body whileEnd
    (124) whileEval -> . empty
    (139) empty -> .

    BRACKETOPEN     reduce using rule 139 (empty -> .)

    whileEval                      shift and go to state 270
    empty                          shift and go to state 271

state 250

    (126) for_loop -> FOR PARENOPEN ID EQUAL exp . guardarValorFor TO exp PARENCLOSE body forEnd
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp
    (127) guardarValorFor -> . empty
    (139) empty -> .

    AND             shift and go to state 161
    OR              shift and go to state 162
    TO              reduce using rule 139 (empty -> .)

    guardarValorFor                shift and go to state 272
    empty                          shift and go to state 273

state 251

    (130) max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 130 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)


state 252

    (131) min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 131 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)


state 253

    (132) sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 132 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)


state 254

    (138) normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 138 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 255

    (134) param_dist -> variable COLON param_dist .

    PARENCLOSE      reduce using rule 134 (param_dist -> variable COLON param_dist .)


state 256

    (137) uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 137 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 257

    (136) poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 136 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 258

    (135) binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 135 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 259

    (59) dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .

    IF              reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    PRINT           reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    READ            reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    ID              reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    PLOT            reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    RETURN          reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    WHILE           reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    FOR             reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    MAX             reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    MIN             reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    SUM             reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    NORMAL          reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    UNIFORME        reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    POISSON         reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    BINOMIAL        reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    INT             reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    FLOAT           reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    CHAR            reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    BRACKETCLOSE    reduce using rule 59 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)


state 260

    (61) dec_mvar -> ID COLON dec_mvar .

    SEMICOLON       reduce using rule 61 (dec_mvar -> ID COLON dec_mvar .)


state 261

    (62) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (65) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE
    (66) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    BRACECLOSE      shift and go to state 274


state 262

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc .

    FUNCTION        reduce using rule 22 (dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc .)
    MAIN            reduce using rule 22 (dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc .)


state 263

    (25) exitFunc -> empty .

    FUNCTION        reduce using rule 25 (exitFunc -> empty .)
    MAIN            reduce using rule 25 (exitFunc -> empty .)


state 264

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc .

    FUNCTION        reduce using rule 23 (dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc .)
    MAIN            reduce using rule 23 (dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param numeroParam PARENCLOSE startFunc body exitFunc .)


state 265

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar .

    SEMICOLON       reduce using rule 18 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar .)


state 266

    (107) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body . ifEnd
    (108) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body . cuadruploElse ELSE body ifEndElse
    (110) ifEnd -> . empty
    (111) cuadruploElse -> . empty
    (139) empty -> .

    IF              reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    PLOT            reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)
    MAX             reduce using rule 139 (empty -> .)
    MIN             reduce using rule 139 (empty -> .)
    SUM             reduce using rule 139 (empty -> .)
    NORMAL          reduce using rule 139 (empty -> .)
    UNIFORME        reduce using rule 139 (empty -> .)
    POISSON         reduce using rule 139 (empty -> .)
    BINOMIAL        reduce using rule 139 (empty -> .)
    INT             reduce using rule 139 (empty -> .)
    FLOAT           reduce using rule 139 (empty -> .)
    CHAR            reduce using rule 139 (empty -> .)
    BRACKETCLOSE    reduce using rule 139 (empty -> .)
    ELSE            reduce using rule 139 (empty -> .)

    ifEnd                          shift and go to state 275
    cuadruploElse                  shift and go to state 276
    empty                          shift and go to state 277

state 267

    (103) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN . exp BRACECLOSE
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 278
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 268

    (71) call_funcc -> exp mandarParam COLON . call_funcc
    (70) call_funcc -> . exp mandarParam
    (71) call_funcc -> . exp mandarParam COLON call_funcc
    (72) call_funcc -> . empty
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (139) empty -> .
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    PARENCLOSE      reduce using rule 139 (empty -> .)
    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 205
    call_funcc                     shift and go to state 279
    empty                          shift and go to state 206
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 269

    (106) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp . BRACECLOSE
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    BRACECLOSE      shift and go to state 280
    AND             shift and go to state 161
    OR              shift and go to state 162


state 270

    (122) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval . body whileEnd
    (37) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 281

state 271

    (124) whileEval -> empty .

    BRACKETOPEN     reduce using rule 124 (whileEval -> empty .)


state 272

    (126) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor . TO exp PARENCLOSE body forEnd

    TO              shift and go to state 282


state 273

    (127) guardarValorFor -> empty .

    TO              reduce using rule 127 (guardarValorFor -> empty .)


state 274

    (62) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (65) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE .
    (66) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 284
    BRACEOPEN       shift and go to state 283
    SEMICOLON       reduce using rule 65 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE .)


state 275

    (107) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .

    IF              reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    PRINT           reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    READ            reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    ID              reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    PLOT            reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    RETURN          reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    WHILE           reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    FOR             reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    MAX             reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    MIN             reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    SUM             reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    NORMAL          reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    UNIFORME        reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    POISSON         reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    BINOMIAL        reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    INT             reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    FLOAT           reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    CHAR            reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    BRACKETCLOSE    reduce using rule 107 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)


state 276

    (108) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse . ELSE body ifEndElse

    ELSE            shift and go to state 285


state 277

    (110) ifEnd -> empty .
    (111) cuadruploElse -> empty .

    IF              reduce using rule 110 (ifEnd -> empty .)
    PRINT           reduce using rule 110 (ifEnd -> empty .)
    READ            reduce using rule 110 (ifEnd -> empty .)
    ID              reduce using rule 110 (ifEnd -> empty .)
    PLOT            reduce using rule 110 (ifEnd -> empty .)
    RETURN          reduce using rule 110 (ifEnd -> empty .)
    WHILE           reduce using rule 110 (ifEnd -> empty .)
    FOR             reduce using rule 110 (ifEnd -> empty .)
    MAX             reduce using rule 110 (ifEnd -> empty .)
    MIN             reduce using rule 110 (ifEnd -> empty .)
    SUM             reduce using rule 110 (ifEnd -> empty .)
    NORMAL          reduce using rule 110 (ifEnd -> empty .)
    UNIFORME        reduce using rule 110 (ifEnd -> empty .)
    POISSON         reduce using rule 110 (ifEnd -> empty .)
    BINOMIAL        reduce using rule 110 (ifEnd -> empty .)
    INT             reduce using rule 110 (ifEnd -> empty .)
    FLOAT           reduce using rule 110 (ifEnd -> empty .)
    CHAR            reduce using rule 110 (ifEnd -> empty .)
    BRACKETCLOSE    reduce using rule 110 (ifEnd -> empty .)
    ELSE            reduce using rule 111 (cuadruploElse -> empty .)


state 278

    (103) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp . BRACECLOSE
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    BRACECLOSE      shift and go to state 286
    AND             shift and go to state 161
    OR              shift and go to state 162


state 279

    (71) call_funcc -> exp mandarParam COLON call_funcc .

    PARENCLOSE      reduce using rule 71 (call_funcc -> exp mandarParam COLON call_funcc .)


state 280

    (106) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .

    EQUAL           reduce using rule 106 (variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)


state 281

    (122) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body . whileEnd
    (125) whileEnd -> . empty
    (139) empty -> .

    IF              reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    PLOT            reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)
    MAX             reduce using rule 139 (empty -> .)
    MIN             reduce using rule 139 (empty -> .)
    SUM             reduce using rule 139 (empty -> .)
    NORMAL          reduce using rule 139 (empty -> .)
    UNIFORME        reduce using rule 139 (empty -> .)
    POISSON         reduce using rule 139 (empty -> .)
    BINOMIAL        reduce using rule 139 (empty -> .)
    INT             reduce using rule 139 (empty -> .)
    FLOAT           reduce using rule 139 (empty -> .)
    CHAR            reduce using rule 139 (empty -> .)
    BRACKETCLOSE    reduce using rule 139 (empty -> .)

    whileEnd                       shift and go to state 287
    empty                          shift and go to state 288

state 282

    (126) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO . exp PARENCLOSE body forEnd
    (75) exp -> . expp
    (76) exp -> . exp AND expp
    (77) exp -> . exp OR expp
    (78) expp -> . m_exp
    (79) expp -> . expp GREATHERTHAN m_exp
    (80) expp -> . expp LESSTHAN m_exp
    (81) expp -> . expp GREATHEREQUAL m_exp
    (82) expp -> . expp LESSEQUAL m_exp
    (83) expp -> . expp DIFFERENT m_exp
    (84) expp -> . expp SAME m_exp
    (85) m_exp -> . termino
    (86) m_exp -> . m_exp PLUS termino
    (87) m_exp -> . m_exp MINUS termino
    (88) termino -> . factor
    (89) termino -> . termino MULTIPLY factor
    (90) termino -> . termino DIVIDE factor
    (91) factor -> . ID
    (92) factor -> . CTEINT guardarConstanteInt
    (93) factor -> . CTFLOAT guardarConstanteFloat
    (94) factor -> . CTECHAR guardarConstanteChar
    (95) factor -> . variable
    (96) factor -> . call_func
    (97) factor -> . PARENOPEN exp PARENCLOSE
    (101) variable -> . ID
    (102) variable -> . ID BRACEOPEN exp BRACECLOSE
    (103) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (68) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 125
    CTEINT          shift and go to state 126
    CTFLOAT         shift and go to state 127
    CTECHAR         shift and go to state 128
    PARENOPEN       shift and go to state 131

    exp                            shift and go to state 289
    expp                           shift and go to state 121
    m_exp                          shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    variable                       shift and go to state 129
    call_func                      shift and go to state 130

state 283

    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE COLON dec_mvar
    (66) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE

    CTEINT          shift and go to state 290


state 284

    (62) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON . dec_mvar
    (61) dec_mvar -> . ID COLON dec_mvar
    (62) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (64) dec_mvar -> . ID
    (65) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (66) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 191

    dec_mvar                       shift and go to state 291

state 285

    (108) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE . body ifEndElse
    (37) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 292

state 286

    (103) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .

    COLON           reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    SEMICOLON       reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    MULTIPLY        reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    DIVIDE          reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    PLUS            reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    MINUS           reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    GREATHERTHAN    reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    LESSTHAN        reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    GREATHEREQUAL   reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    LESSEQUAL       reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    DIFFERENT       reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    SAME            reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    AND             reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    OR              reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    PARENCLOSE      reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    BRACECLOSE      reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    TO              reduce using rule 103 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)


state 287

    (122) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .

    IF              reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    PRINT           reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    READ            reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    ID              reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    PLOT            reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    RETURN          reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    WHILE           reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    FOR             reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    MAX             reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    MIN             reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    SUM             reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    NORMAL          reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    UNIFORME        reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    POISSON         reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    BINOMIAL        reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    INT             reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    FLOAT           reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    CHAR            reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    BRACKETCLOSE    reduce using rule 122 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)


state 288

    (125) whileEnd -> empty .

    IF              reduce using rule 125 (whileEnd -> empty .)
    PRINT           reduce using rule 125 (whileEnd -> empty .)
    READ            reduce using rule 125 (whileEnd -> empty .)
    ID              reduce using rule 125 (whileEnd -> empty .)
    PLOT            reduce using rule 125 (whileEnd -> empty .)
    RETURN          reduce using rule 125 (whileEnd -> empty .)
    WHILE           reduce using rule 125 (whileEnd -> empty .)
    FOR             reduce using rule 125 (whileEnd -> empty .)
    MAX             reduce using rule 125 (whileEnd -> empty .)
    MIN             reduce using rule 125 (whileEnd -> empty .)
    SUM             reduce using rule 125 (whileEnd -> empty .)
    NORMAL          reduce using rule 125 (whileEnd -> empty .)
    UNIFORME        reduce using rule 125 (whileEnd -> empty .)
    POISSON         reduce using rule 125 (whileEnd -> empty .)
    BINOMIAL        reduce using rule 125 (whileEnd -> empty .)
    INT             reduce using rule 125 (whileEnd -> empty .)
    FLOAT           reduce using rule 125 (whileEnd -> empty .)
    CHAR            reduce using rule 125 (whileEnd -> empty .)
    BRACKETCLOSE    reduce using rule 125 (whileEnd -> empty .)


state 289

    (126) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp . PARENCLOSE body forEnd
    (76) exp -> exp . AND expp
    (77) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 293
    AND             shift and go to state 161
    OR              shift and go to state 162


state 290

    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE COLON dec_mvar
    (66) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE

    BRACECLOSE      shift and go to state 294


state 291

    (62) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .

    SEMICOLON       reduce using rule 62 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .)


state 292

    (108) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body . ifEndElse
    (112) ifEndElse -> . empty
    (139) empty -> .

    IF              reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    PLOT            reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)
    MAX             reduce using rule 139 (empty -> .)
    MIN             reduce using rule 139 (empty -> .)
    SUM             reduce using rule 139 (empty -> .)
    NORMAL          reduce using rule 139 (empty -> .)
    UNIFORME        reduce using rule 139 (empty -> .)
    POISSON         reduce using rule 139 (empty -> .)
    BINOMIAL        reduce using rule 139 (empty -> .)
    INT             reduce using rule 139 (empty -> .)
    FLOAT           reduce using rule 139 (empty -> .)
    CHAR            reduce using rule 139 (empty -> .)
    BRACKETCLOSE    reduce using rule 139 (empty -> .)

    ifEndElse                      shift and go to state 295
    empty                          shift and go to state 296

state 293

    (126) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE . body forEnd
    (37) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 297

state 294

    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE . COLON dec_mvar
    (66) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .

    COLON           shift and go to state 298
    SEMICOLON       reduce using rule 66 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .)


state 295

    (108) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .

    IF              reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    PRINT           reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    READ            reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    ID              reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    PLOT            reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    RETURN          reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    WHILE           reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    FOR             reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    MAX             reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    MIN             reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    SUM             reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    NORMAL          reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    UNIFORME        reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    POISSON         reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    BINOMIAL        reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    INT             reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    FLOAT           reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    CHAR            reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    BRACKETCLOSE    reduce using rule 108 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)


state 296

    (112) ifEndElse -> empty .

    IF              reduce using rule 112 (ifEndElse -> empty .)
    PRINT           reduce using rule 112 (ifEndElse -> empty .)
    READ            reduce using rule 112 (ifEndElse -> empty .)
    ID              reduce using rule 112 (ifEndElse -> empty .)
    PLOT            reduce using rule 112 (ifEndElse -> empty .)
    RETURN          reduce using rule 112 (ifEndElse -> empty .)
    WHILE           reduce using rule 112 (ifEndElse -> empty .)
    FOR             reduce using rule 112 (ifEndElse -> empty .)
    MAX             reduce using rule 112 (ifEndElse -> empty .)
    MIN             reduce using rule 112 (ifEndElse -> empty .)
    SUM             reduce using rule 112 (ifEndElse -> empty .)
    NORMAL          reduce using rule 112 (ifEndElse -> empty .)
    UNIFORME        reduce using rule 112 (ifEndElse -> empty .)
    POISSON         reduce using rule 112 (ifEndElse -> empty .)
    BINOMIAL        reduce using rule 112 (ifEndElse -> empty .)
    INT             reduce using rule 112 (ifEndElse -> empty .)
    FLOAT           reduce using rule 112 (ifEndElse -> empty .)
    CHAR            reduce using rule 112 (ifEndElse -> empty .)
    BRACKETCLOSE    reduce using rule 112 (ifEndElse -> empty .)


state 297

    (126) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body . forEnd
    (128) forEnd -> . empty
    (139) empty -> .

    IF              reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    PLOT            reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)
    MAX             reduce using rule 139 (empty -> .)
    MIN             reduce using rule 139 (empty -> .)
    SUM             reduce using rule 139 (empty -> .)
    NORMAL          reduce using rule 139 (empty -> .)
    UNIFORME        reduce using rule 139 (empty -> .)
    POISSON         reduce using rule 139 (empty -> .)
    BINOMIAL        reduce using rule 139 (empty -> .)
    INT             reduce using rule 139 (empty -> .)
    FLOAT           reduce using rule 139 (empty -> .)
    CHAR            reduce using rule 139 (empty -> .)
    BRACKETCLOSE    reduce using rule 139 (empty -> .)

    forEnd                         shift and go to state 299
    empty                          shift and go to state 300

state 298

    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON . dec_mvar
    (61) dec_mvar -> . ID COLON dec_mvar
    (62) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (64) dec_mvar -> . ID
    (65) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (66) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 191

    dec_mvar                       shift and go to state 301

state 299

    (126) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .

    IF              reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    PRINT           reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    READ            reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    ID              reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    PLOT            reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    RETURN          reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    WHILE           reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    FOR             reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    MAX             reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    MIN             reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    SUM             reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    NORMAL          reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    UNIFORME        reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    POISSON         reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    BINOMIAL        reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    INT             reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    FLOAT           reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    CHAR            reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    BRACKETCLOSE    reduce using rule 126 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)


state 300

    (128) forEnd -> empty .

    IF              reduce using rule 128 (forEnd -> empty .)
    PRINT           reduce using rule 128 (forEnd -> empty .)
    READ            reduce using rule 128 (forEnd -> empty .)
    ID              reduce using rule 128 (forEnd -> empty .)
    PLOT            reduce using rule 128 (forEnd -> empty .)
    RETURN          reduce using rule 128 (forEnd -> empty .)
    WHILE           reduce using rule 128 (forEnd -> empty .)
    FOR             reduce using rule 128 (forEnd -> empty .)
    MAX             reduce using rule 128 (forEnd -> empty .)
    MIN             reduce using rule 128 (forEnd -> empty .)
    SUM             reduce using rule 128 (forEnd -> empty .)
    NORMAL          reduce using rule 128 (forEnd -> empty .)
    UNIFORME        reduce using rule 128 (forEnd -> empty .)
    POISSON         reduce using rule 128 (forEnd -> empty .)
    BINOMIAL        reduce using rule 128 (forEnd -> empty .)
    INT             reduce using rule 128 (forEnd -> empty .)
    FLOAT           reduce using rule 128 (forEnd -> empty .)
    CHAR            reduce using rule 128 (forEnd -> empty .)
    BRACKETCLOSE    reduce using rule 128 (forEnd -> empty .)


state 301

    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .

    SEMICOLON       reduce using rule 63 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 232 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 232 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 232 resolved as shift
WARNING: reduce/reduce conflict in state 65 resolved using rule (bodyy -> statement)
WARNING: rejected rule (empty -> <empty>) in state 65
WARNING: reduce/reduce conflict in state 125 resolved using rule (factor -> ID)
WARNING: rejected rule (variable -> ID) in state 125
