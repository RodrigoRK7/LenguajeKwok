Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start_program
Rule 1     start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body
Rule 2     start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body
Rule 3     start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body
Rule 4     start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body
Rule 5     cuadruploMain -> empty
Rule 6     multiple_funcs -> dec_func
Rule 7     multiple_funcs -> dec_func multiple_funcs
Rule 8     main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
Rule 9     crearTablaMain -> empty
Rule 10    gotoMain -> empty
Rule 11    vars -> VAR varss
Rule 12    varss -> type guardarTipo mvar SEMICOLON varss
Rule 13    varss -> type guardarTipo mvar SEMICOLON
Rule 14    guardarTipo -> empty
Rule 15    mvar -> ID COLON mvar
Rule 16    mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
Rule 17    mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
Rule 18    mvar -> ID
Rule 19    mvar -> ID BRACEOPEN CTEINT BRACECLOSE
Rule 20    mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE
Rule 21    dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
Rule 22    dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
Rule 23    crearSymbolTable -> empty
Rule 24    exitFunc -> empty
Rule 25    param -> typeParam ID
Rule 26    param -> typeParam ID COLON param
Rule 27    param -> empty
Rule 28    typeParam -> INT
Rule 29    typeParam -> FLOAT
Rule 30    typeParam -> CHAR
Rule 31    type -> INT
Rule 32    type -> FLOAT
Rule 33    type -> CHAR
Rule 34    body -> BRACKETOPEN bodyy BRACKETCLOSE
Rule 35    bodyy -> statement
Rule 36    bodyy -> statement bodyy
Rule 37    bodyy -> empty
Rule 38    statement -> dec_variables
Rule 39    statement -> assignment
Rule 40    statement -> condition
Rule 41    statement -> writing
Rule 42    statement -> reading
Rule 43    statement -> call_func
Rule 44    statement -> graph
Rule 45    statement -> return
Rule 46    statement -> while_loop
Rule 47    statement -> for_loop
Rule 48    statement -> max
Rule 49    statement -> min
Rule 50    statement -> sum
Rule 51    statement -> normal
Rule 52    statement -> uniforme
Rule 53    statement -> poisson
Rule 54    statement -> binomial
Rule 55    dec_variables -> dec_variabless
Rule 56    dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless
Rule 57    dec_variabless -> type guardarTipo dec_mvar SEMICOLON
Rule 58    dec_mvar -> ID COLON dec_mvar
Rule 59    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
Rule 60    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
Rule 61    dec_mvar -> ID
Rule 62    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE
Rule 63    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE
Rule 64    assignment -> variableAssignment EQUAL exp SEMICOLON
Rule 65    call_func -> ID PARENOPEN call_funcc PARENCLOSE
Rule 66    call_funcc -> exp
Rule 67    call_funcc -> exp COLON call_funcc
Rule 68    call_funcc -> empty
Rule 69    graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON
Rule 70    exp -> exp GREATHERTHAN exp
Rule 71    exp -> exp LESSTHAN exp
Rule 72    exp -> exp GREATHEREQUAL exp
Rule 73    exp -> exp LESSEQUAL exp
Rule 74    exp -> exp DIFFERENT exp
Rule 75    exp -> exp SAME exp
Rule 76    exp -> exp AND exp
Rule 77    exp -> exp OR exp
Rule 78    exp -> m_exp
Rule 79    m_exp -> t m_expp
Rule 80    m_expp -> PLUS appendPLUS m_exp
Rule 81    m_expp -> MINUS appendMINUS m_exp
Rule 82    m_expp -> empty
Rule 83    appendPLUS -> empty
Rule 84    appendMINUS -> empty
Rule 85    appendMULTIPLY -> empty
Rule 86    appendDIVIDE -> empty
Rule 87    t -> f termino
Rule 88    termino -> MULTIPLY appendMULTIPLY t
Rule 89    termino -> DIVIDE appendDIVIDE t
Rule 90    termino -> empty
Rule 91    f -> PARENOPEN exp PARENCLOSE
Rule 92    f -> ID
Rule 93    f -> CTEINT
Rule 94    f -> CTFLOAT
Rule 95    f -> variable
Rule 96    f -> call_func
Rule 97    variable -> ID
Rule 98    variable -> ID BRACEOPEN exp BRACECLOSE
Rule 99    variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
Rule 100   variableAssignment -> ID
Rule 101   variableAssignment -> ID BRACEOPEN exp BRACECLOSE
Rule 102   variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
Rule 103   condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
Rule 104   condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
Rule 105   cuadruploIF -> empty
Rule 106   ifEnd -> empty
Rule 107   cuadruploElse -> empty
Rule 108   ifEndElse -> empty
Rule 109   writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
Rule 110   writingg -> exp
Rule 111   writingg -> exp COLON writingg
Rule 112   writingg -> auxString
Rule 113   writingg -> auxString COLON writingg
Rule 114   auxString -> CTESTRING
Rule 115   reading -> READ multivariables SEMICOLON
Rule 116   multivariables -> variable
Rule 117   multivariables -> variable COLON multivariables
Rule 118   while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
Rule 119   whileMigaja -> empty
Rule 120   whileEval -> empty
Rule 121   whileEnd -> empty
Rule 122   for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
Rule 123   guardarValorFor -> empty
Rule 124   forEnd -> empty
Rule 125   return -> RETURN exp SEMICOLON
Rule 126   max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON
Rule 127   min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON
Rule 128   sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON
Rule 129   param_dist -> variable
Rule 130   param_dist -> variable COLON param_dist
Rule 131   binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 132   poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 133   uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 134   normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 135   empty -> <empty>

Terminals, with rules where they appear

AND                  : 76
BINOMIAL             : 131
BRACECLOSE           : 16 17 17 19 20 20 59 60 60 62 63 63 98 99 99 101 102 102
BRACEOPEN            : 16 17 17 19 20 20 59 60 60 62 63 63 98 99 99 101 102 102
BRACKETCLOSE         : 34
BRACKETOPEN          : 34
CHAR                 : 30 33
COLON                : 15 16 17 26 58 59 60 67 111 113 117 130
CTEINT               : 16 17 17 19 20 20 59 60 60 62 63 63 93
CTESTRING            : 114
CTFLOAT              : 94
DIFFERENT            : 74
DIVIDE               : 89
ELSE                 : 104
EQUAL                : 64 122
FLOAT                : 29 32
FOR                  : 122
FUNCTION             : 21 22
GREATHEREQUAL        : 72
GREATHERTHAN         : 70
ID                   : 1 2 3 4 15 16 17 18 19 20 21 22 25 26 58 59 60 61 62 63 65 92 97 98 99 100 101 102
IF                   : 103 104
INT                  : 28 31
LESSEQUAL            : 73
LESSTHAN             : 71
MAIN                 : 8
MAX                  : 126
MIN                  : 127
MINUS                : 81
MULTIPLY             : 88
NORMAL               : 134
OR                   : 77
PARENCLOSE           : 8 21 22 65 69 91 103 104 109 118 122 126 127 128 131 132 133 134
PARENOPEN            : 8 21 22 65 69 91 103 104 109 118 122 126 127 128 131 132 133 134
PLOT                 : 69
PLUS                 : 80
POISSON              : 132
PRINT                : 109
PROGRAM              : 1 2 3 4
READ                 : 115
RETURN               : 125
SAME                 : 75
SEMICOLON            : 1 2 3 4 12 13 56 57 64 69 109 115 125 126 127 128 131 132 133 134
SUM                  : 128
TO                   : 122
UNIFORME             : 133
VAR                  : 11
VOID                 : 22
WHILE                : 118
error                : 

Nonterminals, with rules where they appear

appendDIVIDE         : 89
appendMINUS          : 81
appendMULTIPLY       : 88
appendPLUS           : 80
assignment           : 39
auxString            : 112 113
binomial             : 54
body                 : 8 21 22 103 104 104 118 122
bodyy                : 34 36
call_func            : 43 96
call_funcc           : 65 67
condition            : 40
crearSymbolTable     : 21 22
crearTablaMain       : 8
cuadruploElse        : 104
cuadruploIF          : 103 104
cuadruploMain        : 1 2 3 4
dec_func             : 6 7
dec_mvar             : 56 57 58 59 60
dec_variables        : 38
dec_variabless       : 55 56
empty                : 5 9 10 14 23 24 27 37 68 82 83 84 85 86 90 105 106 107 108 119 120 121 123 124
exitFunc             : 21 22
exp                  : 64 66 67 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 91 98 99 99 101 102 102 103 104 110 111 118 122 122 125 126 127 128
f                    : 87
forEnd               : 122
for_loop             : 47
gotoMain             : 8
graph                : 44
guardarTipo          : 12 13 56 57
guardarValorFor      : 122
ifEnd                : 103
ifEndElse            : 104
m_exp                : 78 80 81
m_expp               : 79
main_body            : 1 2 3 4
max                  : 48
min                  : 49
multiple_funcs       : 1 3 7
multivariables       : 115 117
mvar                 : 12 13 15 16 17
normal               : 51
param                : 21 22 26
param_dist           : 130 131 132 133 134
poisson              : 53
reading              : 42
return               : 45
start_program        : 0
statement            : 35 36
sum                  : 50
t                    : 79 88 89
termino              : 87
type                 : 12 13 21 56 57
typeParam            : 25 26
uniforme             : 52
variable             : 95 116 117 122 129 130
variableAssignment   : 64
vars                 : 1 2
varss                : 11 12
whileEnd             : 118
whileEval            : 118
whileMigaja          : 118
while_loop           : 46
writing              : 41
writingg             : 109 111 113

Parsing method: LALR

state 0

    (0) S' -> . start_program
    (1) start_program -> . cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body
    (2) start_program -> . cuadruploMain PROGRAM ID SEMICOLON vars main_body
    (3) start_program -> . cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body
    (4) start_program -> . cuadruploMain PROGRAM ID SEMICOLON main_body
    (5) cuadruploMain -> . empty
    (135) empty -> .

    PROGRAM         reduce using rule 135 (empty -> .)

    start_program                  shift and go to state 1
    cuadruploMain                  shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start_program .



state 2

    (1) start_program -> cuadruploMain . PROGRAM ID SEMICOLON vars multiple_funcs main_body
    (2) start_program -> cuadruploMain . PROGRAM ID SEMICOLON vars main_body
    (3) start_program -> cuadruploMain . PROGRAM ID SEMICOLON multiple_funcs main_body
    (4) start_program -> cuadruploMain . PROGRAM ID SEMICOLON main_body

    PROGRAM         shift and go to state 4


state 3

    (5) cuadruploMain -> empty .

    PROGRAM         reduce using rule 5 (cuadruploMain -> empty .)


state 4

    (1) start_program -> cuadruploMain PROGRAM . ID SEMICOLON vars multiple_funcs main_body
    (2) start_program -> cuadruploMain PROGRAM . ID SEMICOLON vars main_body
    (3) start_program -> cuadruploMain PROGRAM . ID SEMICOLON multiple_funcs main_body
    (4) start_program -> cuadruploMain PROGRAM . ID SEMICOLON main_body

    ID              shift and go to state 5


state 5

    (1) start_program -> cuadruploMain PROGRAM ID . SEMICOLON vars multiple_funcs main_body
    (2) start_program -> cuadruploMain PROGRAM ID . SEMICOLON vars main_body
    (3) start_program -> cuadruploMain PROGRAM ID . SEMICOLON multiple_funcs main_body
    (4) start_program -> cuadruploMain PROGRAM ID . SEMICOLON main_body

    SEMICOLON       shift and go to state 6


state 6

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON . vars multiple_funcs main_body
    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON . vars main_body
    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON . multiple_funcs main_body
    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON . main_body
    (11) vars -> . VAR varss
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (21) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (22) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    VAR             shift and go to state 10
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 13

    vars                           shift and go to state 7
    multiple_funcs                 shift and go to state 8
    main_body                      shift and go to state 9
    dec_func                       shift and go to state 11

state 7

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars . multiple_funcs main_body
    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars . main_body
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (21) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (22) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 13

    multiple_funcs                 shift and go to state 14
    main_body                      shift and go to state 15
    dec_func                       shift and go to state 11

state 8

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs . main_body
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body

    MAIN            shift and go to state 12

    main_body                      shift and go to state 16

state 9

    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body .

    $end            reduce using rule 4 (start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body .)


state 10

    (11) vars -> VAR . varss
    (12) varss -> . type guardarTipo mvar SEMICOLON varss
    (13) varss -> . type guardarTipo mvar SEMICOLON
    (31) type -> . INT
    (32) type -> . FLOAT
    (33) type -> . CHAR

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    varss                          shift and go to state 17
    type                           shift and go to state 18

state 11

    (6) multiple_funcs -> dec_func .
    (7) multiple_funcs -> dec_func . multiple_funcs
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (21) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (22) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    MAIN            reduce using rule 6 (multiple_funcs -> dec_func .)
    FUNCTION        shift and go to state 13

    dec_func                       shift and go to state 11
    multiple_funcs                 shift and go to state 22

state 12

    (8) main_body -> MAIN . crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (9) crearTablaMain -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)

    crearTablaMain                 shift and go to state 23
    empty                          shift and go to state 24

state 13

    (21) dec_func -> FUNCTION . type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (22) dec_func -> FUNCTION . VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (31) type -> . INT
    (32) type -> . FLOAT
    (33) type -> . CHAR

    VOID            shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    type                           shift and go to state 25

state 14

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs . main_body
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body

    MAIN            shift and go to state 12

    main_body                      shift and go to state 27

state 15

    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body .

    $end            reduce using rule 2 (start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body .)


state 16

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body .

    $end            reduce using rule 3 (start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body .)


state 17

    (11) vars -> VAR varss .

    MAIN            reduce using rule 11 (vars -> VAR varss .)
    FUNCTION        reduce using rule 11 (vars -> VAR varss .)


state 18

    (12) varss -> type . guardarTipo mvar SEMICOLON varss
    (13) varss -> type . guardarTipo mvar SEMICOLON
    (14) guardarTipo -> . empty
    (135) empty -> .

    ID              reduce using rule 135 (empty -> .)

    guardarTipo                    shift and go to state 28
    empty                          shift and go to state 29

state 19

    (31) type -> INT .

    ID              reduce using rule 31 (type -> INT .)


state 20

    (32) type -> FLOAT .

    ID              reduce using rule 32 (type -> FLOAT .)


state 21

    (33) type -> CHAR .

    ID              reduce using rule 33 (type -> CHAR .)


state 22

    (7) multiple_funcs -> dec_func multiple_funcs .

    MAIN            reduce using rule 7 (multiple_funcs -> dec_func multiple_funcs .)


state 23

    (8) main_body -> MAIN crearTablaMain . PARENOPEN PARENCLOSE gotoMain body

    PARENOPEN       shift and go to state 30


state 24

    (9) crearTablaMain -> empty .

    PARENOPEN       reduce using rule 9 (crearTablaMain -> empty .)


state 25

    (21) dec_func -> FUNCTION type . ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    ID              shift and go to state 31


state 26

    (22) dec_func -> FUNCTION VOID . ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    ID              shift and go to state 32


state 27

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body .

    $end            reduce using rule 1 (start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body .)


state 28

    (12) varss -> type guardarTipo . mvar SEMICOLON varss
    (13) varss -> type guardarTipo . mvar SEMICOLON
    (15) mvar -> . ID COLON mvar
    (16) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID
    (19) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 34

    mvar                           shift and go to state 33

state 29

    (14) guardarTipo -> empty .

    ID              reduce using rule 14 (guardarTipo -> empty .)


state 30

    (8) main_body -> MAIN crearTablaMain PARENOPEN . PARENCLOSE gotoMain body

    PARENCLOSE      shift and go to state 35


state 31

    (21) dec_func -> FUNCTION type ID . crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (23) crearSymbolTable -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)

    crearSymbolTable               shift and go to state 36
    empty                          shift and go to state 37

state 32

    (22) dec_func -> FUNCTION VOID ID . crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (23) crearSymbolTable -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)

    crearSymbolTable               shift and go to state 38
    empty                          shift and go to state 37

state 33

    (12) varss -> type guardarTipo mvar . SEMICOLON varss
    (13) varss -> type guardarTipo mvar . SEMICOLON

    SEMICOLON       shift and go to state 39


state 34

    (15) mvar -> ID . COLON mvar
    (16) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (17) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> ID .
    (19) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE
    (20) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 40
    BRACEOPEN       shift and go to state 41
    SEMICOLON       reduce using rule 18 (mvar -> ID .)


state 35

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE . gotoMain body
    (10) gotoMain -> . empty
    (135) empty -> .

    BRACKETOPEN     reduce using rule 135 (empty -> .)

    gotoMain                       shift and go to state 42
    empty                          shift and go to state 43

state 36

    (21) dec_func -> FUNCTION type ID crearSymbolTable . PARENOPEN param PARENCLOSE body exitFunc

    PARENOPEN       shift and go to state 44


state 37

    (23) crearSymbolTable -> empty .

    PARENOPEN       reduce using rule 23 (crearSymbolTable -> empty .)


state 38

    (22) dec_func -> FUNCTION VOID ID crearSymbolTable . PARENOPEN param PARENCLOSE body exitFunc

    PARENOPEN       shift and go to state 45


state 39

    (12) varss -> type guardarTipo mvar SEMICOLON . varss
    (13) varss -> type guardarTipo mvar SEMICOLON .
    (12) varss -> . type guardarTipo mvar SEMICOLON varss
    (13) varss -> . type guardarTipo mvar SEMICOLON
    (31) type -> . INT
    (32) type -> . FLOAT
    (33) type -> . CHAR

    MAIN            reduce using rule 13 (varss -> type guardarTipo mvar SEMICOLON .)
    FUNCTION        reduce using rule 13 (varss -> type guardarTipo mvar SEMICOLON .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    type                           shift and go to state 18
    varss                          shift and go to state 46

state 40

    (15) mvar -> ID COLON . mvar
    (15) mvar -> . ID COLON mvar
    (16) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID
    (19) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 34

    mvar                           shift and go to state 47

state 41

    (16) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE COLON mvar
    (17) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE
    (20) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    CTEINT          shift and go to state 48


state 42

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain . body
    (34) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 50

    body                           shift and go to state 49

state 43

    (10) gotoMain -> empty .

    BRACKETOPEN     reduce using rule 10 (gotoMain -> empty .)


state 44

    (21) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN . param PARENCLOSE body exitFunc
    (25) param -> . typeParam ID
    (26) param -> . typeParam ID COLON param
    (27) param -> . empty
    (28) typeParam -> . INT
    (29) typeParam -> . FLOAT
    (30) typeParam -> . CHAR
    (135) empty -> .

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    CHAR            shift and go to state 56
    PARENCLOSE      reduce using rule 135 (empty -> .)

    param                          shift and go to state 51
    typeParam                      shift and go to state 52
    empty                          shift and go to state 53

state 45

    (22) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN . param PARENCLOSE body exitFunc
    (25) param -> . typeParam ID
    (26) param -> . typeParam ID COLON param
    (27) param -> . empty
    (28) typeParam -> . INT
    (29) typeParam -> . FLOAT
    (30) typeParam -> . CHAR
    (135) empty -> .

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    CHAR            shift and go to state 56
    PARENCLOSE      reduce using rule 135 (empty -> .)

    param                          shift and go to state 57
    typeParam                      shift and go to state 52
    empty                          shift and go to state 53

state 46

    (12) varss -> type guardarTipo mvar SEMICOLON varss .

    MAIN            reduce using rule 12 (varss -> type guardarTipo mvar SEMICOLON varss .)
    FUNCTION        reduce using rule 12 (varss -> type guardarTipo mvar SEMICOLON varss .)


state 47

    (15) mvar -> ID COLON mvar .

    SEMICOLON       reduce using rule 15 (mvar -> ID COLON mvar .)


state 48

    (16) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE COLON mvar
    (17) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE
    (20) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    BRACECLOSE      shift and go to state 58


state 49

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body .

    $end            reduce using rule 8 (main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body .)


state 50

    (34) body -> BRACKETOPEN . bodyy BRACKETCLOSE
    (35) bodyy -> . statement
    (36) bodyy -> . statement bodyy
    (37) bodyy -> . empty
    (38) statement -> . dec_variables
    (39) statement -> . assignment
    (40) statement -> . condition
    (41) statement -> . writing
    (42) statement -> . reading
    (43) statement -> . call_func
    (44) statement -> . graph
    (45) statement -> . return
    (46) statement -> . while_loop
    (47) statement -> . for_loop
    (48) statement -> . max
    (49) statement -> . min
    (50) statement -> . sum
    (51) statement -> . normal
    (52) statement -> . uniforme
    (53) statement -> . poisson
    (54) statement -> . binomial
    (135) empty -> .
    (55) dec_variables -> . dec_variabless
    (64) assignment -> . variableAssignment EQUAL exp SEMICOLON
    (103) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (109) writing -> . PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
    (115) reading -> . READ multivariables SEMICOLON
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE
    (69) graph -> . PLOT PARENOPEN exp PARENCLOSE SEMICOLON
    (125) return -> . RETURN exp SEMICOLON
    (118) while_loop -> . WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (122) for_loop -> . FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
    (126) max -> . MAX PARENOPEN exp PARENCLOSE SEMICOLON
    (127) min -> . MIN PARENOPEN exp PARENCLOSE SEMICOLON
    (128) sum -> . SUM PARENOPEN exp PARENCLOSE SEMICOLON
    (134) normal -> . NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (133) uniforme -> . UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
    (132) poisson -> . POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
    (131) binomial -> . BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (56) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (57) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (100) variableAssignment -> . ID
    (101) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE
    (102) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (31) type -> . INT
    (32) type -> . FLOAT
    (33) type -> . CHAR

    BRACKETCLOSE    reduce using rule 135 (empty -> .)
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    ID              shift and go to state 84
    PLOT            shift and go to state 85
    RETURN          shift and go to state 86
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    MAX             shift and go to state 89
    MIN             shift and go to state 90
    SUM             shift and go to state 91
    NORMAL          shift and go to state 92
    UNIFORME        shift and go to state 93
    POISSON         shift and go to state 94
    BINOMIAL        shift and go to state 95
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    bodyy                          shift and go to state 59
    statement                      shift and go to state 60
    empty                          shift and go to state 61
    dec_variables                  shift and go to state 62
    assignment                     shift and go to state 63
    condition                      shift and go to state 64
    writing                        shift and go to state 65
    reading                        shift and go to state 66
    call_func                      shift and go to state 67
    graph                          shift and go to state 68
    return                         shift and go to state 69
    while_loop                     shift and go to state 70
    for_loop                       shift and go to state 71
    max                            shift and go to state 72
    min                            shift and go to state 73
    sum                            shift and go to state 74
    normal                         shift and go to state 75
    uniforme                       shift and go to state 76
    poisson                        shift and go to state 77
    binomial                       shift and go to state 78
    dec_variabless                 shift and go to state 79
    variableAssignment             shift and go to state 80
    type                           shift and go to state 96

state 51

    (21) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param . PARENCLOSE body exitFunc

    PARENCLOSE      shift and go to state 97


state 52

    (25) param -> typeParam . ID
    (26) param -> typeParam . ID COLON param

    ID              shift and go to state 98


state 53

    (27) param -> empty .

    PARENCLOSE      reduce using rule 27 (param -> empty .)


state 54

    (28) typeParam -> INT .

    ID              reduce using rule 28 (typeParam -> INT .)


state 55

    (29) typeParam -> FLOAT .

    ID              reduce using rule 29 (typeParam -> FLOAT .)


state 56

    (30) typeParam -> CHAR .

    ID              reduce using rule 30 (typeParam -> CHAR .)


state 57

    (22) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param . PARENCLOSE body exitFunc

    PARENCLOSE      shift and go to state 99


state 58

    (16) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . COLON mvar
    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> ID BRACEOPEN CTEINT BRACECLOSE .
    (20) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 101
    BRACEOPEN       shift and go to state 100
    SEMICOLON       reduce using rule 19 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE .)


state 59

    (34) body -> BRACKETOPEN bodyy . BRACKETCLOSE

    BRACKETCLOSE    shift and go to state 102


state 60

    (35) bodyy -> statement .
    (36) bodyy -> statement . bodyy
    (35) bodyy -> . statement
    (36) bodyy -> . statement bodyy
    (37) bodyy -> . empty
    (38) statement -> . dec_variables
    (39) statement -> . assignment
    (40) statement -> . condition
    (41) statement -> . writing
    (42) statement -> . reading
    (43) statement -> . call_func
    (44) statement -> . graph
    (45) statement -> . return
    (46) statement -> . while_loop
    (47) statement -> . for_loop
    (48) statement -> . max
    (49) statement -> . min
    (50) statement -> . sum
    (51) statement -> . normal
    (52) statement -> . uniforme
    (53) statement -> . poisson
    (54) statement -> . binomial
    (135) empty -> .
    (55) dec_variables -> . dec_variabless
    (64) assignment -> . variableAssignment EQUAL exp SEMICOLON
    (103) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (109) writing -> . PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
    (115) reading -> . READ multivariables SEMICOLON
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE
    (69) graph -> . PLOT PARENOPEN exp PARENCLOSE SEMICOLON
    (125) return -> . RETURN exp SEMICOLON
    (118) while_loop -> . WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (122) for_loop -> . FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
    (126) max -> . MAX PARENOPEN exp PARENCLOSE SEMICOLON
    (127) min -> . MIN PARENOPEN exp PARENCLOSE SEMICOLON
    (128) sum -> . SUM PARENOPEN exp PARENCLOSE SEMICOLON
    (134) normal -> . NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (133) uniforme -> . UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
    (132) poisson -> . POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
    (131) binomial -> . BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (56) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (57) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (100) variableAssignment -> . ID
    (101) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE
    (102) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (31) type -> . INT
    (32) type -> . FLOAT
    (33) type -> . CHAR

  ! reduce/reduce conflict for BRACKETCLOSE resolved using rule 35 (bodyy -> statement .)
    BRACKETCLOSE    reduce using rule 35 (bodyy -> statement .)
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    READ            shift and go to state 83
    ID              shift and go to state 84
    PLOT            shift and go to state 85
    RETURN          shift and go to state 86
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    MAX             shift and go to state 89
    MIN             shift and go to state 90
    SUM             shift and go to state 91
    NORMAL          shift and go to state 92
    UNIFORME        shift and go to state 93
    POISSON         shift and go to state 94
    BINOMIAL        shift and go to state 95
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

  ! BRACKETCLOSE    [ reduce using rule 135 (empty -> .) ]

    statement                      shift and go to state 60
    bodyy                          shift and go to state 103
    empty                          shift and go to state 61
    dec_variables                  shift and go to state 62
    assignment                     shift and go to state 63
    condition                      shift and go to state 64
    writing                        shift and go to state 65
    reading                        shift and go to state 66
    call_func                      shift and go to state 67
    graph                          shift and go to state 68
    return                         shift and go to state 69
    while_loop                     shift and go to state 70
    for_loop                       shift and go to state 71
    max                            shift and go to state 72
    min                            shift and go to state 73
    sum                            shift and go to state 74
    normal                         shift and go to state 75
    uniforme                       shift and go to state 76
    poisson                        shift and go to state 77
    binomial                       shift and go to state 78
    dec_variabless                 shift and go to state 79
    variableAssignment             shift and go to state 80
    type                           shift and go to state 96

state 61

    (37) bodyy -> empty .

    BRACKETCLOSE    reduce using rule 37 (bodyy -> empty .)


state 62

    (38) statement -> dec_variables .

    IF              reduce using rule 38 (statement -> dec_variables .)
    PRINT           reduce using rule 38 (statement -> dec_variables .)
    READ            reduce using rule 38 (statement -> dec_variables .)
    ID              reduce using rule 38 (statement -> dec_variables .)
    PLOT            reduce using rule 38 (statement -> dec_variables .)
    RETURN          reduce using rule 38 (statement -> dec_variables .)
    WHILE           reduce using rule 38 (statement -> dec_variables .)
    FOR             reduce using rule 38 (statement -> dec_variables .)
    MAX             reduce using rule 38 (statement -> dec_variables .)
    MIN             reduce using rule 38 (statement -> dec_variables .)
    SUM             reduce using rule 38 (statement -> dec_variables .)
    NORMAL          reduce using rule 38 (statement -> dec_variables .)
    UNIFORME        reduce using rule 38 (statement -> dec_variables .)
    POISSON         reduce using rule 38 (statement -> dec_variables .)
    BINOMIAL        reduce using rule 38 (statement -> dec_variables .)
    INT             reduce using rule 38 (statement -> dec_variables .)
    FLOAT           reduce using rule 38 (statement -> dec_variables .)
    CHAR            reduce using rule 38 (statement -> dec_variables .)
    BRACKETCLOSE    reduce using rule 38 (statement -> dec_variables .)


state 63

    (39) statement -> assignment .

    IF              reduce using rule 39 (statement -> assignment .)
    PRINT           reduce using rule 39 (statement -> assignment .)
    READ            reduce using rule 39 (statement -> assignment .)
    ID              reduce using rule 39 (statement -> assignment .)
    PLOT            reduce using rule 39 (statement -> assignment .)
    RETURN          reduce using rule 39 (statement -> assignment .)
    WHILE           reduce using rule 39 (statement -> assignment .)
    FOR             reduce using rule 39 (statement -> assignment .)
    MAX             reduce using rule 39 (statement -> assignment .)
    MIN             reduce using rule 39 (statement -> assignment .)
    SUM             reduce using rule 39 (statement -> assignment .)
    NORMAL          reduce using rule 39 (statement -> assignment .)
    UNIFORME        reduce using rule 39 (statement -> assignment .)
    POISSON         reduce using rule 39 (statement -> assignment .)
    BINOMIAL        reduce using rule 39 (statement -> assignment .)
    INT             reduce using rule 39 (statement -> assignment .)
    FLOAT           reduce using rule 39 (statement -> assignment .)
    CHAR            reduce using rule 39 (statement -> assignment .)
    BRACKETCLOSE    reduce using rule 39 (statement -> assignment .)


state 64

    (40) statement -> condition .

    IF              reduce using rule 40 (statement -> condition .)
    PRINT           reduce using rule 40 (statement -> condition .)
    READ            reduce using rule 40 (statement -> condition .)
    ID              reduce using rule 40 (statement -> condition .)
    PLOT            reduce using rule 40 (statement -> condition .)
    RETURN          reduce using rule 40 (statement -> condition .)
    WHILE           reduce using rule 40 (statement -> condition .)
    FOR             reduce using rule 40 (statement -> condition .)
    MAX             reduce using rule 40 (statement -> condition .)
    MIN             reduce using rule 40 (statement -> condition .)
    SUM             reduce using rule 40 (statement -> condition .)
    NORMAL          reduce using rule 40 (statement -> condition .)
    UNIFORME        reduce using rule 40 (statement -> condition .)
    POISSON         reduce using rule 40 (statement -> condition .)
    BINOMIAL        reduce using rule 40 (statement -> condition .)
    INT             reduce using rule 40 (statement -> condition .)
    FLOAT           reduce using rule 40 (statement -> condition .)
    CHAR            reduce using rule 40 (statement -> condition .)
    BRACKETCLOSE    reduce using rule 40 (statement -> condition .)


state 65

    (41) statement -> writing .

    IF              reduce using rule 41 (statement -> writing .)
    PRINT           reduce using rule 41 (statement -> writing .)
    READ            reduce using rule 41 (statement -> writing .)
    ID              reduce using rule 41 (statement -> writing .)
    PLOT            reduce using rule 41 (statement -> writing .)
    RETURN          reduce using rule 41 (statement -> writing .)
    WHILE           reduce using rule 41 (statement -> writing .)
    FOR             reduce using rule 41 (statement -> writing .)
    MAX             reduce using rule 41 (statement -> writing .)
    MIN             reduce using rule 41 (statement -> writing .)
    SUM             reduce using rule 41 (statement -> writing .)
    NORMAL          reduce using rule 41 (statement -> writing .)
    UNIFORME        reduce using rule 41 (statement -> writing .)
    POISSON         reduce using rule 41 (statement -> writing .)
    BINOMIAL        reduce using rule 41 (statement -> writing .)
    INT             reduce using rule 41 (statement -> writing .)
    FLOAT           reduce using rule 41 (statement -> writing .)
    CHAR            reduce using rule 41 (statement -> writing .)
    BRACKETCLOSE    reduce using rule 41 (statement -> writing .)


state 66

    (42) statement -> reading .

    IF              reduce using rule 42 (statement -> reading .)
    PRINT           reduce using rule 42 (statement -> reading .)
    READ            reduce using rule 42 (statement -> reading .)
    ID              reduce using rule 42 (statement -> reading .)
    PLOT            reduce using rule 42 (statement -> reading .)
    RETURN          reduce using rule 42 (statement -> reading .)
    WHILE           reduce using rule 42 (statement -> reading .)
    FOR             reduce using rule 42 (statement -> reading .)
    MAX             reduce using rule 42 (statement -> reading .)
    MIN             reduce using rule 42 (statement -> reading .)
    SUM             reduce using rule 42 (statement -> reading .)
    NORMAL          reduce using rule 42 (statement -> reading .)
    UNIFORME        reduce using rule 42 (statement -> reading .)
    POISSON         reduce using rule 42 (statement -> reading .)
    BINOMIAL        reduce using rule 42 (statement -> reading .)
    INT             reduce using rule 42 (statement -> reading .)
    FLOAT           reduce using rule 42 (statement -> reading .)
    CHAR            reduce using rule 42 (statement -> reading .)
    BRACKETCLOSE    reduce using rule 42 (statement -> reading .)


state 67

    (43) statement -> call_func .

    IF              reduce using rule 43 (statement -> call_func .)
    PRINT           reduce using rule 43 (statement -> call_func .)
    READ            reduce using rule 43 (statement -> call_func .)
    ID              reduce using rule 43 (statement -> call_func .)
    PLOT            reduce using rule 43 (statement -> call_func .)
    RETURN          reduce using rule 43 (statement -> call_func .)
    WHILE           reduce using rule 43 (statement -> call_func .)
    FOR             reduce using rule 43 (statement -> call_func .)
    MAX             reduce using rule 43 (statement -> call_func .)
    MIN             reduce using rule 43 (statement -> call_func .)
    SUM             reduce using rule 43 (statement -> call_func .)
    NORMAL          reduce using rule 43 (statement -> call_func .)
    UNIFORME        reduce using rule 43 (statement -> call_func .)
    POISSON         reduce using rule 43 (statement -> call_func .)
    BINOMIAL        reduce using rule 43 (statement -> call_func .)
    INT             reduce using rule 43 (statement -> call_func .)
    FLOAT           reduce using rule 43 (statement -> call_func .)
    CHAR            reduce using rule 43 (statement -> call_func .)
    BRACKETCLOSE    reduce using rule 43 (statement -> call_func .)


state 68

    (44) statement -> graph .

    IF              reduce using rule 44 (statement -> graph .)
    PRINT           reduce using rule 44 (statement -> graph .)
    READ            reduce using rule 44 (statement -> graph .)
    ID              reduce using rule 44 (statement -> graph .)
    PLOT            reduce using rule 44 (statement -> graph .)
    RETURN          reduce using rule 44 (statement -> graph .)
    WHILE           reduce using rule 44 (statement -> graph .)
    FOR             reduce using rule 44 (statement -> graph .)
    MAX             reduce using rule 44 (statement -> graph .)
    MIN             reduce using rule 44 (statement -> graph .)
    SUM             reduce using rule 44 (statement -> graph .)
    NORMAL          reduce using rule 44 (statement -> graph .)
    UNIFORME        reduce using rule 44 (statement -> graph .)
    POISSON         reduce using rule 44 (statement -> graph .)
    BINOMIAL        reduce using rule 44 (statement -> graph .)
    INT             reduce using rule 44 (statement -> graph .)
    FLOAT           reduce using rule 44 (statement -> graph .)
    CHAR            reduce using rule 44 (statement -> graph .)
    BRACKETCLOSE    reduce using rule 44 (statement -> graph .)


state 69

    (45) statement -> return .

    IF              reduce using rule 45 (statement -> return .)
    PRINT           reduce using rule 45 (statement -> return .)
    READ            reduce using rule 45 (statement -> return .)
    ID              reduce using rule 45 (statement -> return .)
    PLOT            reduce using rule 45 (statement -> return .)
    RETURN          reduce using rule 45 (statement -> return .)
    WHILE           reduce using rule 45 (statement -> return .)
    FOR             reduce using rule 45 (statement -> return .)
    MAX             reduce using rule 45 (statement -> return .)
    MIN             reduce using rule 45 (statement -> return .)
    SUM             reduce using rule 45 (statement -> return .)
    NORMAL          reduce using rule 45 (statement -> return .)
    UNIFORME        reduce using rule 45 (statement -> return .)
    POISSON         reduce using rule 45 (statement -> return .)
    BINOMIAL        reduce using rule 45 (statement -> return .)
    INT             reduce using rule 45 (statement -> return .)
    FLOAT           reduce using rule 45 (statement -> return .)
    CHAR            reduce using rule 45 (statement -> return .)
    BRACKETCLOSE    reduce using rule 45 (statement -> return .)


state 70

    (46) statement -> while_loop .

    IF              reduce using rule 46 (statement -> while_loop .)
    PRINT           reduce using rule 46 (statement -> while_loop .)
    READ            reduce using rule 46 (statement -> while_loop .)
    ID              reduce using rule 46 (statement -> while_loop .)
    PLOT            reduce using rule 46 (statement -> while_loop .)
    RETURN          reduce using rule 46 (statement -> while_loop .)
    WHILE           reduce using rule 46 (statement -> while_loop .)
    FOR             reduce using rule 46 (statement -> while_loop .)
    MAX             reduce using rule 46 (statement -> while_loop .)
    MIN             reduce using rule 46 (statement -> while_loop .)
    SUM             reduce using rule 46 (statement -> while_loop .)
    NORMAL          reduce using rule 46 (statement -> while_loop .)
    UNIFORME        reduce using rule 46 (statement -> while_loop .)
    POISSON         reduce using rule 46 (statement -> while_loop .)
    BINOMIAL        reduce using rule 46 (statement -> while_loop .)
    INT             reduce using rule 46 (statement -> while_loop .)
    FLOAT           reduce using rule 46 (statement -> while_loop .)
    CHAR            reduce using rule 46 (statement -> while_loop .)
    BRACKETCLOSE    reduce using rule 46 (statement -> while_loop .)


state 71

    (47) statement -> for_loop .

    IF              reduce using rule 47 (statement -> for_loop .)
    PRINT           reduce using rule 47 (statement -> for_loop .)
    READ            reduce using rule 47 (statement -> for_loop .)
    ID              reduce using rule 47 (statement -> for_loop .)
    PLOT            reduce using rule 47 (statement -> for_loop .)
    RETURN          reduce using rule 47 (statement -> for_loop .)
    WHILE           reduce using rule 47 (statement -> for_loop .)
    FOR             reduce using rule 47 (statement -> for_loop .)
    MAX             reduce using rule 47 (statement -> for_loop .)
    MIN             reduce using rule 47 (statement -> for_loop .)
    SUM             reduce using rule 47 (statement -> for_loop .)
    NORMAL          reduce using rule 47 (statement -> for_loop .)
    UNIFORME        reduce using rule 47 (statement -> for_loop .)
    POISSON         reduce using rule 47 (statement -> for_loop .)
    BINOMIAL        reduce using rule 47 (statement -> for_loop .)
    INT             reduce using rule 47 (statement -> for_loop .)
    FLOAT           reduce using rule 47 (statement -> for_loop .)
    CHAR            reduce using rule 47 (statement -> for_loop .)
    BRACKETCLOSE    reduce using rule 47 (statement -> for_loop .)


state 72

    (48) statement -> max .

    IF              reduce using rule 48 (statement -> max .)
    PRINT           reduce using rule 48 (statement -> max .)
    READ            reduce using rule 48 (statement -> max .)
    ID              reduce using rule 48 (statement -> max .)
    PLOT            reduce using rule 48 (statement -> max .)
    RETURN          reduce using rule 48 (statement -> max .)
    WHILE           reduce using rule 48 (statement -> max .)
    FOR             reduce using rule 48 (statement -> max .)
    MAX             reduce using rule 48 (statement -> max .)
    MIN             reduce using rule 48 (statement -> max .)
    SUM             reduce using rule 48 (statement -> max .)
    NORMAL          reduce using rule 48 (statement -> max .)
    UNIFORME        reduce using rule 48 (statement -> max .)
    POISSON         reduce using rule 48 (statement -> max .)
    BINOMIAL        reduce using rule 48 (statement -> max .)
    INT             reduce using rule 48 (statement -> max .)
    FLOAT           reduce using rule 48 (statement -> max .)
    CHAR            reduce using rule 48 (statement -> max .)
    BRACKETCLOSE    reduce using rule 48 (statement -> max .)


state 73

    (49) statement -> min .

    IF              reduce using rule 49 (statement -> min .)
    PRINT           reduce using rule 49 (statement -> min .)
    READ            reduce using rule 49 (statement -> min .)
    ID              reduce using rule 49 (statement -> min .)
    PLOT            reduce using rule 49 (statement -> min .)
    RETURN          reduce using rule 49 (statement -> min .)
    WHILE           reduce using rule 49 (statement -> min .)
    FOR             reduce using rule 49 (statement -> min .)
    MAX             reduce using rule 49 (statement -> min .)
    MIN             reduce using rule 49 (statement -> min .)
    SUM             reduce using rule 49 (statement -> min .)
    NORMAL          reduce using rule 49 (statement -> min .)
    UNIFORME        reduce using rule 49 (statement -> min .)
    POISSON         reduce using rule 49 (statement -> min .)
    BINOMIAL        reduce using rule 49 (statement -> min .)
    INT             reduce using rule 49 (statement -> min .)
    FLOAT           reduce using rule 49 (statement -> min .)
    CHAR            reduce using rule 49 (statement -> min .)
    BRACKETCLOSE    reduce using rule 49 (statement -> min .)


state 74

    (50) statement -> sum .

    IF              reduce using rule 50 (statement -> sum .)
    PRINT           reduce using rule 50 (statement -> sum .)
    READ            reduce using rule 50 (statement -> sum .)
    ID              reduce using rule 50 (statement -> sum .)
    PLOT            reduce using rule 50 (statement -> sum .)
    RETURN          reduce using rule 50 (statement -> sum .)
    WHILE           reduce using rule 50 (statement -> sum .)
    FOR             reduce using rule 50 (statement -> sum .)
    MAX             reduce using rule 50 (statement -> sum .)
    MIN             reduce using rule 50 (statement -> sum .)
    SUM             reduce using rule 50 (statement -> sum .)
    NORMAL          reduce using rule 50 (statement -> sum .)
    UNIFORME        reduce using rule 50 (statement -> sum .)
    POISSON         reduce using rule 50 (statement -> sum .)
    BINOMIAL        reduce using rule 50 (statement -> sum .)
    INT             reduce using rule 50 (statement -> sum .)
    FLOAT           reduce using rule 50 (statement -> sum .)
    CHAR            reduce using rule 50 (statement -> sum .)
    BRACKETCLOSE    reduce using rule 50 (statement -> sum .)


state 75

    (51) statement -> normal .

    IF              reduce using rule 51 (statement -> normal .)
    PRINT           reduce using rule 51 (statement -> normal .)
    READ            reduce using rule 51 (statement -> normal .)
    ID              reduce using rule 51 (statement -> normal .)
    PLOT            reduce using rule 51 (statement -> normal .)
    RETURN          reduce using rule 51 (statement -> normal .)
    WHILE           reduce using rule 51 (statement -> normal .)
    FOR             reduce using rule 51 (statement -> normal .)
    MAX             reduce using rule 51 (statement -> normal .)
    MIN             reduce using rule 51 (statement -> normal .)
    SUM             reduce using rule 51 (statement -> normal .)
    NORMAL          reduce using rule 51 (statement -> normal .)
    UNIFORME        reduce using rule 51 (statement -> normal .)
    POISSON         reduce using rule 51 (statement -> normal .)
    BINOMIAL        reduce using rule 51 (statement -> normal .)
    INT             reduce using rule 51 (statement -> normal .)
    FLOAT           reduce using rule 51 (statement -> normal .)
    CHAR            reduce using rule 51 (statement -> normal .)
    BRACKETCLOSE    reduce using rule 51 (statement -> normal .)


state 76

    (52) statement -> uniforme .

    IF              reduce using rule 52 (statement -> uniforme .)
    PRINT           reduce using rule 52 (statement -> uniforme .)
    READ            reduce using rule 52 (statement -> uniforme .)
    ID              reduce using rule 52 (statement -> uniforme .)
    PLOT            reduce using rule 52 (statement -> uniforme .)
    RETURN          reduce using rule 52 (statement -> uniforme .)
    WHILE           reduce using rule 52 (statement -> uniforme .)
    FOR             reduce using rule 52 (statement -> uniforme .)
    MAX             reduce using rule 52 (statement -> uniforme .)
    MIN             reduce using rule 52 (statement -> uniforme .)
    SUM             reduce using rule 52 (statement -> uniforme .)
    NORMAL          reduce using rule 52 (statement -> uniforme .)
    UNIFORME        reduce using rule 52 (statement -> uniforme .)
    POISSON         reduce using rule 52 (statement -> uniforme .)
    BINOMIAL        reduce using rule 52 (statement -> uniforme .)
    INT             reduce using rule 52 (statement -> uniforme .)
    FLOAT           reduce using rule 52 (statement -> uniforme .)
    CHAR            reduce using rule 52 (statement -> uniforme .)
    BRACKETCLOSE    reduce using rule 52 (statement -> uniforme .)


state 77

    (53) statement -> poisson .

    IF              reduce using rule 53 (statement -> poisson .)
    PRINT           reduce using rule 53 (statement -> poisson .)
    READ            reduce using rule 53 (statement -> poisson .)
    ID              reduce using rule 53 (statement -> poisson .)
    PLOT            reduce using rule 53 (statement -> poisson .)
    RETURN          reduce using rule 53 (statement -> poisson .)
    WHILE           reduce using rule 53 (statement -> poisson .)
    FOR             reduce using rule 53 (statement -> poisson .)
    MAX             reduce using rule 53 (statement -> poisson .)
    MIN             reduce using rule 53 (statement -> poisson .)
    SUM             reduce using rule 53 (statement -> poisson .)
    NORMAL          reduce using rule 53 (statement -> poisson .)
    UNIFORME        reduce using rule 53 (statement -> poisson .)
    POISSON         reduce using rule 53 (statement -> poisson .)
    BINOMIAL        reduce using rule 53 (statement -> poisson .)
    INT             reduce using rule 53 (statement -> poisson .)
    FLOAT           reduce using rule 53 (statement -> poisson .)
    CHAR            reduce using rule 53 (statement -> poisson .)
    BRACKETCLOSE    reduce using rule 53 (statement -> poisson .)


state 78

    (54) statement -> binomial .

    IF              reduce using rule 54 (statement -> binomial .)
    PRINT           reduce using rule 54 (statement -> binomial .)
    READ            reduce using rule 54 (statement -> binomial .)
    ID              reduce using rule 54 (statement -> binomial .)
    PLOT            reduce using rule 54 (statement -> binomial .)
    RETURN          reduce using rule 54 (statement -> binomial .)
    WHILE           reduce using rule 54 (statement -> binomial .)
    FOR             reduce using rule 54 (statement -> binomial .)
    MAX             reduce using rule 54 (statement -> binomial .)
    MIN             reduce using rule 54 (statement -> binomial .)
    SUM             reduce using rule 54 (statement -> binomial .)
    NORMAL          reduce using rule 54 (statement -> binomial .)
    UNIFORME        reduce using rule 54 (statement -> binomial .)
    POISSON         reduce using rule 54 (statement -> binomial .)
    BINOMIAL        reduce using rule 54 (statement -> binomial .)
    INT             reduce using rule 54 (statement -> binomial .)
    FLOAT           reduce using rule 54 (statement -> binomial .)
    CHAR            reduce using rule 54 (statement -> binomial .)
    BRACKETCLOSE    reduce using rule 54 (statement -> binomial .)


state 79

    (55) dec_variables -> dec_variabless .

    IF              reduce using rule 55 (dec_variables -> dec_variabless .)
    PRINT           reduce using rule 55 (dec_variables -> dec_variabless .)
    READ            reduce using rule 55 (dec_variables -> dec_variabless .)
    ID              reduce using rule 55 (dec_variables -> dec_variabless .)
    PLOT            reduce using rule 55 (dec_variables -> dec_variabless .)
    RETURN          reduce using rule 55 (dec_variables -> dec_variabless .)
    WHILE           reduce using rule 55 (dec_variables -> dec_variabless .)
    FOR             reduce using rule 55 (dec_variables -> dec_variabless .)
    MAX             reduce using rule 55 (dec_variables -> dec_variabless .)
    MIN             reduce using rule 55 (dec_variables -> dec_variabless .)
    SUM             reduce using rule 55 (dec_variables -> dec_variabless .)
    NORMAL          reduce using rule 55 (dec_variables -> dec_variabless .)
    UNIFORME        reduce using rule 55 (dec_variables -> dec_variabless .)
    POISSON         reduce using rule 55 (dec_variables -> dec_variabless .)
    BINOMIAL        reduce using rule 55 (dec_variables -> dec_variabless .)
    INT             reduce using rule 55 (dec_variables -> dec_variabless .)
    FLOAT           reduce using rule 55 (dec_variables -> dec_variabless .)
    CHAR            reduce using rule 55 (dec_variables -> dec_variabless .)
    BRACKETCLOSE    reduce using rule 55 (dec_variables -> dec_variabless .)


state 80

    (64) assignment -> variableAssignment . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 104


state 81

    (103) condition -> IF . PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> IF . PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse

    PARENOPEN       shift and go to state 105


state 82

    (109) writing -> PRINT . PARENOPEN writingg PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 106


state 83

    (115) reading -> READ . multivariables SEMICOLON
    (116) multivariables -> . variable
    (117) multivariables -> . variable COLON multivariables
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 109

    multivariables                 shift and go to state 107
    variable                       shift and go to state 108

state 84

    (65) call_func -> ID . PARENOPEN call_funcc PARENCLOSE
    (100) variableAssignment -> ID .
    (101) variableAssignment -> ID . BRACEOPEN exp BRACECLOSE
    (102) variableAssignment -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    PARENOPEN       shift and go to state 110
    EQUAL           reduce using rule 100 (variableAssignment -> ID .)
    BRACEOPEN       shift and go to state 111


state 85

    (69) graph -> PLOT . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 112


state 86

    (125) return -> RETURN . exp SEMICOLON
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 113
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 87

    (118) while_loop -> WHILE . whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (119) whileMigaja -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)

    whileMigaja                    shift and go to state 123
    empty                          shift and go to state 124

state 88

    (122) for_loop -> FOR . PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd

    PARENOPEN       shift and go to state 125


state 89

    (126) max -> MAX . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 126


state 90

    (127) min -> MIN . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 127


state 91

    (128) sum -> SUM . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 128


state 92

    (134) normal -> NORMAL . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 129


state 93

    (133) uniforme -> UNIFORME . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 130


state 94

    (132) poisson -> POISSON . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 131


state 95

    (131) binomial -> BINOMIAL . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 132


state 96

    (56) dec_variabless -> type . guardarTipo dec_mvar SEMICOLON dec_variabless
    (57) dec_variabless -> type . guardarTipo dec_mvar SEMICOLON
    (14) guardarTipo -> . empty
    (135) empty -> .

    ID              reduce using rule 135 (empty -> .)

    guardarTipo                    shift and go to state 133
    empty                          shift and go to state 29

state 97

    (21) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE . body exitFunc
    (34) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 50

    body                           shift and go to state 134

state 98

    (25) param -> typeParam ID .
    (26) param -> typeParam ID . COLON param

    PARENCLOSE      reduce using rule 25 (param -> typeParam ID .)
    COLON           shift and go to state 135


state 99

    (22) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE . body exitFunc
    (34) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 50

    body                           shift and go to state 136

state 100

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE COLON mvar
    (20) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE

    CTEINT          shift and go to state 137


state 101

    (16) mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON . mvar
    (15) mvar -> . ID COLON mvar
    (16) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID
    (19) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 34

    mvar                           shift and go to state 138

state 102

    (34) body -> BRACKETOPEN bodyy BRACKETCLOSE .

    $end            reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FUNCTION        reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MAIN            reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    ELSE            reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    IF              reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    PRINT           reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    READ            reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    ID              reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    PLOT            reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    RETURN          reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    WHILE           reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FOR             reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MAX             reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MIN             reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    SUM             reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    NORMAL          reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    UNIFORME        reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    POISSON         reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    BINOMIAL        reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    INT             reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FLOAT           reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    CHAR            reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    BRACKETCLOSE    reduce using rule 34 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)


state 103

    (36) bodyy -> statement bodyy .

    BRACKETCLOSE    reduce using rule 36 (bodyy -> statement bodyy .)


state 104

    (64) assignment -> variableAssignment EQUAL . exp SEMICOLON
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 139
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 105

    (103) condition -> IF PARENOPEN . exp PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> IF PARENOPEN . exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 140
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 106

    (109) writing -> PRINT PARENOPEN . writingg PARENCLOSE SEMICOLON
    (110) writingg -> . exp
    (111) writingg -> . exp COLON writingg
    (112) writingg -> . auxString
    (113) writingg -> . auxString COLON writingg
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (114) auxString -> . CTESTRING
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 144
    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    writingg                       shift and go to state 141
    exp                            shift and go to state 142
    auxString                      shift and go to state 143
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 107

    (115) reading -> READ multivariables . SEMICOLON

    SEMICOLON       shift and go to state 145


state 108

    (116) multivariables -> variable .
    (117) multivariables -> variable . COLON multivariables

    SEMICOLON       reduce using rule 116 (multivariables -> variable .)
    COLON           shift and go to state 146


state 109

    (97) variable -> ID .
    (98) variable -> ID . BRACEOPEN exp BRACECLOSE
    (99) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    COLON           reduce using rule 97 (variable -> ID .)
    SEMICOLON       reduce using rule 97 (variable -> ID .)
    EQUAL           reduce using rule 97 (variable -> ID .)
    PARENCLOSE      reduce using rule 97 (variable -> ID .)
    BRACEOPEN       shift and go to state 147


state 110

    (65) call_func -> ID PARENOPEN . call_funcc PARENCLOSE
    (66) call_funcc -> . exp
    (67) call_funcc -> . exp COLON call_funcc
    (68) call_funcc -> . empty
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (135) empty -> .
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENCLOSE      reduce using rule 135 (empty -> .)
    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    call_funcc                     shift and go to state 148
    exp                            shift and go to state 149
    empty                          shift and go to state 150
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 111

    (101) variableAssignment -> ID BRACEOPEN . exp BRACECLOSE
    (102) variableAssignment -> ID BRACEOPEN . exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 151
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 112

    (69) graph -> PLOT PARENOPEN . exp PARENCLOSE SEMICOLON
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 152
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 113

    (125) return -> RETURN exp . SEMICOLON
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    SEMICOLON       shift and go to state 153
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 114

    (78) exp -> m_exp .

    SEMICOLON       reduce using rule 78 (exp -> m_exp .)
    GREATHERTHAN    reduce using rule 78 (exp -> m_exp .)
    LESSTHAN        reduce using rule 78 (exp -> m_exp .)
    GREATHEREQUAL   reduce using rule 78 (exp -> m_exp .)
    LESSEQUAL       reduce using rule 78 (exp -> m_exp .)
    DIFFERENT       reduce using rule 78 (exp -> m_exp .)
    SAME            reduce using rule 78 (exp -> m_exp .)
    AND             reduce using rule 78 (exp -> m_exp .)
    OR              reduce using rule 78 (exp -> m_exp .)
    PARENCLOSE      reduce using rule 78 (exp -> m_exp .)
    COLON           reduce using rule 78 (exp -> m_exp .)
    BRACECLOSE      reduce using rule 78 (exp -> m_exp .)
    TO              reduce using rule 78 (exp -> m_exp .)


state 115

    (79) m_exp -> t . m_expp
    (80) m_expp -> . PLUS appendPLUS m_exp
    (81) m_expp -> . MINUS appendMINUS m_exp
    (82) m_expp -> . empty
    (135) empty -> .

    PLUS            shift and go to state 163
    MINUS           shift and go to state 164
    SEMICOLON       reduce using rule 135 (empty -> .)
    GREATHERTHAN    reduce using rule 135 (empty -> .)
    LESSTHAN        reduce using rule 135 (empty -> .)
    GREATHEREQUAL   reduce using rule 135 (empty -> .)
    LESSEQUAL       reduce using rule 135 (empty -> .)
    DIFFERENT       reduce using rule 135 (empty -> .)
    SAME            reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENCLOSE      reduce using rule 135 (empty -> .)
    COLON           reduce using rule 135 (empty -> .)
    BRACECLOSE      reduce using rule 135 (empty -> .)
    TO              reduce using rule 135 (empty -> .)

    m_expp                         shift and go to state 162
    empty                          shift and go to state 165

state 116

    (87) t -> f . termino
    (88) termino -> . MULTIPLY appendMULTIPLY t
    (89) termino -> . DIVIDE appendDIVIDE t
    (90) termino -> . empty
    (135) empty -> .

    MULTIPLY        shift and go to state 167
    DIVIDE          shift and go to state 168
    PLUS            reduce using rule 135 (empty -> .)
    MINUS           reduce using rule 135 (empty -> .)
    SEMICOLON       reduce using rule 135 (empty -> .)
    GREATHERTHAN    reduce using rule 135 (empty -> .)
    LESSTHAN        reduce using rule 135 (empty -> .)
    GREATHEREQUAL   reduce using rule 135 (empty -> .)
    LESSEQUAL       reduce using rule 135 (empty -> .)
    DIFFERENT       reduce using rule 135 (empty -> .)
    SAME            reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENCLOSE      reduce using rule 135 (empty -> .)
    COLON           reduce using rule 135 (empty -> .)
    BRACECLOSE      reduce using rule 135 (empty -> .)
    TO              reduce using rule 135 (empty -> .)

    termino                        shift and go to state 166
    empty                          shift and go to state 169

state 117

    (91) f -> PARENOPEN . exp PARENCLOSE
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 170
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 118

    (92) f -> ID .
    (97) variable -> ID .
    (98) variable -> ID . BRACEOPEN exp BRACECLOSE
    (99) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> ID . PARENOPEN call_funcc PARENCLOSE

  ! reduce/reduce conflict for MULTIPLY resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for GREATHERTHAN resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for SAME resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for PARENCLOSE resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for BRACECLOSE resolved using rule 92 (f -> ID .)
  ! reduce/reduce conflict for TO resolved using rule 92 (f -> ID .)
    MULTIPLY        reduce using rule 92 (f -> ID .)
    DIVIDE          reduce using rule 92 (f -> ID .)
    PLUS            reduce using rule 92 (f -> ID .)
    MINUS           reduce using rule 92 (f -> ID .)
    SEMICOLON       reduce using rule 92 (f -> ID .)
    GREATHERTHAN    reduce using rule 92 (f -> ID .)
    LESSTHAN        reduce using rule 92 (f -> ID .)
    GREATHEREQUAL   reduce using rule 92 (f -> ID .)
    LESSEQUAL       reduce using rule 92 (f -> ID .)
    DIFFERENT       reduce using rule 92 (f -> ID .)
    SAME            reduce using rule 92 (f -> ID .)
    AND             reduce using rule 92 (f -> ID .)
    OR              reduce using rule 92 (f -> ID .)
    PARENCLOSE      reduce using rule 92 (f -> ID .)
    COLON           reduce using rule 92 (f -> ID .)
    BRACECLOSE      reduce using rule 92 (f -> ID .)
    TO              reduce using rule 92 (f -> ID .)
    BRACEOPEN       shift and go to state 147
    PARENOPEN       shift and go to state 110

  ! MULTIPLY        [ reduce using rule 97 (variable -> ID .) ]
  ! DIVIDE          [ reduce using rule 97 (variable -> ID .) ]
  ! PLUS            [ reduce using rule 97 (variable -> ID .) ]
  ! MINUS           [ reduce using rule 97 (variable -> ID .) ]
  ! SEMICOLON       [ reduce using rule 97 (variable -> ID .) ]
  ! GREATHERTHAN    [ reduce using rule 97 (variable -> ID .) ]
  ! LESSTHAN        [ reduce using rule 97 (variable -> ID .) ]
  ! GREATHEREQUAL   [ reduce using rule 97 (variable -> ID .) ]
  ! LESSEQUAL       [ reduce using rule 97 (variable -> ID .) ]
  ! DIFFERENT       [ reduce using rule 97 (variable -> ID .) ]
  ! SAME            [ reduce using rule 97 (variable -> ID .) ]
  ! AND             [ reduce using rule 97 (variable -> ID .) ]
  ! OR              [ reduce using rule 97 (variable -> ID .) ]
  ! PARENCLOSE      [ reduce using rule 97 (variable -> ID .) ]
  ! COLON           [ reduce using rule 97 (variable -> ID .) ]
  ! BRACECLOSE      [ reduce using rule 97 (variable -> ID .) ]
  ! TO              [ reduce using rule 97 (variable -> ID .) ]


state 119

    (93) f -> CTEINT .

    MULTIPLY        reduce using rule 93 (f -> CTEINT .)
    DIVIDE          reduce using rule 93 (f -> CTEINT .)
    PLUS            reduce using rule 93 (f -> CTEINT .)
    MINUS           reduce using rule 93 (f -> CTEINT .)
    SEMICOLON       reduce using rule 93 (f -> CTEINT .)
    GREATHERTHAN    reduce using rule 93 (f -> CTEINT .)
    LESSTHAN        reduce using rule 93 (f -> CTEINT .)
    GREATHEREQUAL   reduce using rule 93 (f -> CTEINT .)
    LESSEQUAL       reduce using rule 93 (f -> CTEINT .)
    DIFFERENT       reduce using rule 93 (f -> CTEINT .)
    SAME            reduce using rule 93 (f -> CTEINT .)
    AND             reduce using rule 93 (f -> CTEINT .)
    OR              reduce using rule 93 (f -> CTEINT .)
    PARENCLOSE      reduce using rule 93 (f -> CTEINT .)
    COLON           reduce using rule 93 (f -> CTEINT .)
    BRACECLOSE      reduce using rule 93 (f -> CTEINT .)
    TO              reduce using rule 93 (f -> CTEINT .)


state 120

    (94) f -> CTFLOAT .

    MULTIPLY        reduce using rule 94 (f -> CTFLOAT .)
    DIVIDE          reduce using rule 94 (f -> CTFLOAT .)
    PLUS            reduce using rule 94 (f -> CTFLOAT .)
    MINUS           reduce using rule 94 (f -> CTFLOAT .)
    SEMICOLON       reduce using rule 94 (f -> CTFLOAT .)
    GREATHERTHAN    reduce using rule 94 (f -> CTFLOAT .)
    LESSTHAN        reduce using rule 94 (f -> CTFLOAT .)
    GREATHEREQUAL   reduce using rule 94 (f -> CTFLOAT .)
    LESSEQUAL       reduce using rule 94 (f -> CTFLOAT .)
    DIFFERENT       reduce using rule 94 (f -> CTFLOAT .)
    SAME            reduce using rule 94 (f -> CTFLOAT .)
    AND             reduce using rule 94 (f -> CTFLOAT .)
    OR              reduce using rule 94 (f -> CTFLOAT .)
    PARENCLOSE      reduce using rule 94 (f -> CTFLOAT .)
    COLON           reduce using rule 94 (f -> CTFLOAT .)
    BRACECLOSE      reduce using rule 94 (f -> CTFLOAT .)
    TO              reduce using rule 94 (f -> CTFLOAT .)


state 121

    (95) f -> variable .

    MULTIPLY        reduce using rule 95 (f -> variable .)
    DIVIDE          reduce using rule 95 (f -> variable .)
    PLUS            reduce using rule 95 (f -> variable .)
    MINUS           reduce using rule 95 (f -> variable .)
    SEMICOLON       reduce using rule 95 (f -> variable .)
    GREATHERTHAN    reduce using rule 95 (f -> variable .)
    LESSTHAN        reduce using rule 95 (f -> variable .)
    GREATHEREQUAL   reduce using rule 95 (f -> variable .)
    LESSEQUAL       reduce using rule 95 (f -> variable .)
    DIFFERENT       reduce using rule 95 (f -> variable .)
    SAME            reduce using rule 95 (f -> variable .)
    AND             reduce using rule 95 (f -> variable .)
    OR              reduce using rule 95 (f -> variable .)
    PARENCLOSE      reduce using rule 95 (f -> variable .)
    COLON           reduce using rule 95 (f -> variable .)
    BRACECLOSE      reduce using rule 95 (f -> variable .)
    TO              reduce using rule 95 (f -> variable .)


state 122

    (96) f -> call_func .

    MULTIPLY        reduce using rule 96 (f -> call_func .)
    DIVIDE          reduce using rule 96 (f -> call_func .)
    PLUS            reduce using rule 96 (f -> call_func .)
    MINUS           reduce using rule 96 (f -> call_func .)
    SEMICOLON       reduce using rule 96 (f -> call_func .)
    GREATHERTHAN    reduce using rule 96 (f -> call_func .)
    LESSTHAN        reduce using rule 96 (f -> call_func .)
    GREATHEREQUAL   reduce using rule 96 (f -> call_func .)
    LESSEQUAL       reduce using rule 96 (f -> call_func .)
    DIFFERENT       reduce using rule 96 (f -> call_func .)
    SAME            reduce using rule 96 (f -> call_func .)
    AND             reduce using rule 96 (f -> call_func .)
    OR              reduce using rule 96 (f -> call_func .)
    PARENCLOSE      reduce using rule 96 (f -> call_func .)
    COLON           reduce using rule 96 (f -> call_func .)
    BRACECLOSE      reduce using rule 96 (f -> call_func .)
    TO              reduce using rule 96 (f -> call_func .)


state 123

    (118) while_loop -> WHILE whileMigaja . PARENOPEN exp PARENCLOSE whileEval body whileEnd

    PARENOPEN       shift and go to state 171


state 124

    (119) whileMigaja -> empty .

    PARENOPEN       reduce using rule 119 (whileMigaja -> empty .)


state 125

    (122) for_loop -> FOR PARENOPEN . variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 109

    variable                       shift and go to state 172

state 126

    (126) max -> MAX PARENOPEN . exp PARENCLOSE SEMICOLON
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 173
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 127

    (127) min -> MIN PARENOPEN . exp PARENCLOSE SEMICOLON
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 174
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 128

    (128) sum -> SUM PARENOPEN . exp PARENCLOSE SEMICOLON
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 175
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 129

    (134) normal -> NORMAL PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 109

    param_dist                     shift and go to state 176
    variable                       shift and go to state 177

state 130

    (133) uniforme -> UNIFORME PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 109

    param_dist                     shift and go to state 178
    variable                       shift and go to state 177

state 131

    (132) poisson -> POISSON PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 109

    param_dist                     shift and go to state 179
    variable                       shift and go to state 177

state 132

    (131) binomial -> BINOMIAL PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 109

    param_dist                     shift and go to state 180
    variable                       shift and go to state 177

state 133

    (56) dec_variabless -> type guardarTipo . dec_mvar SEMICOLON dec_variabless
    (57) dec_variabless -> type guardarTipo . dec_mvar SEMICOLON
    (58) dec_mvar -> . ID COLON dec_mvar
    (59) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (60) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> . ID
    (62) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 182

    dec_mvar                       shift and go to state 181

state 134

    (21) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body . exitFunc
    (24) exitFunc -> . empty
    (135) empty -> .

    FUNCTION        reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)

    exitFunc                       shift and go to state 183
    empty                          shift and go to state 184

state 135

    (26) param -> typeParam ID COLON . param
    (25) param -> . typeParam ID
    (26) param -> . typeParam ID COLON param
    (27) param -> . empty
    (28) typeParam -> . INT
    (29) typeParam -> . FLOAT
    (30) typeParam -> . CHAR
    (135) empty -> .

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    CHAR            shift and go to state 56
    PARENCLOSE      reduce using rule 135 (empty -> .)

    typeParam                      shift and go to state 52
    param                          shift and go to state 185
    empty                          shift and go to state 53

state 136

    (22) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body . exitFunc
    (24) exitFunc -> . empty
    (135) empty -> .

    FUNCTION        reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)

    exitFunc                       shift and go to state 186
    empty                          shift and go to state 184

state 137

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE COLON mvar
    (20) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE

    BRACECLOSE      shift and go to state 187


state 138

    (16) mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar .

    SEMICOLON       reduce using rule 16 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar .)


state 139

    (64) assignment -> variableAssignment EQUAL exp . SEMICOLON
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    SEMICOLON       shift and go to state 188
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 140

    (103) condition -> IF PARENOPEN exp . PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> IF PARENOPEN exp . PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 189
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 141

    (109) writing -> PRINT PARENOPEN writingg . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 190


state 142

    (110) writingg -> exp .
    (111) writingg -> exp . COLON writingg
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      reduce using rule 110 (writingg -> exp .)
    COLON           shift and go to state 191
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 143

    (112) writingg -> auxString .
    (113) writingg -> auxString . COLON writingg

    PARENCLOSE      reduce using rule 112 (writingg -> auxString .)
    COLON           shift and go to state 192


state 144

    (114) auxString -> CTESTRING .

    COLON           reduce using rule 114 (auxString -> CTESTRING .)
    PARENCLOSE      reduce using rule 114 (auxString -> CTESTRING .)


state 145

    (115) reading -> READ multivariables SEMICOLON .

    IF              reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    PRINT           reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    READ            reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    ID              reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    PLOT            reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    RETURN          reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    WHILE           reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    FOR             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    MAX             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    MIN             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    SUM             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    NORMAL          reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    UNIFORME        reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    POISSON         reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    BINOMIAL        reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    INT             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    FLOAT           reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    CHAR            reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    BRACKETCLOSE    reduce using rule 115 (reading -> READ multivariables SEMICOLON .)


state 146

    (117) multivariables -> variable COLON . multivariables
    (116) multivariables -> . variable
    (117) multivariables -> . variable COLON multivariables
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 109

    variable                       shift and go to state 108
    multivariables                 shift and go to state 193

state 147

    (98) variable -> ID BRACEOPEN . exp BRACECLOSE
    (99) variable -> ID BRACEOPEN . exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 194
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 148

    (65) call_func -> ID PARENOPEN call_funcc . PARENCLOSE

    PARENCLOSE      shift and go to state 195


state 149

    (66) call_funcc -> exp .
    (67) call_funcc -> exp . COLON call_funcc
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      reduce using rule 66 (call_funcc -> exp .)
    COLON           shift and go to state 196
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 150

    (68) call_funcc -> empty .

    PARENCLOSE      reduce using rule 68 (call_funcc -> empty .)


state 151

    (101) variableAssignment -> ID BRACEOPEN exp . BRACECLOSE
    (102) variableAssignment -> ID BRACEOPEN exp . BRACECLOSE BRACEOPEN exp BRACECLOSE
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    BRACECLOSE      shift and go to state 197
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 152

    (69) graph -> PLOT PARENOPEN exp . PARENCLOSE SEMICOLON
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 198
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 153

    (125) return -> RETURN exp SEMICOLON .

    IF              reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    READ            reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    ID              reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    PLOT            reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    MAX             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    MIN             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    SUM             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    NORMAL          reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    UNIFORME        reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    POISSON         reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    BINOMIAL        reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    INT             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    FLOAT           reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    CHAR            reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    BRACKETCLOSE    reduce using rule 125 (return -> RETURN exp SEMICOLON .)


state 154

    (70) exp -> exp GREATHERTHAN . exp
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 199
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 155

    (71) exp -> exp LESSTHAN . exp
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 200
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 156

    (72) exp -> exp GREATHEREQUAL . exp
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 201
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 157

    (73) exp -> exp LESSEQUAL . exp
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 202
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 158

    (74) exp -> exp DIFFERENT . exp
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 203
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 159

    (75) exp -> exp SAME . exp
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 204
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 160

    (76) exp -> exp AND . exp
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 205
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 161

    (77) exp -> exp OR . exp
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 206
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 162

    (79) m_exp -> t m_expp .

    SEMICOLON       reduce using rule 79 (m_exp -> t m_expp .)
    GREATHERTHAN    reduce using rule 79 (m_exp -> t m_expp .)
    LESSTHAN        reduce using rule 79 (m_exp -> t m_expp .)
    GREATHEREQUAL   reduce using rule 79 (m_exp -> t m_expp .)
    LESSEQUAL       reduce using rule 79 (m_exp -> t m_expp .)
    DIFFERENT       reduce using rule 79 (m_exp -> t m_expp .)
    SAME            reduce using rule 79 (m_exp -> t m_expp .)
    AND             reduce using rule 79 (m_exp -> t m_expp .)
    OR              reduce using rule 79 (m_exp -> t m_expp .)
    PARENCLOSE      reduce using rule 79 (m_exp -> t m_expp .)
    COLON           reduce using rule 79 (m_exp -> t m_expp .)
    BRACECLOSE      reduce using rule 79 (m_exp -> t m_expp .)
    TO              reduce using rule 79 (m_exp -> t m_expp .)


state 163

    (80) m_expp -> PLUS . appendPLUS m_exp
    (83) appendPLUS -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    CTEINT          reduce using rule 135 (empty -> .)
    CTFLOAT         reduce using rule 135 (empty -> .)

    appendPLUS                     shift and go to state 207
    empty                          shift and go to state 208

state 164

    (81) m_expp -> MINUS . appendMINUS m_exp
    (84) appendMINUS -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    CTEINT          reduce using rule 135 (empty -> .)
    CTFLOAT         reduce using rule 135 (empty -> .)

    appendMINUS                    shift and go to state 209
    empty                          shift and go to state 210

state 165

    (82) m_expp -> empty .

    SEMICOLON       reduce using rule 82 (m_expp -> empty .)
    GREATHERTHAN    reduce using rule 82 (m_expp -> empty .)
    LESSTHAN        reduce using rule 82 (m_expp -> empty .)
    GREATHEREQUAL   reduce using rule 82 (m_expp -> empty .)
    LESSEQUAL       reduce using rule 82 (m_expp -> empty .)
    DIFFERENT       reduce using rule 82 (m_expp -> empty .)
    SAME            reduce using rule 82 (m_expp -> empty .)
    AND             reduce using rule 82 (m_expp -> empty .)
    OR              reduce using rule 82 (m_expp -> empty .)
    PARENCLOSE      reduce using rule 82 (m_expp -> empty .)
    COLON           reduce using rule 82 (m_expp -> empty .)
    BRACECLOSE      reduce using rule 82 (m_expp -> empty .)
    TO              reduce using rule 82 (m_expp -> empty .)


state 166

    (87) t -> f termino .

    PLUS            reduce using rule 87 (t -> f termino .)
    MINUS           reduce using rule 87 (t -> f termino .)
    SEMICOLON       reduce using rule 87 (t -> f termino .)
    GREATHERTHAN    reduce using rule 87 (t -> f termino .)
    LESSTHAN        reduce using rule 87 (t -> f termino .)
    GREATHEREQUAL   reduce using rule 87 (t -> f termino .)
    LESSEQUAL       reduce using rule 87 (t -> f termino .)
    DIFFERENT       reduce using rule 87 (t -> f termino .)
    SAME            reduce using rule 87 (t -> f termino .)
    AND             reduce using rule 87 (t -> f termino .)
    OR              reduce using rule 87 (t -> f termino .)
    PARENCLOSE      reduce using rule 87 (t -> f termino .)
    COLON           reduce using rule 87 (t -> f termino .)
    BRACECLOSE      reduce using rule 87 (t -> f termino .)
    TO              reduce using rule 87 (t -> f termino .)


state 167

    (88) termino -> MULTIPLY . appendMULTIPLY t
    (85) appendMULTIPLY -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    CTEINT          reduce using rule 135 (empty -> .)
    CTFLOAT         reduce using rule 135 (empty -> .)

    appendMULTIPLY                 shift and go to state 211
    empty                          shift and go to state 212

state 168

    (89) termino -> DIVIDE . appendDIVIDE t
    (86) appendDIVIDE -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    CTEINT          reduce using rule 135 (empty -> .)
    CTFLOAT         reduce using rule 135 (empty -> .)

    appendDIVIDE                   shift and go to state 213
    empty                          shift and go to state 214

state 169

    (90) termino -> empty .

    PLUS            reduce using rule 90 (termino -> empty .)
    MINUS           reduce using rule 90 (termino -> empty .)
    SEMICOLON       reduce using rule 90 (termino -> empty .)
    GREATHERTHAN    reduce using rule 90 (termino -> empty .)
    LESSTHAN        reduce using rule 90 (termino -> empty .)
    GREATHEREQUAL   reduce using rule 90 (termino -> empty .)
    LESSEQUAL       reduce using rule 90 (termino -> empty .)
    DIFFERENT       reduce using rule 90 (termino -> empty .)
    SAME            reduce using rule 90 (termino -> empty .)
    AND             reduce using rule 90 (termino -> empty .)
    OR              reduce using rule 90 (termino -> empty .)
    PARENCLOSE      reduce using rule 90 (termino -> empty .)
    COLON           reduce using rule 90 (termino -> empty .)
    BRACECLOSE      reduce using rule 90 (termino -> empty .)
    TO              reduce using rule 90 (termino -> empty .)


state 170

    (91) f -> PARENOPEN exp . PARENCLOSE
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 215
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 171

    (118) while_loop -> WHILE whileMigaja PARENOPEN . exp PARENCLOSE whileEval body whileEnd
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 216
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 172

    (122) for_loop -> FOR PARENOPEN variable . EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd

    EQUAL           shift and go to state 217


state 173

    (126) max -> MAX PARENOPEN exp . PARENCLOSE SEMICOLON
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 218
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 174

    (127) min -> MIN PARENOPEN exp . PARENCLOSE SEMICOLON
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 219
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 175

    (128) sum -> SUM PARENOPEN exp . PARENCLOSE SEMICOLON
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 220
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 176

    (134) normal -> NORMAL PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 221


state 177

    (129) param_dist -> variable .
    (130) param_dist -> variable . COLON param_dist

    PARENCLOSE      reduce using rule 129 (param_dist -> variable .)
    COLON           shift and go to state 222


state 178

    (133) uniforme -> UNIFORME PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 223


state 179

    (132) poisson -> POISSON PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 224


state 180

    (131) binomial -> BINOMIAL PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 225


state 181

    (56) dec_variabless -> type guardarTipo dec_mvar . SEMICOLON dec_variabless
    (57) dec_variabless -> type guardarTipo dec_mvar . SEMICOLON

    SEMICOLON       shift and go to state 226


state 182

    (58) dec_mvar -> ID . COLON dec_mvar
    (59) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (60) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> ID .
    (62) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE
    (63) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 227
    BRACEOPEN       shift and go to state 228
    SEMICOLON       reduce using rule 61 (dec_mvar -> ID .)


state 183

    (21) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .

    FUNCTION        reduce using rule 21 (dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .)
    MAIN            reduce using rule 21 (dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .)


state 184

    (24) exitFunc -> empty .

    FUNCTION        reduce using rule 24 (exitFunc -> empty .)
    MAIN            reduce using rule 24 (exitFunc -> empty .)


state 185

    (26) param -> typeParam ID COLON param .

    PARENCLOSE      reduce using rule 26 (param -> typeParam ID COLON param .)


state 186

    (22) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .

    FUNCTION        reduce using rule 22 (dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .)
    MAIN            reduce using rule 22 (dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .)


state 187

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE . COLON mvar
    (20) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .

    COLON           shift and go to state 229
    SEMICOLON       reduce using rule 20 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .)


state 188

    (64) assignment -> variableAssignment EQUAL exp SEMICOLON .

    IF              reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    READ            reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    ID              reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    PLOT            reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    FOR             reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    MAX             reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    MIN             reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    SUM             reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    NORMAL          reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    UNIFORME        reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    POISSON         reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    BINOMIAL        reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    INT             reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    FLOAT           reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    CHAR            reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    BRACKETCLOSE    reduce using rule 64 (assignment -> variableAssignment EQUAL exp SEMICOLON .)


state 189

    (103) condition -> IF PARENOPEN exp PARENCLOSE . cuadruploIF body ifEnd
    (104) condition -> IF PARENOPEN exp PARENCLOSE . cuadruploIF body cuadruploElse ELSE body ifEndElse
    (105) cuadruploIF -> . empty
    (135) empty -> .

    BRACKETOPEN     reduce using rule 135 (empty -> .)

    cuadruploIF                    shift and go to state 230
    empty                          shift and go to state 231

state 190

    (109) writing -> PRINT PARENOPEN writingg PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 232


state 191

    (111) writingg -> exp COLON . writingg
    (110) writingg -> . exp
    (111) writingg -> . exp COLON writingg
    (112) writingg -> . auxString
    (113) writingg -> . auxString COLON writingg
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (114) auxString -> . CTESTRING
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 144
    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 142
    writingg                       shift and go to state 233
    auxString                      shift and go to state 143
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 192

    (113) writingg -> auxString COLON . writingg
    (110) writingg -> . exp
    (111) writingg -> . exp COLON writingg
    (112) writingg -> . auxString
    (113) writingg -> . auxString COLON writingg
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (114) auxString -> . CTESTRING
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 144
    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    auxString                      shift and go to state 143
    writingg                       shift and go to state 234
    exp                            shift and go to state 142
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 193

    (117) multivariables -> variable COLON multivariables .

    SEMICOLON       reduce using rule 117 (multivariables -> variable COLON multivariables .)


state 194

    (98) variable -> ID BRACEOPEN exp . BRACECLOSE
    (99) variable -> ID BRACEOPEN exp . BRACECLOSE BRACEOPEN exp BRACECLOSE
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    BRACECLOSE      shift and go to state 235
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 195

    (65) call_func -> ID PARENOPEN call_funcc PARENCLOSE .

    IF              reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    PRINT           reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    READ            reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    ID              reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    PLOT            reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    RETURN          reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    WHILE           reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    FOR             reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    MAX             reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    MIN             reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    SUM             reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    NORMAL          reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    UNIFORME        reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    POISSON         reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    BINOMIAL        reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    INT             reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    FLOAT           reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    CHAR            reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    BRACKETCLOSE    reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    MULTIPLY        reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    DIVIDE          reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    PLUS            reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    MINUS           reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    SEMICOLON       reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    GREATHERTHAN    reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    LESSTHAN        reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    GREATHEREQUAL   reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    LESSEQUAL       reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    DIFFERENT       reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    SAME            reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    AND             reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    OR              reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    PARENCLOSE      reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    COLON           reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    BRACECLOSE      reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    TO              reduce using rule 65 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)


state 196

    (67) call_funcc -> exp COLON . call_funcc
    (66) call_funcc -> . exp
    (67) call_funcc -> . exp COLON call_funcc
    (68) call_funcc -> . empty
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (135) empty -> .
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENCLOSE      reduce using rule 135 (empty -> .)
    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 149
    call_funcc                     shift and go to state 236
    empty                          shift and go to state 150
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 197

    (101) variableAssignment -> ID BRACEOPEN exp BRACECLOSE .
    (102) variableAssignment -> ID BRACEOPEN exp BRACECLOSE . BRACEOPEN exp BRACECLOSE

    EQUAL           reduce using rule 101 (variableAssignment -> ID BRACEOPEN exp BRACECLOSE .)
    BRACEOPEN       shift and go to state 237


state 198

    (69) graph -> PLOT PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 238


state 199

    (70) exp -> exp GREATHERTHAN exp .
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 70 (exp -> exp GREATHERTHAN exp .)
    PARENCLOSE      reduce using rule 70 (exp -> exp GREATHERTHAN exp .)
    COLON           reduce using rule 70 (exp -> exp GREATHERTHAN exp .)
    BRACECLOSE      reduce using rule 70 (exp -> exp GREATHERTHAN exp .)
    TO              reduce using rule 70 (exp -> exp GREATHERTHAN exp .)
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! GREATHERTHAN    [ reduce using rule 70 (exp -> exp GREATHERTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 70 (exp -> exp GREATHERTHAN exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 70 (exp -> exp GREATHERTHAN exp .) ]
  ! LESSEQUAL       [ reduce using rule 70 (exp -> exp GREATHERTHAN exp .) ]
  ! DIFFERENT       [ reduce using rule 70 (exp -> exp GREATHERTHAN exp .) ]
  ! SAME            [ reduce using rule 70 (exp -> exp GREATHERTHAN exp .) ]
  ! AND             [ reduce using rule 70 (exp -> exp GREATHERTHAN exp .) ]
  ! OR              [ reduce using rule 70 (exp -> exp GREATHERTHAN exp .) ]


state 200

    (71) exp -> exp LESSTHAN exp .
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 71 (exp -> exp LESSTHAN exp .)
    PARENCLOSE      reduce using rule 71 (exp -> exp LESSTHAN exp .)
    COLON           reduce using rule 71 (exp -> exp LESSTHAN exp .)
    BRACECLOSE      reduce using rule 71 (exp -> exp LESSTHAN exp .)
    TO              reduce using rule 71 (exp -> exp LESSTHAN exp .)
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! GREATHERTHAN    [ reduce using rule 71 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 71 (exp -> exp LESSTHAN exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 71 (exp -> exp LESSTHAN exp .) ]
  ! LESSEQUAL       [ reduce using rule 71 (exp -> exp LESSTHAN exp .) ]
  ! DIFFERENT       [ reduce using rule 71 (exp -> exp LESSTHAN exp .) ]
  ! SAME            [ reduce using rule 71 (exp -> exp LESSTHAN exp .) ]
  ! AND             [ reduce using rule 71 (exp -> exp LESSTHAN exp .) ]
  ! OR              [ reduce using rule 71 (exp -> exp LESSTHAN exp .) ]


state 201

    (72) exp -> exp GREATHEREQUAL exp .
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 72 (exp -> exp GREATHEREQUAL exp .)
    PARENCLOSE      reduce using rule 72 (exp -> exp GREATHEREQUAL exp .)
    COLON           reduce using rule 72 (exp -> exp GREATHEREQUAL exp .)
    BRACECLOSE      reduce using rule 72 (exp -> exp GREATHEREQUAL exp .)
    TO              reduce using rule 72 (exp -> exp GREATHEREQUAL exp .)
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! GREATHERTHAN    [ reduce using rule 72 (exp -> exp GREATHEREQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 72 (exp -> exp GREATHEREQUAL exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 72 (exp -> exp GREATHEREQUAL exp .) ]
  ! LESSEQUAL       [ reduce using rule 72 (exp -> exp GREATHEREQUAL exp .) ]
  ! DIFFERENT       [ reduce using rule 72 (exp -> exp GREATHEREQUAL exp .) ]
  ! SAME            [ reduce using rule 72 (exp -> exp GREATHEREQUAL exp .) ]
  ! AND             [ reduce using rule 72 (exp -> exp GREATHEREQUAL exp .) ]
  ! OR              [ reduce using rule 72 (exp -> exp GREATHEREQUAL exp .) ]


state 202

    (73) exp -> exp LESSEQUAL exp .
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 73 (exp -> exp LESSEQUAL exp .)
    PARENCLOSE      reduce using rule 73 (exp -> exp LESSEQUAL exp .)
    COLON           reduce using rule 73 (exp -> exp LESSEQUAL exp .)
    BRACECLOSE      reduce using rule 73 (exp -> exp LESSEQUAL exp .)
    TO              reduce using rule 73 (exp -> exp LESSEQUAL exp .)
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! GREATHERTHAN    [ reduce using rule 73 (exp -> exp LESSEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 73 (exp -> exp LESSEQUAL exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 73 (exp -> exp LESSEQUAL exp .) ]
  ! LESSEQUAL       [ reduce using rule 73 (exp -> exp LESSEQUAL exp .) ]
  ! DIFFERENT       [ reduce using rule 73 (exp -> exp LESSEQUAL exp .) ]
  ! SAME            [ reduce using rule 73 (exp -> exp LESSEQUAL exp .) ]
  ! AND             [ reduce using rule 73 (exp -> exp LESSEQUAL exp .) ]
  ! OR              [ reduce using rule 73 (exp -> exp LESSEQUAL exp .) ]


state 203

    (74) exp -> exp DIFFERENT exp .
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 74 (exp -> exp DIFFERENT exp .)
    PARENCLOSE      reduce using rule 74 (exp -> exp DIFFERENT exp .)
    COLON           reduce using rule 74 (exp -> exp DIFFERENT exp .)
    BRACECLOSE      reduce using rule 74 (exp -> exp DIFFERENT exp .)
    TO              reduce using rule 74 (exp -> exp DIFFERENT exp .)
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! GREATHERTHAN    [ reduce using rule 74 (exp -> exp DIFFERENT exp .) ]
  ! LESSTHAN        [ reduce using rule 74 (exp -> exp DIFFERENT exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 74 (exp -> exp DIFFERENT exp .) ]
  ! LESSEQUAL       [ reduce using rule 74 (exp -> exp DIFFERENT exp .) ]
  ! DIFFERENT       [ reduce using rule 74 (exp -> exp DIFFERENT exp .) ]
  ! SAME            [ reduce using rule 74 (exp -> exp DIFFERENT exp .) ]
  ! AND             [ reduce using rule 74 (exp -> exp DIFFERENT exp .) ]
  ! OR              [ reduce using rule 74 (exp -> exp DIFFERENT exp .) ]


state 204

    (75) exp -> exp SAME exp .
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 75 (exp -> exp SAME exp .)
    PARENCLOSE      reduce using rule 75 (exp -> exp SAME exp .)
    COLON           reduce using rule 75 (exp -> exp SAME exp .)
    BRACECLOSE      reduce using rule 75 (exp -> exp SAME exp .)
    TO              reduce using rule 75 (exp -> exp SAME exp .)
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! GREATHERTHAN    [ reduce using rule 75 (exp -> exp SAME exp .) ]
  ! LESSTHAN        [ reduce using rule 75 (exp -> exp SAME exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 75 (exp -> exp SAME exp .) ]
  ! LESSEQUAL       [ reduce using rule 75 (exp -> exp SAME exp .) ]
  ! DIFFERENT       [ reduce using rule 75 (exp -> exp SAME exp .) ]
  ! SAME            [ reduce using rule 75 (exp -> exp SAME exp .) ]
  ! AND             [ reduce using rule 75 (exp -> exp SAME exp .) ]
  ! OR              [ reduce using rule 75 (exp -> exp SAME exp .) ]


state 205

    (76) exp -> exp AND exp .
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 76 (exp -> exp AND exp .)
    PARENCLOSE      reduce using rule 76 (exp -> exp AND exp .)
    COLON           reduce using rule 76 (exp -> exp AND exp .)
    BRACECLOSE      reduce using rule 76 (exp -> exp AND exp .)
    TO              reduce using rule 76 (exp -> exp AND exp .)
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! GREATHERTHAN    [ reduce using rule 76 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 76 (exp -> exp AND exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 76 (exp -> exp AND exp .) ]
  ! LESSEQUAL       [ reduce using rule 76 (exp -> exp AND exp .) ]
  ! DIFFERENT       [ reduce using rule 76 (exp -> exp AND exp .) ]
  ! SAME            [ reduce using rule 76 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 76 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 76 (exp -> exp AND exp .) ]


state 206

    (77) exp -> exp OR exp .
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 77 (exp -> exp OR exp .)
    PARENCLOSE      reduce using rule 77 (exp -> exp OR exp .)
    COLON           reduce using rule 77 (exp -> exp OR exp .)
    BRACECLOSE      reduce using rule 77 (exp -> exp OR exp .)
    TO              reduce using rule 77 (exp -> exp OR exp .)
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! GREATHERTHAN    [ reduce using rule 77 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 77 (exp -> exp OR exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 77 (exp -> exp OR exp .) ]
  ! LESSEQUAL       [ reduce using rule 77 (exp -> exp OR exp .) ]
  ! DIFFERENT       [ reduce using rule 77 (exp -> exp OR exp .) ]
  ! SAME            [ reduce using rule 77 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 77 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 77 (exp -> exp OR exp .) ]


state 207

    (80) m_expp -> PLUS appendPLUS . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    m_exp                          shift and go to state 239
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 208

    (83) appendPLUS -> empty .

    PARENOPEN       reduce using rule 83 (appendPLUS -> empty .)
    ID              reduce using rule 83 (appendPLUS -> empty .)
    CTEINT          reduce using rule 83 (appendPLUS -> empty .)
    CTFLOAT         reduce using rule 83 (appendPLUS -> empty .)


state 209

    (81) m_expp -> MINUS appendMINUS . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    m_exp                          shift and go to state 240
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 210

    (84) appendMINUS -> empty .

    PARENOPEN       reduce using rule 84 (appendMINUS -> empty .)
    ID              reduce using rule 84 (appendMINUS -> empty .)
    CTEINT          reduce using rule 84 (appendMINUS -> empty .)
    CTFLOAT         reduce using rule 84 (appendMINUS -> empty .)


state 211

    (88) termino -> MULTIPLY appendMULTIPLY . t
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    t                              shift and go to state 241
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 212

    (85) appendMULTIPLY -> empty .

    PARENOPEN       reduce using rule 85 (appendMULTIPLY -> empty .)
    ID              reduce using rule 85 (appendMULTIPLY -> empty .)
    CTEINT          reduce using rule 85 (appendMULTIPLY -> empty .)
    CTFLOAT         reduce using rule 85 (appendMULTIPLY -> empty .)


state 213

    (89) termino -> DIVIDE appendDIVIDE . t
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    t                              shift and go to state 242
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 214

    (86) appendDIVIDE -> empty .

    PARENOPEN       reduce using rule 86 (appendDIVIDE -> empty .)
    ID              reduce using rule 86 (appendDIVIDE -> empty .)
    CTEINT          reduce using rule 86 (appendDIVIDE -> empty .)
    CTFLOAT         reduce using rule 86 (appendDIVIDE -> empty .)


state 215

    (91) f -> PARENOPEN exp PARENCLOSE .

    MULTIPLY        reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    DIVIDE          reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    PLUS            reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    MINUS           reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    SEMICOLON       reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    GREATHERTHAN    reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    LESSTHAN        reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    GREATHEREQUAL   reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    LESSEQUAL       reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    DIFFERENT       reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    SAME            reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    AND             reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    OR              reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    PARENCLOSE      reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    COLON           reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    BRACECLOSE      reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)
    TO              reduce using rule 91 (f -> PARENOPEN exp PARENCLOSE .)


state 216

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp . PARENCLOSE whileEval body whileEnd
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 243
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 217

    (122) for_loop -> FOR PARENOPEN variable EQUAL . exp guardarValorFor TO exp PARENCLOSE body forEnd
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    variable                       shift and go to state 121
    exp                            shift and go to state 244
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    call_func                      shift and go to state 122

state 218

    (126) max -> MAX PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 245


state 219

    (127) min -> MIN PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 246


state 220

    (128) sum -> SUM PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 247


state 221

    (134) normal -> NORMAL PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 248


state 222

    (130) param_dist -> variable COLON . param_dist
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 109

    variable                       shift and go to state 177
    param_dist                     shift and go to state 249

state 223

    (133) uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 250


state 224

    (132) poisson -> POISSON PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 251


state 225

    (131) binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 252


state 226

    (56) dec_variabless -> type guardarTipo dec_mvar SEMICOLON . dec_variabless
    (57) dec_variabless -> type guardarTipo dec_mvar SEMICOLON .
    (56) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (57) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (31) type -> . INT
    (32) type -> . FLOAT
    (33) type -> . CHAR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    IF              reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    PRINT           reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    READ            reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    ID              reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    PLOT            reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    RETURN          reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    WHILE           reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    FOR             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    MAX             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    MIN             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    SUM             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    NORMAL          reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    UNIFORME        reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    POISSON         reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    BINOMIAL        reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    BRACKETCLOSE    reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

  ! INT             [ reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]
  ! CHAR            [ reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]

    type                           shift and go to state 96
    dec_variabless                 shift and go to state 253

state 227

    (58) dec_mvar -> ID COLON . dec_mvar
    (58) dec_mvar -> . ID COLON dec_mvar
    (59) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (60) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> . ID
    (62) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 182

    dec_mvar                       shift and go to state 254

state 228

    (59) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE COLON dec_mvar
    (60) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (62) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE
    (63) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    CTEINT          shift and go to state 255


state 229

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON . mvar
    (15) mvar -> . ID COLON mvar
    (16) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID
    (19) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 34

    mvar                           shift and go to state 256

state 230

    (103) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF . body ifEnd
    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF . body cuadruploElse ELSE body ifEndElse
    (34) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 50

    body                           shift and go to state 257

state 231

    (105) cuadruploIF -> empty .

    BRACKETOPEN     reduce using rule 105 (cuadruploIF -> empty .)


state 232

    (109) writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .

    IF              reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    READ            reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    ID              reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    INT             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)


state 233

    (111) writingg -> exp COLON writingg .

    PARENCLOSE      reduce using rule 111 (writingg -> exp COLON writingg .)


state 234

    (113) writingg -> auxString COLON writingg .

    PARENCLOSE      reduce using rule 113 (writingg -> auxString COLON writingg .)


state 235

    (98) variable -> ID BRACEOPEN exp BRACECLOSE .
    (99) variable -> ID BRACEOPEN exp BRACECLOSE . BRACEOPEN exp BRACECLOSE

    COLON           reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    SEMICOLON       reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    MULTIPLY        reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    DIVIDE          reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    PLUS            reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    MINUS           reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    GREATHERTHAN    reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    LESSTHAN        reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    GREATHEREQUAL   reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    LESSEQUAL       reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    DIFFERENT       reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    SAME            reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    AND             reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    OR              reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    PARENCLOSE      reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    BRACECLOSE      reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    EQUAL           reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    TO              reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    BRACEOPEN       shift and go to state 258


state 236

    (67) call_funcc -> exp COLON call_funcc .

    PARENCLOSE      reduce using rule 67 (call_funcc -> exp COLON call_funcc .)


state 237

    (102) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN . exp BRACECLOSE
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 259
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 238

    (69) graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 69 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)


state 239

    (80) m_expp -> PLUS appendPLUS m_exp .

    SEMICOLON       reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    GREATHERTHAN    reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    LESSTHAN        reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    GREATHEREQUAL   reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    LESSEQUAL       reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    DIFFERENT       reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    SAME            reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    AND             reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    OR              reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    PARENCLOSE      reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    COLON           reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    BRACECLOSE      reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)
    TO              reduce using rule 80 (m_expp -> PLUS appendPLUS m_exp .)


state 240

    (81) m_expp -> MINUS appendMINUS m_exp .

    SEMICOLON       reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    GREATHERTHAN    reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    LESSTHAN        reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    GREATHEREQUAL   reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    LESSEQUAL       reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    DIFFERENT       reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    SAME            reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    AND             reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    OR              reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    PARENCLOSE      reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    COLON           reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    BRACECLOSE      reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)
    TO              reduce using rule 81 (m_expp -> MINUS appendMINUS m_exp .)


state 241

    (88) termino -> MULTIPLY appendMULTIPLY t .

    PLUS            reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    MINUS           reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    SEMICOLON       reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    GREATHERTHAN    reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    LESSTHAN        reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    GREATHEREQUAL   reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    LESSEQUAL       reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    DIFFERENT       reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    SAME            reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    AND             reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    OR              reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    PARENCLOSE      reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    COLON           reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    BRACECLOSE      reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)
    TO              reduce using rule 88 (termino -> MULTIPLY appendMULTIPLY t .)


state 242

    (89) termino -> DIVIDE appendDIVIDE t .

    PLUS            reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    MINUS           reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    SEMICOLON       reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    GREATHERTHAN    reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    LESSTHAN        reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    GREATHEREQUAL   reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    LESSEQUAL       reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    DIFFERENT       reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    SAME            reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    AND             reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    OR              reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    PARENCLOSE      reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    COLON           reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    BRACECLOSE      reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)
    TO              reduce using rule 89 (termino -> DIVIDE appendDIVIDE t .)


state 243

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE . whileEval body whileEnd
    (120) whileEval -> . empty
    (135) empty -> .

    BRACKETOPEN     reduce using rule 135 (empty -> .)

    whileEval                      shift and go to state 260
    empty                          shift and go to state 261

state 244

    (122) for_loop -> FOR PARENOPEN variable EQUAL exp . guardarValorFor TO exp PARENCLOSE body forEnd
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp
    (123) guardarValorFor -> . empty
    (135) empty -> .

    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    TO              reduce using rule 135 (empty -> .)

    guardarValorFor                shift and go to state 262
    empty                          shift and go to state 263

state 245

    (126) max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)


state 246

    (127) min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)


state 247

    (128) sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)


state 248

    (134) normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 249

    (130) param_dist -> variable COLON param_dist .

    PARENCLOSE      reduce using rule 130 (param_dist -> variable COLON param_dist .)


state 250

    (133) uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 251

    (132) poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 252

    (131) binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 253

    (56) dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .

    IF              reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    PRINT           reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    READ            reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    ID              reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    PLOT            reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    RETURN          reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    WHILE           reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    FOR             reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    MAX             reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    MIN             reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    SUM             reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    NORMAL          reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    UNIFORME        reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    POISSON         reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    BINOMIAL        reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    INT             reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    FLOAT           reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    CHAR            reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    BRACKETCLOSE    reduce using rule 56 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)


state 254

    (58) dec_mvar -> ID COLON dec_mvar .

    SEMICOLON       reduce using rule 58 (dec_mvar -> ID COLON dec_mvar .)


state 255

    (59) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE COLON dec_mvar
    (60) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (62) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE
    (63) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    BRACECLOSE      shift and go to state 264


state 256

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar .

    SEMICOLON       reduce using rule 17 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar .)


state 257

    (103) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body . ifEnd
    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body . cuadruploElse ELSE body ifEndElse
    (106) ifEnd -> . empty
    (107) cuadruploElse -> . empty
    (135) empty -> .

    IF              reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ            reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    PLOT            reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    MAX             reduce using rule 135 (empty -> .)
    MIN             reduce using rule 135 (empty -> .)
    SUM             reduce using rule 135 (empty -> .)
    NORMAL          reduce using rule 135 (empty -> .)
    UNIFORME        reduce using rule 135 (empty -> .)
    POISSON         reduce using rule 135 (empty -> .)
    BINOMIAL        reduce using rule 135 (empty -> .)
    INT             reduce using rule 135 (empty -> .)
    FLOAT           reduce using rule 135 (empty -> .)
    CHAR            reduce using rule 135 (empty -> .)
    BRACKETCLOSE    reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)

    ifEnd                          shift and go to state 265
    cuadruploElse                  shift and go to state 266
    empty                          shift and go to state 267

state 258

    (99) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN . exp BRACECLOSE
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    exp                            shift and go to state 268
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    variable                       shift and go to state 121
    call_func                      shift and go to state 122

state 259

    (102) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp . BRACECLOSE
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    BRACECLOSE      shift and go to state 269
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 260

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval . body whileEnd
    (34) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 50

    body                           shift and go to state 270

state 261

    (120) whileEval -> empty .

    BRACKETOPEN     reduce using rule 120 (whileEval -> empty .)


state 262

    (122) for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor . TO exp PARENCLOSE body forEnd

    TO              shift and go to state 271


state 263

    (123) guardarValorFor -> empty .

    TO              reduce using rule 123 (guardarValorFor -> empty .)


state 264

    (59) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . COLON dec_mvar
    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (62) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE .
    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 273
    BRACEOPEN       shift and go to state 272
    SEMICOLON       reduce using rule 62 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE .)


state 265

    (103) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .

    IF              reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    PRINT           reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    READ            reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    ID              reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    PLOT            reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    RETURN          reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    WHILE           reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    FOR             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    MAX             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    MIN             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    SUM             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    NORMAL          reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    UNIFORME        reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    POISSON         reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    BINOMIAL        reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    INT             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    FLOAT           reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    CHAR            reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    BRACKETCLOSE    reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)


state 266

    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse . ELSE body ifEndElse

    ELSE            shift and go to state 274


state 267

    (106) ifEnd -> empty .
    (107) cuadruploElse -> empty .

    IF              reduce using rule 106 (ifEnd -> empty .)
    PRINT           reduce using rule 106 (ifEnd -> empty .)
    READ            reduce using rule 106 (ifEnd -> empty .)
    ID              reduce using rule 106 (ifEnd -> empty .)
    PLOT            reduce using rule 106 (ifEnd -> empty .)
    RETURN          reduce using rule 106 (ifEnd -> empty .)
    WHILE           reduce using rule 106 (ifEnd -> empty .)
    FOR             reduce using rule 106 (ifEnd -> empty .)
    MAX             reduce using rule 106 (ifEnd -> empty .)
    MIN             reduce using rule 106 (ifEnd -> empty .)
    SUM             reduce using rule 106 (ifEnd -> empty .)
    NORMAL          reduce using rule 106 (ifEnd -> empty .)
    UNIFORME        reduce using rule 106 (ifEnd -> empty .)
    POISSON         reduce using rule 106 (ifEnd -> empty .)
    BINOMIAL        reduce using rule 106 (ifEnd -> empty .)
    INT             reduce using rule 106 (ifEnd -> empty .)
    FLOAT           reduce using rule 106 (ifEnd -> empty .)
    CHAR            reduce using rule 106 (ifEnd -> empty .)
    BRACKETCLOSE    reduce using rule 106 (ifEnd -> empty .)
    ELSE            reduce using rule 107 (cuadruploElse -> empty .)


state 268

    (99) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp . BRACECLOSE
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    BRACECLOSE      shift and go to state 275
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 269

    (102) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .

    EQUAL           reduce using rule 102 (variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)


state 270

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body . whileEnd
    (121) whileEnd -> . empty
    (135) empty -> .

    IF              reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ            reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    PLOT            reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    MAX             reduce using rule 135 (empty -> .)
    MIN             reduce using rule 135 (empty -> .)
    SUM             reduce using rule 135 (empty -> .)
    NORMAL          reduce using rule 135 (empty -> .)
    UNIFORME        reduce using rule 135 (empty -> .)
    POISSON         reduce using rule 135 (empty -> .)
    BINOMIAL        reduce using rule 135 (empty -> .)
    INT             reduce using rule 135 (empty -> .)
    FLOAT           reduce using rule 135 (empty -> .)
    CHAR            reduce using rule 135 (empty -> .)
    BRACKETCLOSE    reduce using rule 135 (empty -> .)

    whileEnd                       shift and go to state 276
    empty                          shift and go to state 277

state 271

    (122) for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO . exp PARENCLOSE body forEnd
    (70) exp -> . exp GREATHERTHAN exp
    (71) exp -> . exp LESSTHAN exp
    (72) exp -> . exp GREATHEREQUAL exp
    (73) exp -> . exp LESSEQUAL exp
    (74) exp -> . exp DIFFERENT exp
    (75) exp -> . exp SAME exp
    (76) exp -> . exp AND exp
    (77) exp -> . exp OR exp
    (78) exp -> . m_exp
    (79) m_exp -> . t m_expp
    (87) t -> . f termino
    (91) f -> . PARENOPEN exp PARENCLOSE
    (92) f -> . ID
    (93) f -> . CTEINT
    (94) f -> . CTFLOAT
    (95) f -> . variable
    (96) f -> . call_func
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (65) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 117
    ID              shift and go to state 118
    CTEINT          shift and go to state 119
    CTFLOAT         shift and go to state 120

    variable                       shift and go to state 121
    exp                            shift and go to state 278
    m_exp                          shift and go to state 114
    t                              shift and go to state 115
    f                              shift and go to state 116
    call_func                      shift and go to state 122

state 272

    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE

    CTEINT          shift and go to state 279


state 273

    (59) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON . dec_mvar
    (58) dec_mvar -> . ID COLON dec_mvar
    (59) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (60) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> . ID
    (62) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 182

    dec_mvar                       shift and go to state 280

state 274

    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE . body ifEndElse
    (34) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 50

    body                           shift and go to state 281

state 275

    (99) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .

    COLON           reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    SEMICOLON       reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    MULTIPLY        reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    DIVIDE          reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    PLUS            reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    MINUS           reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    GREATHERTHAN    reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    LESSTHAN        reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    GREATHEREQUAL   reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    LESSEQUAL       reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    DIFFERENT       reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    SAME            reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    AND             reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    OR              reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    PARENCLOSE      reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    BRACECLOSE      reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    EQUAL           reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    TO              reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)


state 276

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .

    IF              reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    PRINT           reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    READ            reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    ID              reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    PLOT            reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    RETURN          reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    WHILE           reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    FOR             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    MAX             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    MIN             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    SUM             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    NORMAL          reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    UNIFORME        reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    POISSON         reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    BINOMIAL        reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    INT             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    FLOAT           reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    CHAR            reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    BRACKETCLOSE    reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)


state 277

    (121) whileEnd -> empty .

    IF              reduce using rule 121 (whileEnd -> empty .)
    PRINT           reduce using rule 121 (whileEnd -> empty .)
    READ            reduce using rule 121 (whileEnd -> empty .)
    ID              reduce using rule 121 (whileEnd -> empty .)
    PLOT            reduce using rule 121 (whileEnd -> empty .)
    RETURN          reduce using rule 121 (whileEnd -> empty .)
    WHILE           reduce using rule 121 (whileEnd -> empty .)
    FOR             reduce using rule 121 (whileEnd -> empty .)
    MAX             reduce using rule 121 (whileEnd -> empty .)
    MIN             reduce using rule 121 (whileEnd -> empty .)
    SUM             reduce using rule 121 (whileEnd -> empty .)
    NORMAL          reduce using rule 121 (whileEnd -> empty .)
    UNIFORME        reduce using rule 121 (whileEnd -> empty .)
    POISSON         reduce using rule 121 (whileEnd -> empty .)
    BINOMIAL        reduce using rule 121 (whileEnd -> empty .)
    INT             reduce using rule 121 (whileEnd -> empty .)
    FLOAT           reduce using rule 121 (whileEnd -> empty .)
    CHAR            reduce using rule 121 (whileEnd -> empty .)
    BRACKETCLOSE    reduce using rule 121 (whileEnd -> empty .)


state 278

    (122) for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp . PARENCLOSE body forEnd
    (70) exp -> exp . GREATHERTHAN exp
    (71) exp -> exp . LESSTHAN exp
    (72) exp -> exp . GREATHEREQUAL exp
    (73) exp -> exp . LESSEQUAL exp
    (74) exp -> exp . DIFFERENT exp
    (75) exp -> exp . SAME exp
    (76) exp -> exp . AND exp
    (77) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 282
    GREATHERTHAN    shift and go to state 154
    LESSTHAN        shift and go to state 155
    GREATHEREQUAL   shift and go to state 156
    LESSEQUAL       shift and go to state 157
    DIFFERENT       shift and go to state 158
    SAME            shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 279

    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE

    BRACECLOSE      shift and go to state 283


state 280

    (59) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .

    SEMICOLON       reduce using rule 59 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .)


state 281

    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body . ifEndElse
    (108) ifEndElse -> . empty
    (135) empty -> .

    IF              reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ            reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    PLOT            reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    MAX             reduce using rule 135 (empty -> .)
    MIN             reduce using rule 135 (empty -> .)
    SUM             reduce using rule 135 (empty -> .)
    NORMAL          reduce using rule 135 (empty -> .)
    UNIFORME        reduce using rule 135 (empty -> .)
    POISSON         reduce using rule 135 (empty -> .)
    BINOMIAL        reduce using rule 135 (empty -> .)
    INT             reduce using rule 135 (empty -> .)
    FLOAT           reduce using rule 135 (empty -> .)
    CHAR            reduce using rule 135 (empty -> .)
    BRACKETCLOSE    reduce using rule 135 (empty -> .)

    ifEndElse                      shift and go to state 284
    empty                          shift and go to state 285

state 282

    (122) for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE . body forEnd
    (34) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 50

    body                           shift and go to state 286

state 283

    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE . COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .

    COLON           shift and go to state 287
    SEMICOLON       reduce using rule 63 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .)


state 284

    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .

    IF              reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    PRINT           reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    READ            reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    ID              reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    PLOT            reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    RETURN          reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    WHILE           reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    FOR             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    MAX             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    MIN             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    SUM             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    NORMAL          reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    UNIFORME        reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    POISSON         reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    BINOMIAL        reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    INT             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    FLOAT           reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    CHAR            reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    BRACKETCLOSE    reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)


state 285

    (108) ifEndElse -> empty .

    IF              reduce using rule 108 (ifEndElse -> empty .)
    PRINT           reduce using rule 108 (ifEndElse -> empty .)
    READ            reduce using rule 108 (ifEndElse -> empty .)
    ID              reduce using rule 108 (ifEndElse -> empty .)
    PLOT            reduce using rule 108 (ifEndElse -> empty .)
    RETURN          reduce using rule 108 (ifEndElse -> empty .)
    WHILE           reduce using rule 108 (ifEndElse -> empty .)
    FOR             reduce using rule 108 (ifEndElse -> empty .)
    MAX             reduce using rule 108 (ifEndElse -> empty .)
    MIN             reduce using rule 108 (ifEndElse -> empty .)
    SUM             reduce using rule 108 (ifEndElse -> empty .)
    NORMAL          reduce using rule 108 (ifEndElse -> empty .)
    UNIFORME        reduce using rule 108 (ifEndElse -> empty .)
    POISSON         reduce using rule 108 (ifEndElse -> empty .)
    BINOMIAL        reduce using rule 108 (ifEndElse -> empty .)
    INT             reduce using rule 108 (ifEndElse -> empty .)
    FLOAT           reduce using rule 108 (ifEndElse -> empty .)
    CHAR            reduce using rule 108 (ifEndElse -> empty .)
    BRACKETCLOSE    reduce using rule 108 (ifEndElse -> empty .)


state 286

    (122) for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body . forEnd
    (124) forEnd -> . empty
    (135) empty -> .

    IF              reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ            reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    PLOT            reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    MAX             reduce using rule 135 (empty -> .)
    MIN             reduce using rule 135 (empty -> .)
    SUM             reduce using rule 135 (empty -> .)
    NORMAL          reduce using rule 135 (empty -> .)
    UNIFORME        reduce using rule 135 (empty -> .)
    POISSON         reduce using rule 135 (empty -> .)
    BINOMIAL        reduce using rule 135 (empty -> .)
    INT             reduce using rule 135 (empty -> .)
    FLOAT           reduce using rule 135 (empty -> .)
    CHAR            reduce using rule 135 (empty -> .)
    BRACKETCLOSE    reduce using rule 135 (empty -> .)

    forEnd                         shift and go to state 288
    empty                          shift and go to state 289

state 287

    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON . dec_mvar
    (58) dec_mvar -> . ID COLON dec_mvar
    (59) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (60) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> . ID
    (62) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 182

    dec_mvar                       shift and go to state 290

state 288

    (122) for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .

    IF              reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    PRINT           reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    READ            reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    ID              reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    PLOT            reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    RETURN          reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    WHILE           reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    FOR             reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    MAX             reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    MIN             reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    SUM             reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    NORMAL          reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    UNIFORME        reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    POISSON         reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    BINOMIAL        reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    INT             reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    FLOAT           reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    CHAR            reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    BRACKETCLOSE    reduce using rule 122 (for_loop -> FOR PARENOPEN variable EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)


state 289

    (124) forEnd -> empty .

    IF              reduce using rule 124 (forEnd -> empty .)
    PRINT           reduce using rule 124 (forEnd -> empty .)
    READ            reduce using rule 124 (forEnd -> empty .)
    ID              reduce using rule 124 (forEnd -> empty .)
    PLOT            reduce using rule 124 (forEnd -> empty .)
    RETURN          reduce using rule 124 (forEnd -> empty .)
    WHILE           reduce using rule 124 (forEnd -> empty .)
    FOR             reduce using rule 124 (forEnd -> empty .)
    MAX             reduce using rule 124 (forEnd -> empty .)
    MIN             reduce using rule 124 (forEnd -> empty .)
    SUM             reduce using rule 124 (forEnd -> empty .)
    NORMAL          reduce using rule 124 (forEnd -> empty .)
    UNIFORME        reduce using rule 124 (forEnd -> empty .)
    POISSON         reduce using rule 124 (forEnd -> empty .)
    BINOMIAL        reduce using rule 124 (forEnd -> empty .)
    INT             reduce using rule 124 (forEnd -> empty .)
    FLOAT           reduce using rule 124 (forEnd -> empty .)
    CHAR            reduce using rule 124 (forEnd -> empty .)
    BRACKETCLOSE    reduce using rule 124 (forEnd -> empty .)


state 290

    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .

    SEMICOLON       reduce using rule 60 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GREATHERTHAN in state 199 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 199 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 199 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 199 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 199 resolved as shift
WARNING: shift/reduce conflict for SAME in state 199 resolved as shift
WARNING: shift/reduce conflict for AND in state 199 resolved as shift
WARNING: shift/reduce conflict for OR in state 199 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 200 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 200 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 200 resolved as shift
WARNING: shift/reduce conflict for SAME in state 200 resolved as shift
WARNING: shift/reduce conflict for AND in state 200 resolved as shift
WARNING: shift/reduce conflict for OR in state 200 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 201 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 201 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 201 resolved as shift
WARNING: shift/reduce conflict for SAME in state 201 resolved as shift
WARNING: shift/reduce conflict for AND in state 201 resolved as shift
WARNING: shift/reduce conflict for OR in state 201 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 202 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 202 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 202 resolved as shift
WARNING: shift/reduce conflict for SAME in state 202 resolved as shift
WARNING: shift/reduce conflict for AND in state 202 resolved as shift
WARNING: shift/reduce conflict for OR in state 202 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 203 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 203 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 203 resolved as shift
WARNING: shift/reduce conflict for SAME in state 203 resolved as shift
WARNING: shift/reduce conflict for AND in state 203 resolved as shift
WARNING: shift/reduce conflict for OR in state 203 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 204 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 204 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 204 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 204 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 204 resolved as shift
WARNING: shift/reduce conflict for SAME in state 204 resolved as shift
WARNING: shift/reduce conflict for AND in state 204 resolved as shift
WARNING: shift/reduce conflict for OR in state 204 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 205 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 205 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 205 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 205 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 205 resolved as shift
WARNING: shift/reduce conflict for SAME in state 205 resolved as shift
WARNING: shift/reduce conflict for AND in state 205 resolved as shift
WARNING: shift/reduce conflict for OR in state 205 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 206 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 206 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 206 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 206 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 206 resolved as shift
WARNING: shift/reduce conflict for SAME in state 206 resolved as shift
WARNING: shift/reduce conflict for AND in state 206 resolved as shift
WARNING: shift/reduce conflict for OR in state 206 resolved as shift
WARNING: shift/reduce conflict for INT in state 226 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 226 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 226 resolved as shift
WARNING: reduce/reduce conflict in state 60 resolved using rule (bodyy -> statement)
WARNING: rejected rule (empty -> <empty>) in state 60
WARNING: reduce/reduce conflict in state 118 resolved using rule (f -> ID)
WARNING: rejected rule (variable -> ID) in state 118
