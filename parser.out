Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start_program
Rule 1     start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body
Rule 2     start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body
Rule 3     start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body
Rule 4     start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body
Rule 5     cuadruploMain -> empty
Rule 6     multiple_funcs -> dec_func
Rule 7     multiple_funcs -> dec_func multiple_funcs
Rule 8     main_body -> MAIN PARENOPEN PARENCLOSE gotoMain body
Rule 9     gotoMain -> empty
Rule 10    vars -> VAR varss
Rule 11    varss -> type mvar SEMICOLON varss
Rule 12    varss -> type mvar SEMICOLON
Rule 13    mvar -> ID COLON mvar
Rule 14    mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
Rule 15    mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
Rule 16    mvar -> ID
Rule 17    mvar -> ID BRACEOPEN CTEINT BRACECLOSE
Rule 18    mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE
Rule 19    dec_func -> FUNCTION type ID PARENOPEN param PARENCLOSE body
Rule 20    dec_func -> FUNCTION VOID ID PARENOPEN param PARENCLOSE body
Rule 21    param -> type variable
Rule 22    param -> type variable COLON param
Rule 23    param -> empty
Rule 24    type -> INT
Rule 25    type -> FLOAT
Rule 26    type -> CHAR
Rule 27    body -> BRACKETOPEN bodyy BRACKETCLOSE
Rule 28    bodyy -> statement
Rule 29    bodyy -> statement bodyy
Rule 30    bodyy -> empty
Rule 31    statement -> dec_variables
Rule 32    statement -> assignment
Rule 33    statement -> condition
Rule 34    statement -> writing
Rule 35    statement -> reading
Rule 36    statement -> call_func
Rule 37    statement -> graph
Rule 38    statement -> return
Rule 39    statement -> while_loop
Rule 40    statement -> for_loop
Rule 41    statement -> max
Rule 42    statement -> min
Rule 43    statement -> sum
Rule 44    statement -> normal
Rule 45    statement -> uniforme
Rule 46    statement -> poisson
Rule 47    statement -> binomial
Rule 48    dec_variables -> dec_variabless
Rule 49    dec_variabless -> type dec_mvar SEMICOLON dec_variabless
Rule 50    dec_variabless -> type dec_mvar SEMICOLON
Rule 51    dec_mvar -> ID COLON dec_mvar
Rule 52    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
Rule 53    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
Rule 54    dec_mvar -> ID
Rule 55    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE
Rule 56    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE
Rule 57    assignment -> variable EQUAL exp SEMICOLON
Rule 58    call_func -> ID PARENOPEN call_funcc PARENCLOSE
Rule 59    call_funcc -> exp
Rule 60    call_funcc -> exp COLON call_funcc
Rule 61    call_funcc -> empty
Rule 62    graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON
Rule 63    exp -> exp GREATHERTHAN exp
Rule 64    exp -> exp LESSTHAN exp
Rule 65    exp -> exp GREATHEREQUAL exp
Rule 66    exp -> exp LESSEQUAL exp
Rule 67    exp -> exp DIFFERENT exp
Rule 68    exp -> exp SAME exp
Rule 69    exp -> exp AND exp
Rule 70    exp -> exp OR exp
Rule 71    exp -> m_exp
Rule 72    m_exp -> t m_expp
Rule 73    m_expp -> PLUS appendPLUS m_exp
Rule 74    m_expp -> MINUS appendMINUS m_exp
Rule 75    m_expp -> empty
Rule 76    appendPLUS -> empty
Rule 77    appendMINUS -> empty
Rule 78    appendMULTIPLY -> empty
Rule 79    appendDIVIDE -> empty
Rule 80    t -> f termino
Rule 81    termino -> MULTIPLY appendMULTIPLY t
Rule 82    termino -> DIVIDE appendDIVIDE t
Rule 83    termino -> empty
Rule 84    f -> PARENOPEN exp PARENCLOSE
Rule 85    f -> ID
Rule 86    f -> CTEINT
Rule 87    f -> CTFLOAT
Rule 88    f -> variable
Rule 89    f -> call_func
Rule 90    variable -> ID
Rule 91    variable -> ID BRACEOPEN exp BRACECLOSE
Rule 92    variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
Rule 93    condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
Rule 94    condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
Rule 95    cuadruploIF -> empty
Rule 96    ifEnd -> empty
Rule 97    cuadruploElse -> empty
Rule 98    ifEndElse -> empty
Rule 99    writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
Rule 100   writingg -> exp
Rule 101   writingg -> exp COLON writingg
Rule 102   writingg -> auxString
Rule 103   writingg -> auxString COLON writingg
Rule 104   auxString -> CTESTRING
Rule 105   reading -> READ multivariables SEMICOLON
Rule 106   multivariables -> variable
Rule 107   multivariables -> variable COLON multivariables
Rule 108   while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
Rule 109   whileMigaja -> empty
Rule 110   whileEval -> empty
Rule 111   whileEnd -> empty
Rule 112   for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body
Rule 113   for_assignment -> variable EQUAL exp
Rule 114   return -> RETURN exp SEMICOLON
Rule 115   max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON
Rule 116   min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON
Rule 117   sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON
Rule 118   param_dist -> variable
Rule 119   param_dist -> variable COLON param_dist
Rule 120   binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 121   poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 122   uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 123   normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 124   empty -> <empty>

Terminals, with rules where they appear

AND                  : 69
BINOMIAL             : 120
BRACECLOSE           : 14 15 15 17 18 18 52 53 53 55 56 56 91 92 92
BRACEOPEN            : 14 15 15 17 18 18 52 53 53 55 56 56 91 92 92
BRACKETCLOSE         : 27
BRACKETOPEN          : 27
CHAR                 : 26
COLON                : 13 14 15 22 51 52 53 60 101 103 107 119
CTEINT               : 14 15 15 17 18 18 52 53 53 55 56 56 86
CTESTRING            : 104
CTFLOAT              : 87
DIFFERENT            : 67
DIVIDE               : 82
ELSE                 : 94
EQUAL                : 57 113
FLOAT                : 25
FOR                  : 112
FUNCTION             : 19 20
GREATHEREQUAL        : 65
GREATHERTHAN         : 63
ID                   : 1 2 3 4 13 14 15 16 17 18 19 20 51 52 53 54 55 56 58 85 90 91 92
IF                   : 93 94
INT                  : 24
LESSEQUAL            : 66
LESSTHAN             : 64
MAIN                 : 8
MAX                  : 115
MIN                  : 116
MINUS                : 74
MULTIPLY             : 81
NORMAL               : 123
OR                   : 70
PARENCLOSE           : 8 19 20 58 62 84 93 94 99 108 112 115 116 117 120 121 122 123
PARENOPEN            : 8 19 20 58 62 84 93 94 99 108 112 115 116 117 120 121 122 123
PLOT                 : 62
PLUS                 : 73
POISSON              : 121
PRINT                : 99
PROGRAM              : 1 2 3 4
READ                 : 105
RETURN               : 114
SAME                 : 68
SEMICOLON            : 1 2 3 4 11 12 49 50 57 62 99 105 112 112 114 115 116 117 120 121 122 123
SUM                  : 117
UNIFORME             : 122
VAR                  : 10
VOID                 : 20
WHILE                : 108
error                : 

Nonterminals, with rules where they appear

appendDIVIDE         : 82
appendMINUS          : 74
appendMULTIPLY       : 81
appendPLUS           : 73
assignment           : 32
auxString            : 102 103
binomial             : 47
body                 : 8 19 20 93 94 94 108 112
bodyy                : 27 29
call_func            : 36 89
call_funcc           : 58 60
condition            : 33
cuadruploElse        : 94
cuadruploIF          : 93 94
cuadruploMain        : 1 2 3 4
dec_func             : 6 7
dec_mvar             : 49 50 51 52 53
dec_variables        : 31
dec_variabless       : 48 49
empty                : 5 9 23 30 61 75 76 77 78 79 83 95 96 97 98 109 110 111
exp                  : 57 59 60 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 84 91 92 92 93 94 100 101 108 112 113 114 115 116 117
f                    : 80
for_assignment       : 112 112
for_loop             : 40
gotoMain             : 8
graph                : 37
ifEnd                : 93
ifEndElse            : 94
m_exp                : 71 73 74
m_expp               : 72
main_body            : 1 2 3 4
max                  : 41
min                  : 42
multiple_funcs       : 1 3 7
multivariables       : 105 107
mvar                 : 11 12 13 14 15
normal               : 44
param                : 19 20 22
param_dist           : 119 120 121 122 123
poisson              : 46
reading              : 35
return               : 38
start_program        : 0
statement            : 28 29
sum                  : 43
t                    : 72 81 82
termino              : 80
type                 : 11 12 19 21 22 49 50
uniforme             : 45
variable             : 21 22 57 88 106 107 113 118 119
vars                 : 1 2
varss                : 10 11
whileEnd             : 108
whileEval            : 108
whileMigaja          : 108
while_loop           : 39
writing              : 34
writingg             : 99 101 103

Parsing method: LALR

state 0

    (0) S' -> . start_program
    (1) start_program -> . cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body
    (2) start_program -> . cuadruploMain PROGRAM ID SEMICOLON vars main_body
    (3) start_program -> . cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body
    (4) start_program -> . cuadruploMain PROGRAM ID SEMICOLON main_body
    (5) cuadruploMain -> . empty
    (124) empty -> .

    PROGRAM         reduce using rule 124 (empty -> .)

    start_program                  shift and go to state 1
    cuadruploMain                  shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start_program .



state 2

    (1) start_program -> cuadruploMain . PROGRAM ID SEMICOLON vars multiple_funcs main_body
    (2) start_program -> cuadruploMain . PROGRAM ID SEMICOLON vars main_body
    (3) start_program -> cuadruploMain . PROGRAM ID SEMICOLON multiple_funcs main_body
    (4) start_program -> cuadruploMain . PROGRAM ID SEMICOLON main_body

    PROGRAM         shift and go to state 4


state 3

    (5) cuadruploMain -> empty .

    PROGRAM         reduce using rule 5 (cuadruploMain -> empty .)


state 4

    (1) start_program -> cuadruploMain PROGRAM . ID SEMICOLON vars multiple_funcs main_body
    (2) start_program -> cuadruploMain PROGRAM . ID SEMICOLON vars main_body
    (3) start_program -> cuadruploMain PROGRAM . ID SEMICOLON multiple_funcs main_body
    (4) start_program -> cuadruploMain PROGRAM . ID SEMICOLON main_body

    ID              shift and go to state 5


state 5

    (1) start_program -> cuadruploMain PROGRAM ID . SEMICOLON vars multiple_funcs main_body
    (2) start_program -> cuadruploMain PROGRAM ID . SEMICOLON vars main_body
    (3) start_program -> cuadruploMain PROGRAM ID . SEMICOLON multiple_funcs main_body
    (4) start_program -> cuadruploMain PROGRAM ID . SEMICOLON main_body

    SEMICOLON       shift and go to state 6


state 6

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON . vars multiple_funcs main_body
    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON . vars main_body
    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON . multiple_funcs main_body
    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON . main_body
    (10) vars -> . VAR varss
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (8) main_body -> . MAIN PARENOPEN PARENCLOSE gotoMain body
    (19) dec_func -> . FUNCTION type ID PARENOPEN param PARENCLOSE body
    (20) dec_func -> . FUNCTION VOID ID PARENOPEN param PARENCLOSE body

    VAR             shift and go to state 10
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 13

    vars                           shift and go to state 7
    multiple_funcs                 shift and go to state 8
    main_body                      shift and go to state 9
    dec_func                       shift and go to state 11

state 7

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars . multiple_funcs main_body
    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars . main_body
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (8) main_body -> . MAIN PARENOPEN PARENCLOSE gotoMain body
    (19) dec_func -> . FUNCTION type ID PARENOPEN param PARENCLOSE body
    (20) dec_func -> . FUNCTION VOID ID PARENOPEN param PARENCLOSE body

    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 13

    multiple_funcs                 shift and go to state 14
    main_body                      shift and go to state 15
    dec_func                       shift and go to state 11

state 8

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs . main_body
    (8) main_body -> . MAIN PARENOPEN PARENCLOSE gotoMain body

    MAIN            shift and go to state 12

    main_body                      shift and go to state 16

state 9

    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body .

    $end            reduce using rule 4 (start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body .)


state 10

    (10) vars -> VAR . varss
    (11) varss -> . type mvar SEMICOLON varss
    (12) varss -> . type mvar SEMICOLON
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    varss                          shift and go to state 17
    type                           shift and go to state 18

state 11

    (6) multiple_funcs -> dec_func .
    (7) multiple_funcs -> dec_func . multiple_funcs
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (19) dec_func -> . FUNCTION type ID PARENOPEN param PARENCLOSE body
    (20) dec_func -> . FUNCTION VOID ID PARENOPEN param PARENCLOSE body

    MAIN            reduce using rule 6 (multiple_funcs -> dec_func .)
    FUNCTION        shift and go to state 13

    dec_func                       shift and go to state 11
    multiple_funcs                 shift and go to state 22

state 12

    (8) main_body -> MAIN . PARENOPEN PARENCLOSE gotoMain body

    PARENOPEN       shift and go to state 23


state 13

    (19) dec_func -> FUNCTION . type ID PARENOPEN param PARENCLOSE body
    (20) dec_func -> FUNCTION . VOID ID PARENOPEN param PARENCLOSE body
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR

    VOID            shift and go to state 25
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    type                           shift and go to state 24

state 14

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs . main_body
    (8) main_body -> . MAIN PARENOPEN PARENCLOSE gotoMain body

    MAIN            shift and go to state 12

    main_body                      shift and go to state 26

state 15

    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body .

    $end            reduce using rule 2 (start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body .)


state 16

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body .

    $end            reduce using rule 3 (start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body .)


state 17

    (10) vars -> VAR varss .

    MAIN            reduce using rule 10 (vars -> VAR varss .)
    FUNCTION        reduce using rule 10 (vars -> VAR varss .)


state 18

    (11) varss -> type . mvar SEMICOLON varss
    (12) varss -> type . mvar SEMICOLON
    (13) mvar -> . ID COLON mvar
    (14) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (15) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (16) mvar -> . ID
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 28

    mvar                           shift and go to state 27

state 19

    (24) type -> INT .

    ID              reduce using rule 24 (type -> INT .)


state 20

    (25) type -> FLOAT .

    ID              reduce using rule 25 (type -> FLOAT .)


state 21

    (26) type -> CHAR .

    ID              reduce using rule 26 (type -> CHAR .)


state 22

    (7) multiple_funcs -> dec_func multiple_funcs .

    MAIN            reduce using rule 7 (multiple_funcs -> dec_func multiple_funcs .)


state 23

    (8) main_body -> MAIN PARENOPEN . PARENCLOSE gotoMain body

    PARENCLOSE      shift and go to state 29


state 24

    (19) dec_func -> FUNCTION type . ID PARENOPEN param PARENCLOSE body

    ID              shift and go to state 30


state 25

    (20) dec_func -> FUNCTION VOID . ID PARENOPEN param PARENCLOSE body

    ID              shift and go to state 31


state 26

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body .

    $end            reduce using rule 1 (start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body .)


state 27

    (11) varss -> type mvar . SEMICOLON varss
    (12) varss -> type mvar . SEMICOLON

    SEMICOLON       shift and go to state 32


state 28

    (13) mvar -> ID . COLON mvar
    (14) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (15) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (16) mvar -> ID .
    (17) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE
    (18) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 33
    BRACEOPEN       shift and go to state 34
    SEMICOLON       reduce using rule 16 (mvar -> ID .)


state 29

    (8) main_body -> MAIN PARENOPEN PARENCLOSE . gotoMain body
    (9) gotoMain -> . empty
    (124) empty -> .

    BRACKETOPEN     reduce using rule 124 (empty -> .)

    gotoMain                       shift and go to state 35
    empty                          shift and go to state 36

state 30

    (19) dec_func -> FUNCTION type ID . PARENOPEN param PARENCLOSE body

    PARENOPEN       shift and go to state 37


state 31

    (20) dec_func -> FUNCTION VOID ID . PARENOPEN param PARENCLOSE body

    PARENOPEN       shift and go to state 38


state 32

    (11) varss -> type mvar SEMICOLON . varss
    (12) varss -> type mvar SEMICOLON .
    (11) varss -> . type mvar SEMICOLON varss
    (12) varss -> . type mvar SEMICOLON
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR

    MAIN            reduce using rule 12 (varss -> type mvar SEMICOLON .)
    FUNCTION        reduce using rule 12 (varss -> type mvar SEMICOLON .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    type                           shift and go to state 18
    varss                          shift and go to state 39

state 33

    (13) mvar -> ID COLON . mvar
    (13) mvar -> . ID COLON mvar
    (14) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (15) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (16) mvar -> . ID
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 28

    mvar                           shift and go to state 40

state 34

    (14) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE COLON mvar
    (15) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (17) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE
    (18) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    CTEINT          shift and go to state 41


state 35

    (8) main_body -> MAIN PARENOPEN PARENCLOSE gotoMain . body
    (27) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 43

    body                           shift and go to state 42

state 36

    (9) gotoMain -> empty .

    BRACKETOPEN     reduce using rule 9 (gotoMain -> empty .)


state 37

    (19) dec_func -> FUNCTION type ID PARENOPEN . param PARENCLOSE body
    (21) param -> . type variable
    (22) param -> . type variable COLON param
    (23) param -> . empty
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR
    (124) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    PARENCLOSE      reduce using rule 124 (empty -> .)

    type                           shift and go to state 44
    param                          shift and go to state 45
    empty                          shift and go to state 46

state 38

    (20) dec_func -> FUNCTION VOID ID PARENOPEN . param PARENCLOSE body
    (21) param -> . type variable
    (22) param -> . type variable COLON param
    (23) param -> . empty
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR
    (124) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    PARENCLOSE      reduce using rule 124 (empty -> .)

    param                          shift and go to state 47
    type                           shift and go to state 44
    empty                          shift and go to state 46

state 39

    (11) varss -> type mvar SEMICOLON varss .

    MAIN            reduce using rule 11 (varss -> type mvar SEMICOLON varss .)
    FUNCTION        reduce using rule 11 (varss -> type mvar SEMICOLON varss .)


state 40

    (13) mvar -> ID COLON mvar .

    SEMICOLON       reduce using rule 13 (mvar -> ID COLON mvar .)


state 41

    (14) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE COLON mvar
    (15) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (17) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE
    (18) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    BRACECLOSE      shift and go to state 48


state 42

    (8) main_body -> MAIN PARENOPEN PARENCLOSE gotoMain body .

    $end            reduce using rule 8 (main_body -> MAIN PARENOPEN PARENCLOSE gotoMain body .)


state 43

    (27) body -> BRACKETOPEN . bodyy BRACKETCLOSE
    (28) bodyy -> . statement
    (29) bodyy -> . statement bodyy
    (30) bodyy -> . empty
    (31) statement -> . dec_variables
    (32) statement -> . assignment
    (33) statement -> . condition
    (34) statement -> . writing
    (35) statement -> . reading
    (36) statement -> . call_func
    (37) statement -> . graph
    (38) statement -> . return
    (39) statement -> . while_loop
    (40) statement -> . for_loop
    (41) statement -> . max
    (42) statement -> . min
    (43) statement -> . sum
    (44) statement -> . normal
    (45) statement -> . uniforme
    (46) statement -> . poisson
    (47) statement -> . binomial
    (124) empty -> .
    (48) dec_variables -> . dec_variabless
    (57) assignment -> . variable EQUAL exp SEMICOLON
    (93) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (94) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (99) writing -> . PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
    (105) reading -> . READ multivariables SEMICOLON
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE
    (62) graph -> . PLOT PARENOPEN exp PARENCLOSE SEMICOLON
    (114) return -> . RETURN exp SEMICOLON
    (108) while_loop -> . WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (112) for_loop -> . FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body
    (115) max -> . MAX PARENOPEN exp PARENCLOSE SEMICOLON
    (116) min -> . MIN PARENOPEN exp PARENCLOSE SEMICOLON
    (117) sum -> . SUM PARENOPEN exp PARENCLOSE SEMICOLON
    (123) normal -> . NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (122) uniforme -> . UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
    (121) poisson -> . POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
    (120) binomial -> . BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (49) dec_variabless -> . type dec_mvar SEMICOLON dec_variabless
    (50) dec_variabless -> . type dec_mvar SEMICOLON
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR

    BRACKETCLOSE    reduce using rule 124 (empty -> .)
    IF              shift and go to state 71
    PRINT           shift and go to state 72
    READ            shift and go to state 73
    ID              shift and go to state 74
    PLOT            shift and go to state 75
    RETURN          shift and go to state 76
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    MAX             shift and go to state 79
    MIN             shift and go to state 80
    SUM             shift and go to state 81
    NORMAL          shift and go to state 82
    UNIFORME        shift and go to state 83
    POISSON         shift and go to state 84
    BINOMIAL        shift and go to state 85
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    bodyy                          shift and go to state 49
    statement                      shift and go to state 50
    empty                          shift and go to state 51
    dec_variables                  shift and go to state 52
    assignment                     shift and go to state 53
    condition                      shift and go to state 54
    writing                        shift and go to state 55
    reading                        shift and go to state 56
    call_func                      shift and go to state 57
    graph                          shift and go to state 58
    return                         shift and go to state 59
    while_loop                     shift and go to state 60
    for_loop                       shift and go to state 61
    max                            shift and go to state 62
    min                            shift and go to state 63
    sum                            shift and go to state 64
    normal                         shift and go to state 65
    uniforme                       shift and go to state 66
    poisson                        shift and go to state 67
    binomial                       shift and go to state 68
    dec_variabless                 shift and go to state 69
    variable                       shift and go to state 70
    type                           shift and go to state 86

state 44

    (21) param -> type . variable
    (22) param -> type . variable COLON param
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    variable                       shift and go to state 87

state 45

    (19) dec_func -> FUNCTION type ID PARENOPEN param . PARENCLOSE body

    PARENCLOSE      shift and go to state 89


state 46

    (23) param -> empty .

    PARENCLOSE      reduce using rule 23 (param -> empty .)


state 47

    (20) dec_func -> FUNCTION VOID ID PARENOPEN param . PARENCLOSE body

    PARENCLOSE      shift and go to state 90


state 48

    (14) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . COLON mvar
    (15) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE .
    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 92
    BRACEOPEN       shift and go to state 91
    SEMICOLON       reduce using rule 17 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE .)


state 49

    (27) body -> BRACKETOPEN bodyy . BRACKETCLOSE

    BRACKETCLOSE    shift and go to state 93


state 50

    (28) bodyy -> statement .
    (29) bodyy -> statement . bodyy
    (28) bodyy -> . statement
    (29) bodyy -> . statement bodyy
    (30) bodyy -> . empty
    (31) statement -> . dec_variables
    (32) statement -> . assignment
    (33) statement -> . condition
    (34) statement -> . writing
    (35) statement -> . reading
    (36) statement -> . call_func
    (37) statement -> . graph
    (38) statement -> . return
    (39) statement -> . while_loop
    (40) statement -> . for_loop
    (41) statement -> . max
    (42) statement -> . min
    (43) statement -> . sum
    (44) statement -> . normal
    (45) statement -> . uniforme
    (46) statement -> . poisson
    (47) statement -> . binomial
    (124) empty -> .
    (48) dec_variables -> . dec_variabless
    (57) assignment -> . variable EQUAL exp SEMICOLON
    (93) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (94) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (99) writing -> . PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
    (105) reading -> . READ multivariables SEMICOLON
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE
    (62) graph -> . PLOT PARENOPEN exp PARENCLOSE SEMICOLON
    (114) return -> . RETURN exp SEMICOLON
    (108) while_loop -> . WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (112) for_loop -> . FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body
    (115) max -> . MAX PARENOPEN exp PARENCLOSE SEMICOLON
    (116) min -> . MIN PARENOPEN exp PARENCLOSE SEMICOLON
    (117) sum -> . SUM PARENOPEN exp PARENCLOSE SEMICOLON
    (123) normal -> . NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (122) uniforme -> . UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
    (121) poisson -> . POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
    (120) binomial -> . BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (49) dec_variabless -> . type dec_mvar SEMICOLON dec_variabless
    (50) dec_variabless -> . type dec_mvar SEMICOLON
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR

  ! reduce/reduce conflict for BRACKETCLOSE resolved using rule 28 (bodyy -> statement .)
    BRACKETCLOSE    reduce using rule 28 (bodyy -> statement .)
    IF              shift and go to state 71
    PRINT           shift and go to state 72
    READ            shift and go to state 73
    ID              shift and go to state 74
    PLOT            shift and go to state 75
    RETURN          shift and go to state 76
    WHILE           shift and go to state 77
    FOR             shift and go to state 78
    MAX             shift and go to state 79
    MIN             shift and go to state 80
    SUM             shift and go to state 81
    NORMAL          shift and go to state 82
    UNIFORME        shift and go to state 83
    POISSON         shift and go to state 84
    BINOMIAL        shift and go to state 85
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

  ! BRACKETCLOSE    [ reduce using rule 124 (empty -> .) ]

    statement                      shift and go to state 50
    bodyy                          shift and go to state 94
    empty                          shift and go to state 51
    dec_variables                  shift and go to state 52
    assignment                     shift and go to state 53
    condition                      shift and go to state 54
    writing                        shift and go to state 55
    reading                        shift and go to state 56
    call_func                      shift and go to state 57
    graph                          shift and go to state 58
    return                         shift and go to state 59
    while_loop                     shift and go to state 60
    for_loop                       shift and go to state 61
    max                            shift and go to state 62
    min                            shift and go to state 63
    sum                            shift and go to state 64
    normal                         shift and go to state 65
    uniforme                       shift and go to state 66
    poisson                        shift and go to state 67
    binomial                       shift and go to state 68
    dec_variabless                 shift and go to state 69
    variable                       shift and go to state 70
    type                           shift and go to state 86

state 51

    (30) bodyy -> empty .

    BRACKETCLOSE    reduce using rule 30 (bodyy -> empty .)


state 52

    (31) statement -> dec_variables .

    IF              reduce using rule 31 (statement -> dec_variables .)
    PRINT           reduce using rule 31 (statement -> dec_variables .)
    READ            reduce using rule 31 (statement -> dec_variables .)
    ID              reduce using rule 31 (statement -> dec_variables .)
    PLOT            reduce using rule 31 (statement -> dec_variables .)
    RETURN          reduce using rule 31 (statement -> dec_variables .)
    WHILE           reduce using rule 31 (statement -> dec_variables .)
    FOR             reduce using rule 31 (statement -> dec_variables .)
    MAX             reduce using rule 31 (statement -> dec_variables .)
    MIN             reduce using rule 31 (statement -> dec_variables .)
    SUM             reduce using rule 31 (statement -> dec_variables .)
    NORMAL          reduce using rule 31 (statement -> dec_variables .)
    UNIFORME        reduce using rule 31 (statement -> dec_variables .)
    POISSON         reduce using rule 31 (statement -> dec_variables .)
    BINOMIAL        reduce using rule 31 (statement -> dec_variables .)
    INT             reduce using rule 31 (statement -> dec_variables .)
    FLOAT           reduce using rule 31 (statement -> dec_variables .)
    CHAR            reduce using rule 31 (statement -> dec_variables .)
    BRACKETCLOSE    reduce using rule 31 (statement -> dec_variables .)


state 53

    (32) statement -> assignment .

    IF              reduce using rule 32 (statement -> assignment .)
    PRINT           reduce using rule 32 (statement -> assignment .)
    READ            reduce using rule 32 (statement -> assignment .)
    ID              reduce using rule 32 (statement -> assignment .)
    PLOT            reduce using rule 32 (statement -> assignment .)
    RETURN          reduce using rule 32 (statement -> assignment .)
    WHILE           reduce using rule 32 (statement -> assignment .)
    FOR             reduce using rule 32 (statement -> assignment .)
    MAX             reduce using rule 32 (statement -> assignment .)
    MIN             reduce using rule 32 (statement -> assignment .)
    SUM             reduce using rule 32 (statement -> assignment .)
    NORMAL          reduce using rule 32 (statement -> assignment .)
    UNIFORME        reduce using rule 32 (statement -> assignment .)
    POISSON         reduce using rule 32 (statement -> assignment .)
    BINOMIAL        reduce using rule 32 (statement -> assignment .)
    INT             reduce using rule 32 (statement -> assignment .)
    FLOAT           reduce using rule 32 (statement -> assignment .)
    CHAR            reduce using rule 32 (statement -> assignment .)
    BRACKETCLOSE    reduce using rule 32 (statement -> assignment .)


state 54

    (33) statement -> condition .

    IF              reduce using rule 33 (statement -> condition .)
    PRINT           reduce using rule 33 (statement -> condition .)
    READ            reduce using rule 33 (statement -> condition .)
    ID              reduce using rule 33 (statement -> condition .)
    PLOT            reduce using rule 33 (statement -> condition .)
    RETURN          reduce using rule 33 (statement -> condition .)
    WHILE           reduce using rule 33 (statement -> condition .)
    FOR             reduce using rule 33 (statement -> condition .)
    MAX             reduce using rule 33 (statement -> condition .)
    MIN             reduce using rule 33 (statement -> condition .)
    SUM             reduce using rule 33 (statement -> condition .)
    NORMAL          reduce using rule 33 (statement -> condition .)
    UNIFORME        reduce using rule 33 (statement -> condition .)
    POISSON         reduce using rule 33 (statement -> condition .)
    BINOMIAL        reduce using rule 33 (statement -> condition .)
    INT             reduce using rule 33 (statement -> condition .)
    FLOAT           reduce using rule 33 (statement -> condition .)
    CHAR            reduce using rule 33 (statement -> condition .)
    BRACKETCLOSE    reduce using rule 33 (statement -> condition .)


state 55

    (34) statement -> writing .

    IF              reduce using rule 34 (statement -> writing .)
    PRINT           reduce using rule 34 (statement -> writing .)
    READ            reduce using rule 34 (statement -> writing .)
    ID              reduce using rule 34 (statement -> writing .)
    PLOT            reduce using rule 34 (statement -> writing .)
    RETURN          reduce using rule 34 (statement -> writing .)
    WHILE           reduce using rule 34 (statement -> writing .)
    FOR             reduce using rule 34 (statement -> writing .)
    MAX             reduce using rule 34 (statement -> writing .)
    MIN             reduce using rule 34 (statement -> writing .)
    SUM             reduce using rule 34 (statement -> writing .)
    NORMAL          reduce using rule 34 (statement -> writing .)
    UNIFORME        reduce using rule 34 (statement -> writing .)
    POISSON         reduce using rule 34 (statement -> writing .)
    BINOMIAL        reduce using rule 34 (statement -> writing .)
    INT             reduce using rule 34 (statement -> writing .)
    FLOAT           reduce using rule 34 (statement -> writing .)
    CHAR            reduce using rule 34 (statement -> writing .)
    BRACKETCLOSE    reduce using rule 34 (statement -> writing .)


state 56

    (35) statement -> reading .

    IF              reduce using rule 35 (statement -> reading .)
    PRINT           reduce using rule 35 (statement -> reading .)
    READ            reduce using rule 35 (statement -> reading .)
    ID              reduce using rule 35 (statement -> reading .)
    PLOT            reduce using rule 35 (statement -> reading .)
    RETURN          reduce using rule 35 (statement -> reading .)
    WHILE           reduce using rule 35 (statement -> reading .)
    FOR             reduce using rule 35 (statement -> reading .)
    MAX             reduce using rule 35 (statement -> reading .)
    MIN             reduce using rule 35 (statement -> reading .)
    SUM             reduce using rule 35 (statement -> reading .)
    NORMAL          reduce using rule 35 (statement -> reading .)
    UNIFORME        reduce using rule 35 (statement -> reading .)
    POISSON         reduce using rule 35 (statement -> reading .)
    BINOMIAL        reduce using rule 35 (statement -> reading .)
    INT             reduce using rule 35 (statement -> reading .)
    FLOAT           reduce using rule 35 (statement -> reading .)
    CHAR            reduce using rule 35 (statement -> reading .)
    BRACKETCLOSE    reduce using rule 35 (statement -> reading .)


state 57

    (36) statement -> call_func .

    IF              reduce using rule 36 (statement -> call_func .)
    PRINT           reduce using rule 36 (statement -> call_func .)
    READ            reduce using rule 36 (statement -> call_func .)
    ID              reduce using rule 36 (statement -> call_func .)
    PLOT            reduce using rule 36 (statement -> call_func .)
    RETURN          reduce using rule 36 (statement -> call_func .)
    WHILE           reduce using rule 36 (statement -> call_func .)
    FOR             reduce using rule 36 (statement -> call_func .)
    MAX             reduce using rule 36 (statement -> call_func .)
    MIN             reduce using rule 36 (statement -> call_func .)
    SUM             reduce using rule 36 (statement -> call_func .)
    NORMAL          reduce using rule 36 (statement -> call_func .)
    UNIFORME        reduce using rule 36 (statement -> call_func .)
    POISSON         reduce using rule 36 (statement -> call_func .)
    BINOMIAL        reduce using rule 36 (statement -> call_func .)
    INT             reduce using rule 36 (statement -> call_func .)
    FLOAT           reduce using rule 36 (statement -> call_func .)
    CHAR            reduce using rule 36 (statement -> call_func .)
    BRACKETCLOSE    reduce using rule 36 (statement -> call_func .)


state 58

    (37) statement -> graph .

    IF              reduce using rule 37 (statement -> graph .)
    PRINT           reduce using rule 37 (statement -> graph .)
    READ            reduce using rule 37 (statement -> graph .)
    ID              reduce using rule 37 (statement -> graph .)
    PLOT            reduce using rule 37 (statement -> graph .)
    RETURN          reduce using rule 37 (statement -> graph .)
    WHILE           reduce using rule 37 (statement -> graph .)
    FOR             reduce using rule 37 (statement -> graph .)
    MAX             reduce using rule 37 (statement -> graph .)
    MIN             reduce using rule 37 (statement -> graph .)
    SUM             reduce using rule 37 (statement -> graph .)
    NORMAL          reduce using rule 37 (statement -> graph .)
    UNIFORME        reduce using rule 37 (statement -> graph .)
    POISSON         reduce using rule 37 (statement -> graph .)
    BINOMIAL        reduce using rule 37 (statement -> graph .)
    INT             reduce using rule 37 (statement -> graph .)
    FLOAT           reduce using rule 37 (statement -> graph .)
    CHAR            reduce using rule 37 (statement -> graph .)
    BRACKETCLOSE    reduce using rule 37 (statement -> graph .)


state 59

    (38) statement -> return .

    IF              reduce using rule 38 (statement -> return .)
    PRINT           reduce using rule 38 (statement -> return .)
    READ            reduce using rule 38 (statement -> return .)
    ID              reduce using rule 38 (statement -> return .)
    PLOT            reduce using rule 38 (statement -> return .)
    RETURN          reduce using rule 38 (statement -> return .)
    WHILE           reduce using rule 38 (statement -> return .)
    FOR             reduce using rule 38 (statement -> return .)
    MAX             reduce using rule 38 (statement -> return .)
    MIN             reduce using rule 38 (statement -> return .)
    SUM             reduce using rule 38 (statement -> return .)
    NORMAL          reduce using rule 38 (statement -> return .)
    UNIFORME        reduce using rule 38 (statement -> return .)
    POISSON         reduce using rule 38 (statement -> return .)
    BINOMIAL        reduce using rule 38 (statement -> return .)
    INT             reduce using rule 38 (statement -> return .)
    FLOAT           reduce using rule 38 (statement -> return .)
    CHAR            reduce using rule 38 (statement -> return .)
    BRACKETCLOSE    reduce using rule 38 (statement -> return .)


state 60

    (39) statement -> while_loop .

    IF              reduce using rule 39 (statement -> while_loop .)
    PRINT           reduce using rule 39 (statement -> while_loop .)
    READ            reduce using rule 39 (statement -> while_loop .)
    ID              reduce using rule 39 (statement -> while_loop .)
    PLOT            reduce using rule 39 (statement -> while_loop .)
    RETURN          reduce using rule 39 (statement -> while_loop .)
    WHILE           reduce using rule 39 (statement -> while_loop .)
    FOR             reduce using rule 39 (statement -> while_loop .)
    MAX             reduce using rule 39 (statement -> while_loop .)
    MIN             reduce using rule 39 (statement -> while_loop .)
    SUM             reduce using rule 39 (statement -> while_loop .)
    NORMAL          reduce using rule 39 (statement -> while_loop .)
    UNIFORME        reduce using rule 39 (statement -> while_loop .)
    POISSON         reduce using rule 39 (statement -> while_loop .)
    BINOMIAL        reduce using rule 39 (statement -> while_loop .)
    INT             reduce using rule 39 (statement -> while_loop .)
    FLOAT           reduce using rule 39 (statement -> while_loop .)
    CHAR            reduce using rule 39 (statement -> while_loop .)
    BRACKETCLOSE    reduce using rule 39 (statement -> while_loop .)


state 61

    (40) statement -> for_loop .

    IF              reduce using rule 40 (statement -> for_loop .)
    PRINT           reduce using rule 40 (statement -> for_loop .)
    READ            reduce using rule 40 (statement -> for_loop .)
    ID              reduce using rule 40 (statement -> for_loop .)
    PLOT            reduce using rule 40 (statement -> for_loop .)
    RETURN          reduce using rule 40 (statement -> for_loop .)
    WHILE           reduce using rule 40 (statement -> for_loop .)
    FOR             reduce using rule 40 (statement -> for_loop .)
    MAX             reduce using rule 40 (statement -> for_loop .)
    MIN             reduce using rule 40 (statement -> for_loop .)
    SUM             reduce using rule 40 (statement -> for_loop .)
    NORMAL          reduce using rule 40 (statement -> for_loop .)
    UNIFORME        reduce using rule 40 (statement -> for_loop .)
    POISSON         reduce using rule 40 (statement -> for_loop .)
    BINOMIAL        reduce using rule 40 (statement -> for_loop .)
    INT             reduce using rule 40 (statement -> for_loop .)
    FLOAT           reduce using rule 40 (statement -> for_loop .)
    CHAR            reduce using rule 40 (statement -> for_loop .)
    BRACKETCLOSE    reduce using rule 40 (statement -> for_loop .)


state 62

    (41) statement -> max .

    IF              reduce using rule 41 (statement -> max .)
    PRINT           reduce using rule 41 (statement -> max .)
    READ            reduce using rule 41 (statement -> max .)
    ID              reduce using rule 41 (statement -> max .)
    PLOT            reduce using rule 41 (statement -> max .)
    RETURN          reduce using rule 41 (statement -> max .)
    WHILE           reduce using rule 41 (statement -> max .)
    FOR             reduce using rule 41 (statement -> max .)
    MAX             reduce using rule 41 (statement -> max .)
    MIN             reduce using rule 41 (statement -> max .)
    SUM             reduce using rule 41 (statement -> max .)
    NORMAL          reduce using rule 41 (statement -> max .)
    UNIFORME        reduce using rule 41 (statement -> max .)
    POISSON         reduce using rule 41 (statement -> max .)
    BINOMIAL        reduce using rule 41 (statement -> max .)
    INT             reduce using rule 41 (statement -> max .)
    FLOAT           reduce using rule 41 (statement -> max .)
    CHAR            reduce using rule 41 (statement -> max .)
    BRACKETCLOSE    reduce using rule 41 (statement -> max .)


state 63

    (42) statement -> min .

    IF              reduce using rule 42 (statement -> min .)
    PRINT           reduce using rule 42 (statement -> min .)
    READ            reduce using rule 42 (statement -> min .)
    ID              reduce using rule 42 (statement -> min .)
    PLOT            reduce using rule 42 (statement -> min .)
    RETURN          reduce using rule 42 (statement -> min .)
    WHILE           reduce using rule 42 (statement -> min .)
    FOR             reduce using rule 42 (statement -> min .)
    MAX             reduce using rule 42 (statement -> min .)
    MIN             reduce using rule 42 (statement -> min .)
    SUM             reduce using rule 42 (statement -> min .)
    NORMAL          reduce using rule 42 (statement -> min .)
    UNIFORME        reduce using rule 42 (statement -> min .)
    POISSON         reduce using rule 42 (statement -> min .)
    BINOMIAL        reduce using rule 42 (statement -> min .)
    INT             reduce using rule 42 (statement -> min .)
    FLOAT           reduce using rule 42 (statement -> min .)
    CHAR            reduce using rule 42 (statement -> min .)
    BRACKETCLOSE    reduce using rule 42 (statement -> min .)


state 64

    (43) statement -> sum .

    IF              reduce using rule 43 (statement -> sum .)
    PRINT           reduce using rule 43 (statement -> sum .)
    READ            reduce using rule 43 (statement -> sum .)
    ID              reduce using rule 43 (statement -> sum .)
    PLOT            reduce using rule 43 (statement -> sum .)
    RETURN          reduce using rule 43 (statement -> sum .)
    WHILE           reduce using rule 43 (statement -> sum .)
    FOR             reduce using rule 43 (statement -> sum .)
    MAX             reduce using rule 43 (statement -> sum .)
    MIN             reduce using rule 43 (statement -> sum .)
    SUM             reduce using rule 43 (statement -> sum .)
    NORMAL          reduce using rule 43 (statement -> sum .)
    UNIFORME        reduce using rule 43 (statement -> sum .)
    POISSON         reduce using rule 43 (statement -> sum .)
    BINOMIAL        reduce using rule 43 (statement -> sum .)
    INT             reduce using rule 43 (statement -> sum .)
    FLOAT           reduce using rule 43 (statement -> sum .)
    CHAR            reduce using rule 43 (statement -> sum .)
    BRACKETCLOSE    reduce using rule 43 (statement -> sum .)


state 65

    (44) statement -> normal .

    IF              reduce using rule 44 (statement -> normal .)
    PRINT           reduce using rule 44 (statement -> normal .)
    READ            reduce using rule 44 (statement -> normal .)
    ID              reduce using rule 44 (statement -> normal .)
    PLOT            reduce using rule 44 (statement -> normal .)
    RETURN          reduce using rule 44 (statement -> normal .)
    WHILE           reduce using rule 44 (statement -> normal .)
    FOR             reduce using rule 44 (statement -> normal .)
    MAX             reduce using rule 44 (statement -> normal .)
    MIN             reduce using rule 44 (statement -> normal .)
    SUM             reduce using rule 44 (statement -> normal .)
    NORMAL          reduce using rule 44 (statement -> normal .)
    UNIFORME        reduce using rule 44 (statement -> normal .)
    POISSON         reduce using rule 44 (statement -> normal .)
    BINOMIAL        reduce using rule 44 (statement -> normal .)
    INT             reduce using rule 44 (statement -> normal .)
    FLOAT           reduce using rule 44 (statement -> normal .)
    CHAR            reduce using rule 44 (statement -> normal .)
    BRACKETCLOSE    reduce using rule 44 (statement -> normal .)


state 66

    (45) statement -> uniforme .

    IF              reduce using rule 45 (statement -> uniforme .)
    PRINT           reduce using rule 45 (statement -> uniforme .)
    READ            reduce using rule 45 (statement -> uniforme .)
    ID              reduce using rule 45 (statement -> uniforme .)
    PLOT            reduce using rule 45 (statement -> uniforme .)
    RETURN          reduce using rule 45 (statement -> uniforme .)
    WHILE           reduce using rule 45 (statement -> uniforme .)
    FOR             reduce using rule 45 (statement -> uniforme .)
    MAX             reduce using rule 45 (statement -> uniforme .)
    MIN             reduce using rule 45 (statement -> uniforme .)
    SUM             reduce using rule 45 (statement -> uniforme .)
    NORMAL          reduce using rule 45 (statement -> uniforme .)
    UNIFORME        reduce using rule 45 (statement -> uniforme .)
    POISSON         reduce using rule 45 (statement -> uniforme .)
    BINOMIAL        reduce using rule 45 (statement -> uniforme .)
    INT             reduce using rule 45 (statement -> uniforme .)
    FLOAT           reduce using rule 45 (statement -> uniforme .)
    CHAR            reduce using rule 45 (statement -> uniforme .)
    BRACKETCLOSE    reduce using rule 45 (statement -> uniforme .)


state 67

    (46) statement -> poisson .

    IF              reduce using rule 46 (statement -> poisson .)
    PRINT           reduce using rule 46 (statement -> poisson .)
    READ            reduce using rule 46 (statement -> poisson .)
    ID              reduce using rule 46 (statement -> poisson .)
    PLOT            reduce using rule 46 (statement -> poisson .)
    RETURN          reduce using rule 46 (statement -> poisson .)
    WHILE           reduce using rule 46 (statement -> poisson .)
    FOR             reduce using rule 46 (statement -> poisson .)
    MAX             reduce using rule 46 (statement -> poisson .)
    MIN             reduce using rule 46 (statement -> poisson .)
    SUM             reduce using rule 46 (statement -> poisson .)
    NORMAL          reduce using rule 46 (statement -> poisson .)
    UNIFORME        reduce using rule 46 (statement -> poisson .)
    POISSON         reduce using rule 46 (statement -> poisson .)
    BINOMIAL        reduce using rule 46 (statement -> poisson .)
    INT             reduce using rule 46 (statement -> poisson .)
    FLOAT           reduce using rule 46 (statement -> poisson .)
    CHAR            reduce using rule 46 (statement -> poisson .)
    BRACKETCLOSE    reduce using rule 46 (statement -> poisson .)


state 68

    (47) statement -> binomial .

    IF              reduce using rule 47 (statement -> binomial .)
    PRINT           reduce using rule 47 (statement -> binomial .)
    READ            reduce using rule 47 (statement -> binomial .)
    ID              reduce using rule 47 (statement -> binomial .)
    PLOT            reduce using rule 47 (statement -> binomial .)
    RETURN          reduce using rule 47 (statement -> binomial .)
    WHILE           reduce using rule 47 (statement -> binomial .)
    FOR             reduce using rule 47 (statement -> binomial .)
    MAX             reduce using rule 47 (statement -> binomial .)
    MIN             reduce using rule 47 (statement -> binomial .)
    SUM             reduce using rule 47 (statement -> binomial .)
    NORMAL          reduce using rule 47 (statement -> binomial .)
    UNIFORME        reduce using rule 47 (statement -> binomial .)
    POISSON         reduce using rule 47 (statement -> binomial .)
    BINOMIAL        reduce using rule 47 (statement -> binomial .)
    INT             reduce using rule 47 (statement -> binomial .)
    FLOAT           reduce using rule 47 (statement -> binomial .)
    CHAR            reduce using rule 47 (statement -> binomial .)
    BRACKETCLOSE    reduce using rule 47 (statement -> binomial .)


state 69

    (48) dec_variables -> dec_variabless .

    IF              reduce using rule 48 (dec_variables -> dec_variabless .)
    PRINT           reduce using rule 48 (dec_variables -> dec_variabless .)
    READ            reduce using rule 48 (dec_variables -> dec_variabless .)
    ID              reduce using rule 48 (dec_variables -> dec_variabless .)
    PLOT            reduce using rule 48 (dec_variables -> dec_variabless .)
    RETURN          reduce using rule 48 (dec_variables -> dec_variabless .)
    WHILE           reduce using rule 48 (dec_variables -> dec_variabless .)
    FOR             reduce using rule 48 (dec_variables -> dec_variabless .)
    MAX             reduce using rule 48 (dec_variables -> dec_variabless .)
    MIN             reduce using rule 48 (dec_variables -> dec_variabless .)
    SUM             reduce using rule 48 (dec_variables -> dec_variabless .)
    NORMAL          reduce using rule 48 (dec_variables -> dec_variabless .)
    UNIFORME        reduce using rule 48 (dec_variables -> dec_variabless .)
    POISSON         reduce using rule 48 (dec_variables -> dec_variabless .)
    BINOMIAL        reduce using rule 48 (dec_variables -> dec_variabless .)
    INT             reduce using rule 48 (dec_variables -> dec_variabless .)
    FLOAT           reduce using rule 48 (dec_variables -> dec_variabless .)
    CHAR            reduce using rule 48 (dec_variables -> dec_variabless .)
    BRACKETCLOSE    reduce using rule 48 (dec_variables -> dec_variabless .)


state 70

    (57) assignment -> variable . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 95


state 71

    (93) condition -> IF . PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (94) condition -> IF . PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse

    PARENOPEN       shift and go to state 96


state 72

    (99) writing -> PRINT . PARENOPEN writingg PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 97


state 73

    (105) reading -> READ . multivariables SEMICOLON
    (106) multivariables -> . variable
    (107) multivariables -> . variable COLON multivariables
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    multivariables                 shift and go to state 98
    variable                       shift and go to state 99

state 74

    (58) call_func -> ID . PARENOPEN call_funcc PARENCLOSE
    (90) variable -> ID .
    (91) variable -> ID . BRACEOPEN exp BRACECLOSE
    (92) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    PARENOPEN       shift and go to state 100
    EQUAL           reduce using rule 90 (variable -> ID .)
    BRACEOPEN       shift and go to state 101


state 75

    (62) graph -> PLOT . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 102


state 76

    (114) return -> RETURN . exp SEMICOLON
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 77

    (108) while_loop -> WHILE . whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (109) whileMigaja -> . empty
    (124) empty -> .

    PARENOPEN       reduce using rule 124 (empty -> .)

    whileMigaja                    shift and go to state 113
    empty                          shift and go to state 114

state 78

    (112) for_loop -> FOR . PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body

    PARENOPEN       shift and go to state 115


state 79

    (115) max -> MAX . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 116


state 80

    (116) min -> MIN . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 117


state 81

    (117) sum -> SUM . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 118


state 82

    (123) normal -> NORMAL . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 119


state 83

    (122) uniforme -> UNIFORME . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 120


state 84

    (121) poisson -> POISSON . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 121


state 85

    (120) binomial -> BINOMIAL . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 122


state 86

    (49) dec_variabless -> type . dec_mvar SEMICOLON dec_variabless
    (50) dec_variabless -> type . dec_mvar SEMICOLON
    (51) dec_mvar -> . ID COLON dec_mvar
    (52) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (53) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (54) dec_mvar -> . ID
    (55) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (56) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 124

    dec_mvar                       shift and go to state 123

state 87

    (21) param -> type variable .
    (22) param -> type variable . COLON param

    PARENCLOSE      reduce using rule 21 (param -> type variable .)
    COLON           shift and go to state 125


state 88

    (90) variable -> ID .
    (91) variable -> ID . BRACEOPEN exp BRACECLOSE
    (92) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    COLON           reduce using rule 90 (variable -> ID .)
    PARENCLOSE      reduce using rule 90 (variable -> ID .)
    SEMICOLON       reduce using rule 90 (variable -> ID .)
    EQUAL           reduce using rule 90 (variable -> ID .)
    BRACEOPEN       shift and go to state 101


state 89

    (19) dec_func -> FUNCTION type ID PARENOPEN param PARENCLOSE . body
    (27) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 43

    body                           shift and go to state 126

state 90

    (20) dec_func -> FUNCTION VOID ID PARENOPEN param PARENCLOSE . body
    (27) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 43

    body                           shift and go to state 127

state 91

    (15) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE COLON mvar
    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE

    CTEINT          shift and go to state 128


state 92

    (14) mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON . mvar
    (13) mvar -> . ID COLON mvar
    (14) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (15) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (16) mvar -> . ID
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 28

    mvar                           shift and go to state 129

state 93

    (27) body -> BRACKETOPEN bodyy BRACKETCLOSE .

    $end            reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FUNCTION        reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MAIN            reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    ELSE            reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    IF              reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    PRINT           reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    READ            reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    ID              reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    PLOT            reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    RETURN          reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    WHILE           reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FOR             reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MAX             reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MIN             reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    SUM             reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    NORMAL          reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    UNIFORME        reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    POISSON         reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    BINOMIAL        reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    INT             reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FLOAT           reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    CHAR            reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    BRACKETCLOSE    reduce using rule 27 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)


state 94

    (29) bodyy -> statement bodyy .

    BRACKETCLOSE    reduce using rule 29 (bodyy -> statement bodyy .)


state 95

    (57) assignment -> variable EQUAL . exp SEMICOLON
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    variable                       shift and go to state 111
    exp                            shift and go to state 130
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    call_func                      shift and go to state 112

state 96

    (93) condition -> IF PARENOPEN . exp PARENCLOSE cuadruploIF body ifEnd
    (94) condition -> IF PARENOPEN . exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 131
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 97

    (99) writing -> PRINT PARENOPEN . writingg PARENCLOSE SEMICOLON
    (100) writingg -> . exp
    (101) writingg -> . exp COLON writingg
    (102) writingg -> . auxString
    (103) writingg -> . auxString COLON writingg
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (104) auxString -> . CTESTRING
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 135
    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    writingg                       shift and go to state 132
    exp                            shift and go to state 133
    auxString                      shift and go to state 134
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 98

    (105) reading -> READ multivariables . SEMICOLON

    SEMICOLON       shift and go to state 136


state 99

    (106) multivariables -> variable .
    (107) multivariables -> variable . COLON multivariables

    SEMICOLON       reduce using rule 106 (multivariables -> variable .)
    COLON           shift and go to state 137


state 100

    (58) call_func -> ID PARENOPEN . call_funcc PARENCLOSE
    (59) call_funcc -> . exp
    (60) call_funcc -> . exp COLON call_funcc
    (61) call_funcc -> . empty
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (124) empty -> .
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENCLOSE      reduce using rule 124 (empty -> .)
    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    call_funcc                     shift and go to state 138
    exp                            shift and go to state 139
    empty                          shift and go to state 140
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 101

    (91) variable -> ID BRACEOPEN . exp BRACECLOSE
    (92) variable -> ID BRACEOPEN . exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 141
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 102

    (62) graph -> PLOT PARENOPEN . exp PARENCLOSE SEMICOLON
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 142
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 103

    (114) return -> RETURN exp . SEMICOLON
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    SEMICOLON       shift and go to state 143
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 104

    (71) exp -> m_exp .

    SEMICOLON       reduce using rule 71 (exp -> m_exp .)
    GREATHERTHAN    reduce using rule 71 (exp -> m_exp .)
    LESSTHAN        reduce using rule 71 (exp -> m_exp .)
    GREATHEREQUAL   reduce using rule 71 (exp -> m_exp .)
    LESSEQUAL       reduce using rule 71 (exp -> m_exp .)
    DIFFERENT       reduce using rule 71 (exp -> m_exp .)
    SAME            reduce using rule 71 (exp -> m_exp .)
    AND             reduce using rule 71 (exp -> m_exp .)
    OR              reduce using rule 71 (exp -> m_exp .)
    PARENCLOSE      reduce using rule 71 (exp -> m_exp .)
    COLON           reduce using rule 71 (exp -> m_exp .)
    BRACECLOSE      reduce using rule 71 (exp -> m_exp .)


state 105

    (72) m_exp -> t . m_expp
    (73) m_expp -> . PLUS appendPLUS m_exp
    (74) m_expp -> . MINUS appendMINUS m_exp
    (75) m_expp -> . empty
    (124) empty -> .

    PLUS            shift and go to state 153
    MINUS           shift and go to state 154
    SEMICOLON       reduce using rule 124 (empty -> .)
    GREATHERTHAN    reduce using rule 124 (empty -> .)
    LESSTHAN        reduce using rule 124 (empty -> .)
    GREATHEREQUAL   reduce using rule 124 (empty -> .)
    LESSEQUAL       reduce using rule 124 (empty -> .)
    DIFFERENT       reduce using rule 124 (empty -> .)
    SAME            reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    PARENCLOSE      reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    BRACECLOSE      reduce using rule 124 (empty -> .)

    m_expp                         shift and go to state 152
    empty                          shift and go to state 155

state 106

    (80) t -> f . termino
    (81) termino -> . MULTIPLY appendMULTIPLY t
    (82) termino -> . DIVIDE appendDIVIDE t
    (83) termino -> . empty
    (124) empty -> .

    MULTIPLY        shift and go to state 157
    DIVIDE          shift and go to state 158
    PLUS            reduce using rule 124 (empty -> .)
    MINUS           reduce using rule 124 (empty -> .)
    SEMICOLON       reduce using rule 124 (empty -> .)
    GREATHERTHAN    reduce using rule 124 (empty -> .)
    LESSTHAN        reduce using rule 124 (empty -> .)
    GREATHEREQUAL   reduce using rule 124 (empty -> .)
    LESSEQUAL       reduce using rule 124 (empty -> .)
    DIFFERENT       reduce using rule 124 (empty -> .)
    SAME            reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    PARENCLOSE      reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    BRACECLOSE      reduce using rule 124 (empty -> .)

    termino                        shift and go to state 156
    empty                          shift and go to state 159

state 107

    (84) f -> PARENOPEN . exp PARENCLOSE
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 160
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 108

    (85) f -> ID .
    (90) variable -> ID .
    (91) variable -> ID . BRACEOPEN exp BRACECLOSE
    (92) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> ID . PARENOPEN call_funcc PARENCLOSE

  ! reduce/reduce conflict for MULTIPLY resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for GREATHERTHAN resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for SAME resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for PARENCLOSE resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 85 (f -> ID .)
  ! reduce/reduce conflict for BRACECLOSE resolved using rule 85 (f -> ID .)
    MULTIPLY        reduce using rule 85 (f -> ID .)
    DIVIDE          reduce using rule 85 (f -> ID .)
    PLUS            reduce using rule 85 (f -> ID .)
    MINUS           reduce using rule 85 (f -> ID .)
    SEMICOLON       reduce using rule 85 (f -> ID .)
    GREATHERTHAN    reduce using rule 85 (f -> ID .)
    LESSTHAN        reduce using rule 85 (f -> ID .)
    GREATHEREQUAL   reduce using rule 85 (f -> ID .)
    LESSEQUAL       reduce using rule 85 (f -> ID .)
    DIFFERENT       reduce using rule 85 (f -> ID .)
    SAME            reduce using rule 85 (f -> ID .)
    AND             reduce using rule 85 (f -> ID .)
    OR              reduce using rule 85 (f -> ID .)
    PARENCLOSE      reduce using rule 85 (f -> ID .)
    COLON           reduce using rule 85 (f -> ID .)
    BRACECLOSE      reduce using rule 85 (f -> ID .)
    BRACEOPEN       shift and go to state 101
    PARENOPEN       shift and go to state 100

  ! MULTIPLY        [ reduce using rule 90 (variable -> ID .) ]
  ! DIVIDE          [ reduce using rule 90 (variable -> ID .) ]
  ! PLUS            [ reduce using rule 90 (variable -> ID .) ]
  ! MINUS           [ reduce using rule 90 (variable -> ID .) ]
  ! SEMICOLON       [ reduce using rule 90 (variable -> ID .) ]
  ! GREATHERTHAN    [ reduce using rule 90 (variable -> ID .) ]
  ! LESSTHAN        [ reduce using rule 90 (variable -> ID .) ]
  ! GREATHEREQUAL   [ reduce using rule 90 (variable -> ID .) ]
  ! LESSEQUAL       [ reduce using rule 90 (variable -> ID .) ]
  ! DIFFERENT       [ reduce using rule 90 (variable -> ID .) ]
  ! SAME            [ reduce using rule 90 (variable -> ID .) ]
  ! AND             [ reduce using rule 90 (variable -> ID .) ]
  ! OR              [ reduce using rule 90 (variable -> ID .) ]
  ! PARENCLOSE      [ reduce using rule 90 (variable -> ID .) ]
  ! COLON           [ reduce using rule 90 (variable -> ID .) ]
  ! BRACECLOSE      [ reduce using rule 90 (variable -> ID .) ]


state 109

    (86) f -> CTEINT .

    MULTIPLY        reduce using rule 86 (f -> CTEINT .)
    DIVIDE          reduce using rule 86 (f -> CTEINT .)
    PLUS            reduce using rule 86 (f -> CTEINT .)
    MINUS           reduce using rule 86 (f -> CTEINT .)
    SEMICOLON       reduce using rule 86 (f -> CTEINT .)
    GREATHERTHAN    reduce using rule 86 (f -> CTEINT .)
    LESSTHAN        reduce using rule 86 (f -> CTEINT .)
    GREATHEREQUAL   reduce using rule 86 (f -> CTEINT .)
    LESSEQUAL       reduce using rule 86 (f -> CTEINT .)
    DIFFERENT       reduce using rule 86 (f -> CTEINT .)
    SAME            reduce using rule 86 (f -> CTEINT .)
    AND             reduce using rule 86 (f -> CTEINT .)
    OR              reduce using rule 86 (f -> CTEINT .)
    PARENCLOSE      reduce using rule 86 (f -> CTEINT .)
    COLON           reduce using rule 86 (f -> CTEINT .)
    BRACECLOSE      reduce using rule 86 (f -> CTEINT .)


state 110

    (87) f -> CTFLOAT .

    MULTIPLY        reduce using rule 87 (f -> CTFLOAT .)
    DIVIDE          reduce using rule 87 (f -> CTFLOAT .)
    PLUS            reduce using rule 87 (f -> CTFLOAT .)
    MINUS           reduce using rule 87 (f -> CTFLOAT .)
    SEMICOLON       reduce using rule 87 (f -> CTFLOAT .)
    GREATHERTHAN    reduce using rule 87 (f -> CTFLOAT .)
    LESSTHAN        reduce using rule 87 (f -> CTFLOAT .)
    GREATHEREQUAL   reduce using rule 87 (f -> CTFLOAT .)
    LESSEQUAL       reduce using rule 87 (f -> CTFLOAT .)
    DIFFERENT       reduce using rule 87 (f -> CTFLOAT .)
    SAME            reduce using rule 87 (f -> CTFLOAT .)
    AND             reduce using rule 87 (f -> CTFLOAT .)
    OR              reduce using rule 87 (f -> CTFLOAT .)
    PARENCLOSE      reduce using rule 87 (f -> CTFLOAT .)
    COLON           reduce using rule 87 (f -> CTFLOAT .)
    BRACECLOSE      reduce using rule 87 (f -> CTFLOAT .)


state 111

    (88) f -> variable .

    MULTIPLY        reduce using rule 88 (f -> variable .)
    DIVIDE          reduce using rule 88 (f -> variable .)
    PLUS            reduce using rule 88 (f -> variable .)
    MINUS           reduce using rule 88 (f -> variable .)
    SEMICOLON       reduce using rule 88 (f -> variable .)
    GREATHERTHAN    reduce using rule 88 (f -> variable .)
    LESSTHAN        reduce using rule 88 (f -> variable .)
    GREATHEREQUAL   reduce using rule 88 (f -> variable .)
    LESSEQUAL       reduce using rule 88 (f -> variable .)
    DIFFERENT       reduce using rule 88 (f -> variable .)
    SAME            reduce using rule 88 (f -> variable .)
    AND             reduce using rule 88 (f -> variable .)
    OR              reduce using rule 88 (f -> variable .)
    PARENCLOSE      reduce using rule 88 (f -> variable .)
    COLON           reduce using rule 88 (f -> variable .)
    BRACECLOSE      reduce using rule 88 (f -> variable .)


state 112

    (89) f -> call_func .

    MULTIPLY        reduce using rule 89 (f -> call_func .)
    DIVIDE          reduce using rule 89 (f -> call_func .)
    PLUS            reduce using rule 89 (f -> call_func .)
    MINUS           reduce using rule 89 (f -> call_func .)
    SEMICOLON       reduce using rule 89 (f -> call_func .)
    GREATHERTHAN    reduce using rule 89 (f -> call_func .)
    LESSTHAN        reduce using rule 89 (f -> call_func .)
    GREATHEREQUAL   reduce using rule 89 (f -> call_func .)
    LESSEQUAL       reduce using rule 89 (f -> call_func .)
    DIFFERENT       reduce using rule 89 (f -> call_func .)
    SAME            reduce using rule 89 (f -> call_func .)
    AND             reduce using rule 89 (f -> call_func .)
    OR              reduce using rule 89 (f -> call_func .)
    PARENCLOSE      reduce using rule 89 (f -> call_func .)
    COLON           reduce using rule 89 (f -> call_func .)
    BRACECLOSE      reduce using rule 89 (f -> call_func .)


state 113

    (108) while_loop -> WHILE whileMigaja . PARENOPEN exp PARENCLOSE whileEval body whileEnd

    PARENOPEN       shift and go to state 161


state 114

    (109) whileMigaja -> empty .

    PARENOPEN       reduce using rule 109 (whileMigaja -> empty .)


state 115

    (112) for_loop -> FOR PARENOPEN . for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body
    (113) for_assignment -> . variable EQUAL exp
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    for_assignment                 shift and go to state 162
    variable                       shift and go to state 163

state 116

    (115) max -> MAX PARENOPEN . exp PARENCLOSE SEMICOLON
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 164
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 117

    (116) min -> MIN PARENOPEN . exp PARENCLOSE SEMICOLON
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 165
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 118

    (117) sum -> SUM PARENOPEN . exp PARENCLOSE SEMICOLON
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 166
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 119

    (123) normal -> NORMAL PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (118) param_dist -> . variable
    (119) param_dist -> . variable COLON param_dist
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    param_dist                     shift and go to state 167
    variable                       shift and go to state 168

state 120

    (122) uniforme -> UNIFORME PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (118) param_dist -> . variable
    (119) param_dist -> . variable COLON param_dist
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    param_dist                     shift and go to state 169
    variable                       shift and go to state 168

state 121

    (121) poisson -> POISSON PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (118) param_dist -> . variable
    (119) param_dist -> . variable COLON param_dist
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    param_dist                     shift and go to state 170
    variable                       shift and go to state 168

state 122

    (120) binomial -> BINOMIAL PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (118) param_dist -> . variable
    (119) param_dist -> . variable COLON param_dist
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    param_dist                     shift and go to state 171
    variable                       shift and go to state 168

state 123

    (49) dec_variabless -> type dec_mvar . SEMICOLON dec_variabless
    (50) dec_variabless -> type dec_mvar . SEMICOLON

    SEMICOLON       shift and go to state 172


state 124

    (51) dec_mvar -> ID . COLON dec_mvar
    (52) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (53) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (54) dec_mvar -> ID .
    (55) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE
    (56) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 173
    BRACEOPEN       shift and go to state 174
    SEMICOLON       reduce using rule 54 (dec_mvar -> ID .)


state 125

    (22) param -> type variable COLON . param
    (21) param -> . type variable
    (22) param -> . type variable COLON param
    (23) param -> . empty
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR
    (124) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    PARENCLOSE      reduce using rule 124 (empty -> .)

    type                           shift and go to state 44
    param                          shift and go to state 175
    empty                          shift and go to state 46

state 126

    (19) dec_func -> FUNCTION type ID PARENOPEN param PARENCLOSE body .

    FUNCTION        reduce using rule 19 (dec_func -> FUNCTION type ID PARENOPEN param PARENCLOSE body .)
    MAIN            reduce using rule 19 (dec_func -> FUNCTION type ID PARENOPEN param PARENCLOSE body .)


state 127

    (20) dec_func -> FUNCTION VOID ID PARENOPEN param PARENCLOSE body .

    FUNCTION        reduce using rule 20 (dec_func -> FUNCTION VOID ID PARENOPEN param PARENCLOSE body .)
    MAIN            reduce using rule 20 (dec_func -> FUNCTION VOID ID PARENOPEN param PARENCLOSE body .)


state 128

    (15) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE COLON mvar
    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE

    BRACECLOSE      shift and go to state 176


state 129

    (14) mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar .

    SEMICOLON       reduce using rule 14 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar .)


state 130

    (57) assignment -> variable EQUAL exp . SEMICOLON
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    SEMICOLON       shift and go to state 177
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 131

    (93) condition -> IF PARENOPEN exp . PARENCLOSE cuadruploIF body ifEnd
    (94) condition -> IF PARENOPEN exp . PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 178
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 132

    (99) writing -> PRINT PARENOPEN writingg . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 179


state 133

    (100) writingg -> exp .
    (101) writingg -> exp . COLON writingg
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      reduce using rule 100 (writingg -> exp .)
    COLON           shift and go to state 180
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 134

    (102) writingg -> auxString .
    (103) writingg -> auxString . COLON writingg

    PARENCLOSE      reduce using rule 102 (writingg -> auxString .)
    COLON           shift and go to state 181


state 135

    (104) auxString -> CTESTRING .

    COLON           reduce using rule 104 (auxString -> CTESTRING .)
    PARENCLOSE      reduce using rule 104 (auxString -> CTESTRING .)


state 136

    (105) reading -> READ multivariables SEMICOLON .

    IF              reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    PRINT           reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    READ            reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    ID              reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    PLOT            reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    RETURN          reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    WHILE           reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    FOR             reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    MAX             reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    MIN             reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    SUM             reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    NORMAL          reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    UNIFORME        reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    POISSON         reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    BINOMIAL        reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    INT             reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    FLOAT           reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    CHAR            reduce using rule 105 (reading -> READ multivariables SEMICOLON .)
    BRACKETCLOSE    reduce using rule 105 (reading -> READ multivariables SEMICOLON .)


state 137

    (107) multivariables -> variable COLON . multivariables
    (106) multivariables -> . variable
    (107) multivariables -> . variable COLON multivariables
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    variable                       shift and go to state 99
    multivariables                 shift and go to state 182

state 138

    (58) call_func -> ID PARENOPEN call_funcc . PARENCLOSE

    PARENCLOSE      shift and go to state 183


state 139

    (59) call_funcc -> exp .
    (60) call_funcc -> exp . COLON call_funcc
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      reduce using rule 59 (call_funcc -> exp .)
    COLON           shift and go to state 184
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 140

    (61) call_funcc -> empty .

    PARENCLOSE      reduce using rule 61 (call_funcc -> empty .)


state 141

    (91) variable -> ID BRACEOPEN exp . BRACECLOSE
    (92) variable -> ID BRACEOPEN exp . BRACECLOSE BRACEOPEN exp BRACECLOSE
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    BRACECLOSE      shift and go to state 185
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 142

    (62) graph -> PLOT PARENOPEN exp . PARENCLOSE SEMICOLON
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 186
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 143

    (114) return -> RETURN exp SEMICOLON .

    IF              reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    READ            reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    ID              reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    PLOT            reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    MAX             reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    MIN             reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    SUM             reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    NORMAL          reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    UNIFORME        reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    POISSON         reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    BINOMIAL        reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    INT             reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    FLOAT           reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    CHAR            reduce using rule 114 (return -> RETURN exp SEMICOLON .)
    BRACKETCLOSE    reduce using rule 114 (return -> RETURN exp SEMICOLON .)


state 144

    (63) exp -> exp GREATHERTHAN . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 187
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 145

    (64) exp -> exp LESSTHAN . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 188
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 146

    (65) exp -> exp GREATHEREQUAL . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 189
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 147

    (66) exp -> exp LESSEQUAL . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 190
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 148

    (67) exp -> exp DIFFERENT . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 191
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 149

    (68) exp -> exp SAME . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 192
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 150

    (69) exp -> exp AND . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 193
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 151

    (70) exp -> exp OR . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 194
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 152

    (72) m_exp -> t m_expp .

    SEMICOLON       reduce using rule 72 (m_exp -> t m_expp .)
    GREATHERTHAN    reduce using rule 72 (m_exp -> t m_expp .)
    LESSTHAN        reduce using rule 72 (m_exp -> t m_expp .)
    GREATHEREQUAL   reduce using rule 72 (m_exp -> t m_expp .)
    LESSEQUAL       reduce using rule 72 (m_exp -> t m_expp .)
    DIFFERENT       reduce using rule 72 (m_exp -> t m_expp .)
    SAME            reduce using rule 72 (m_exp -> t m_expp .)
    AND             reduce using rule 72 (m_exp -> t m_expp .)
    OR              reduce using rule 72 (m_exp -> t m_expp .)
    PARENCLOSE      reduce using rule 72 (m_exp -> t m_expp .)
    COLON           reduce using rule 72 (m_exp -> t m_expp .)
    BRACECLOSE      reduce using rule 72 (m_exp -> t m_expp .)


state 153

    (73) m_expp -> PLUS . appendPLUS m_exp
    (76) appendPLUS -> . empty
    (124) empty -> .

    PARENOPEN       reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    CTEINT          reduce using rule 124 (empty -> .)
    CTFLOAT         reduce using rule 124 (empty -> .)

    appendPLUS                     shift and go to state 195
    empty                          shift and go to state 196

state 154

    (74) m_expp -> MINUS . appendMINUS m_exp
    (77) appendMINUS -> . empty
    (124) empty -> .

    PARENOPEN       reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    CTEINT          reduce using rule 124 (empty -> .)
    CTFLOAT         reduce using rule 124 (empty -> .)

    appendMINUS                    shift and go to state 197
    empty                          shift and go to state 198

state 155

    (75) m_expp -> empty .

    SEMICOLON       reduce using rule 75 (m_expp -> empty .)
    GREATHERTHAN    reduce using rule 75 (m_expp -> empty .)
    LESSTHAN        reduce using rule 75 (m_expp -> empty .)
    GREATHEREQUAL   reduce using rule 75 (m_expp -> empty .)
    LESSEQUAL       reduce using rule 75 (m_expp -> empty .)
    DIFFERENT       reduce using rule 75 (m_expp -> empty .)
    SAME            reduce using rule 75 (m_expp -> empty .)
    AND             reduce using rule 75 (m_expp -> empty .)
    OR              reduce using rule 75 (m_expp -> empty .)
    PARENCLOSE      reduce using rule 75 (m_expp -> empty .)
    COLON           reduce using rule 75 (m_expp -> empty .)
    BRACECLOSE      reduce using rule 75 (m_expp -> empty .)


state 156

    (80) t -> f termino .

    PLUS            reduce using rule 80 (t -> f termino .)
    MINUS           reduce using rule 80 (t -> f termino .)
    SEMICOLON       reduce using rule 80 (t -> f termino .)
    GREATHERTHAN    reduce using rule 80 (t -> f termino .)
    LESSTHAN        reduce using rule 80 (t -> f termino .)
    GREATHEREQUAL   reduce using rule 80 (t -> f termino .)
    LESSEQUAL       reduce using rule 80 (t -> f termino .)
    DIFFERENT       reduce using rule 80 (t -> f termino .)
    SAME            reduce using rule 80 (t -> f termino .)
    AND             reduce using rule 80 (t -> f termino .)
    OR              reduce using rule 80 (t -> f termino .)
    PARENCLOSE      reduce using rule 80 (t -> f termino .)
    COLON           reduce using rule 80 (t -> f termino .)
    BRACECLOSE      reduce using rule 80 (t -> f termino .)


state 157

    (81) termino -> MULTIPLY . appendMULTIPLY t
    (78) appendMULTIPLY -> . empty
    (124) empty -> .

    PARENOPEN       reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    CTEINT          reduce using rule 124 (empty -> .)
    CTFLOAT         reduce using rule 124 (empty -> .)

    appendMULTIPLY                 shift and go to state 199
    empty                          shift and go to state 200

state 158

    (82) termino -> DIVIDE . appendDIVIDE t
    (79) appendDIVIDE -> . empty
    (124) empty -> .

    PARENOPEN       reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    CTEINT          reduce using rule 124 (empty -> .)
    CTFLOAT         reduce using rule 124 (empty -> .)

    appendDIVIDE                   shift and go to state 201
    empty                          shift and go to state 202

state 159

    (83) termino -> empty .

    PLUS            reduce using rule 83 (termino -> empty .)
    MINUS           reduce using rule 83 (termino -> empty .)
    SEMICOLON       reduce using rule 83 (termino -> empty .)
    GREATHERTHAN    reduce using rule 83 (termino -> empty .)
    LESSTHAN        reduce using rule 83 (termino -> empty .)
    GREATHEREQUAL   reduce using rule 83 (termino -> empty .)
    LESSEQUAL       reduce using rule 83 (termino -> empty .)
    DIFFERENT       reduce using rule 83 (termino -> empty .)
    SAME            reduce using rule 83 (termino -> empty .)
    AND             reduce using rule 83 (termino -> empty .)
    OR              reduce using rule 83 (termino -> empty .)
    PARENCLOSE      reduce using rule 83 (termino -> empty .)
    COLON           reduce using rule 83 (termino -> empty .)
    BRACECLOSE      reduce using rule 83 (termino -> empty .)


state 160

    (84) f -> PARENOPEN exp . PARENCLOSE
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 203
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 161

    (108) while_loop -> WHILE whileMigaja PARENOPEN . exp PARENCLOSE whileEval body whileEnd
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 204
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 162

    (112) for_loop -> FOR PARENOPEN for_assignment . SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body

    SEMICOLON       shift and go to state 205


state 163

    (113) for_assignment -> variable . EQUAL exp

    EQUAL           shift and go to state 206


state 164

    (115) max -> MAX PARENOPEN exp . PARENCLOSE SEMICOLON
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 207
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 165

    (116) min -> MIN PARENOPEN exp . PARENCLOSE SEMICOLON
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 208
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 166

    (117) sum -> SUM PARENOPEN exp . PARENCLOSE SEMICOLON
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 209
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 167

    (123) normal -> NORMAL PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 210


state 168

    (118) param_dist -> variable .
    (119) param_dist -> variable . COLON param_dist

    PARENCLOSE      reduce using rule 118 (param_dist -> variable .)
    COLON           shift and go to state 211


state 169

    (122) uniforme -> UNIFORME PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 212


state 170

    (121) poisson -> POISSON PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 213


state 171

    (120) binomial -> BINOMIAL PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 214


state 172

    (49) dec_variabless -> type dec_mvar SEMICOLON . dec_variabless
    (50) dec_variabless -> type dec_mvar SEMICOLON .
    (49) dec_variabless -> . type dec_mvar SEMICOLON dec_variabless
    (50) dec_variabless -> . type dec_mvar SEMICOLON
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . CHAR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    IF              reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    PRINT           reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    READ            reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    ID              reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    PLOT            reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    RETURN          reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    WHILE           reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    FOR             reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    MAX             reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    MIN             reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    SUM             reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    NORMAL          reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    UNIFORME        reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    POISSON         reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    BINOMIAL        reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    BRACKETCLOSE    reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

  ! INT             [ reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .) ]
  ! CHAR            [ reduce using rule 50 (dec_variabless -> type dec_mvar SEMICOLON .) ]

    type                           shift and go to state 86
    dec_variabless                 shift and go to state 215

state 173

    (51) dec_mvar -> ID COLON . dec_mvar
    (51) dec_mvar -> . ID COLON dec_mvar
    (52) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (53) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (54) dec_mvar -> . ID
    (55) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (56) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 124

    dec_mvar                       shift and go to state 216

state 174

    (52) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE COLON dec_mvar
    (53) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (55) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE
    (56) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    CTEINT          shift and go to state 217


state 175

    (22) param -> type variable COLON param .

    PARENCLOSE      reduce using rule 22 (param -> type variable COLON param .)


state 176

    (15) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE . COLON mvar
    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .

    COLON           shift and go to state 218
    SEMICOLON       reduce using rule 18 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .)


state 177

    (57) assignment -> variable EQUAL exp SEMICOLON .

    IF              reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    READ            reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    ID              reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    PLOT            reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    FOR             reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    MAX             reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    MIN             reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    SUM             reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    NORMAL          reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    UNIFORME        reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    POISSON         reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    BINOMIAL        reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    INT             reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    FLOAT           reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    CHAR            reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)
    BRACKETCLOSE    reduce using rule 57 (assignment -> variable EQUAL exp SEMICOLON .)


state 178

    (93) condition -> IF PARENOPEN exp PARENCLOSE . cuadruploIF body ifEnd
    (94) condition -> IF PARENOPEN exp PARENCLOSE . cuadruploIF body cuadruploElse ELSE body ifEndElse
    (95) cuadruploIF -> . empty
    (124) empty -> .

    BRACKETOPEN     reduce using rule 124 (empty -> .)

    cuadruploIF                    shift and go to state 219
    empty                          shift and go to state 220

state 179

    (99) writing -> PRINT PARENOPEN writingg PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 221


state 180

    (101) writingg -> exp COLON . writingg
    (100) writingg -> . exp
    (101) writingg -> . exp COLON writingg
    (102) writingg -> . auxString
    (103) writingg -> . auxString COLON writingg
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (104) auxString -> . CTESTRING
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 135
    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 133
    writingg                       shift and go to state 222
    auxString                      shift and go to state 134
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 181

    (103) writingg -> auxString COLON . writingg
    (100) writingg -> . exp
    (101) writingg -> . exp COLON writingg
    (102) writingg -> . auxString
    (103) writingg -> . auxString COLON writingg
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (104) auxString -> . CTESTRING
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 135
    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    auxString                      shift and go to state 134
    writingg                       shift and go to state 223
    exp                            shift and go to state 133
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 182

    (107) multivariables -> variable COLON multivariables .

    SEMICOLON       reduce using rule 107 (multivariables -> variable COLON multivariables .)


state 183

    (58) call_func -> ID PARENOPEN call_funcc PARENCLOSE .

    IF              reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    PRINT           reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    READ            reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    ID              reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    PLOT            reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    RETURN          reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    WHILE           reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    FOR             reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    MAX             reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    MIN             reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    SUM             reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    NORMAL          reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    UNIFORME        reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    POISSON         reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    BINOMIAL        reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    INT             reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    FLOAT           reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    CHAR            reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    BRACKETCLOSE    reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    MULTIPLY        reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    DIVIDE          reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    PLUS            reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    MINUS           reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    SEMICOLON       reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    GREATHERTHAN    reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    LESSTHAN        reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    GREATHEREQUAL   reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    LESSEQUAL       reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    DIFFERENT       reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    SAME            reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    AND             reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    OR              reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    PARENCLOSE      reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    COLON           reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)
    BRACECLOSE      reduce using rule 58 (call_func -> ID PARENOPEN call_funcc PARENCLOSE .)


state 184

    (60) call_funcc -> exp COLON . call_funcc
    (59) call_funcc -> . exp
    (60) call_funcc -> . exp COLON call_funcc
    (61) call_funcc -> . empty
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (124) empty -> .
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENCLOSE      reduce using rule 124 (empty -> .)
    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 139
    call_funcc                     shift and go to state 224
    empty                          shift and go to state 140
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 185

    (91) variable -> ID BRACEOPEN exp BRACECLOSE .
    (92) variable -> ID BRACEOPEN exp BRACECLOSE . BRACEOPEN exp BRACECLOSE

    EQUAL           reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    COLON           reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    PARENCLOSE      reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    SEMICOLON       reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    MULTIPLY        reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    DIVIDE          reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    PLUS            reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    MINUS           reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    GREATHERTHAN    reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    LESSTHAN        reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    GREATHEREQUAL   reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    LESSEQUAL       reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    DIFFERENT       reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    SAME            reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    AND             reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    OR              reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    BRACECLOSE      reduce using rule 91 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    BRACEOPEN       shift and go to state 225


state 186

    (62) graph -> PLOT PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 226


state 187

    (63) exp -> exp GREATHERTHAN exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 63 (exp -> exp GREATHERTHAN exp .)
    PARENCLOSE      reduce using rule 63 (exp -> exp GREATHERTHAN exp .)
    COLON           reduce using rule 63 (exp -> exp GREATHERTHAN exp .)
    BRACECLOSE      reduce using rule 63 (exp -> exp GREATHERTHAN exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! GREATHERTHAN    [ reduce using rule 63 (exp -> exp GREATHERTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 63 (exp -> exp GREATHERTHAN exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 63 (exp -> exp GREATHERTHAN exp .) ]
  ! LESSEQUAL       [ reduce using rule 63 (exp -> exp GREATHERTHAN exp .) ]
  ! DIFFERENT       [ reduce using rule 63 (exp -> exp GREATHERTHAN exp .) ]
  ! SAME            [ reduce using rule 63 (exp -> exp GREATHERTHAN exp .) ]
  ! AND             [ reduce using rule 63 (exp -> exp GREATHERTHAN exp .) ]
  ! OR              [ reduce using rule 63 (exp -> exp GREATHERTHAN exp .) ]


state 188

    (64) exp -> exp LESSTHAN exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 64 (exp -> exp LESSTHAN exp .)
    PARENCLOSE      reduce using rule 64 (exp -> exp LESSTHAN exp .)
    COLON           reduce using rule 64 (exp -> exp LESSTHAN exp .)
    BRACECLOSE      reduce using rule 64 (exp -> exp LESSTHAN exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! GREATHERTHAN    [ reduce using rule 64 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 64 (exp -> exp LESSTHAN exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 64 (exp -> exp LESSTHAN exp .) ]
  ! LESSEQUAL       [ reduce using rule 64 (exp -> exp LESSTHAN exp .) ]
  ! DIFFERENT       [ reduce using rule 64 (exp -> exp LESSTHAN exp .) ]
  ! SAME            [ reduce using rule 64 (exp -> exp LESSTHAN exp .) ]
  ! AND             [ reduce using rule 64 (exp -> exp LESSTHAN exp .) ]
  ! OR              [ reduce using rule 64 (exp -> exp LESSTHAN exp .) ]


state 189

    (65) exp -> exp GREATHEREQUAL exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 65 (exp -> exp GREATHEREQUAL exp .)
    PARENCLOSE      reduce using rule 65 (exp -> exp GREATHEREQUAL exp .)
    COLON           reduce using rule 65 (exp -> exp GREATHEREQUAL exp .)
    BRACECLOSE      reduce using rule 65 (exp -> exp GREATHEREQUAL exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! GREATHERTHAN    [ reduce using rule 65 (exp -> exp GREATHEREQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 65 (exp -> exp GREATHEREQUAL exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 65 (exp -> exp GREATHEREQUAL exp .) ]
  ! LESSEQUAL       [ reduce using rule 65 (exp -> exp GREATHEREQUAL exp .) ]
  ! DIFFERENT       [ reduce using rule 65 (exp -> exp GREATHEREQUAL exp .) ]
  ! SAME            [ reduce using rule 65 (exp -> exp GREATHEREQUAL exp .) ]
  ! AND             [ reduce using rule 65 (exp -> exp GREATHEREQUAL exp .) ]
  ! OR              [ reduce using rule 65 (exp -> exp GREATHEREQUAL exp .) ]


state 190

    (66) exp -> exp LESSEQUAL exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 66 (exp -> exp LESSEQUAL exp .)
    PARENCLOSE      reduce using rule 66 (exp -> exp LESSEQUAL exp .)
    COLON           reduce using rule 66 (exp -> exp LESSEQUAL exp .)
    BRACECLOSE      reduce using rule 66 (exp -> exp LESSEQUAL exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! GREATHERTHAN    [ reduce using rule 66 (exp -> exp LESSEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 66 (exp -> exp LESSEQUAL exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 66 (exp -> exp LESSEQUAL exp .) ]
  ! LESSEQUAL       [ reduce using rule 66 (exp -> exp LESSEQUAL exp .) ]
  ! DIFFERENT       [ reduce using rule 66 (exp -> exp LESSEQUAL exp .) ]
  ! SAME            [ reduce using rule 66 (exp -> exp LESSEQUAL exp .) ]
  ! AND             [ reduce using rule 66 (exp -> exp LESSEQUAL exp .) ]
  ! OR              [ reduce using rule 66 (exp -> exp LESSEQUAL exp .) ]


state 191

    (67) exp -> exp DIFFERENT exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 67 (exp -> exp DIFFERENT exp .)
    PARENCLOSE      reduce using rule 67 (exp -> exp DIFFERENT exp .)
    COLON           reduce using rule 67 (exp -> exp DIFFERENT exp .)
    BRACECLOSE      reduce using rule 67 (exp -> exp DIFFERENT exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! GREATHERTHAN    [ reduce using rule 67 (exp -> exp DIFFERENT exp .) ]
  ! LESSTHAN        [ reduce using rule 67 (exp -> exp DIFFERENT exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 67 (exp -> exp DIFFERENT exp .) ]
  ! LESSEQUAL       [ reduce using rule 67 (exp -> exp DIFFERENT exp .) ]
  ! DIFFERENT       [ reduce using rule 67 (exp -> exp DIFFERENT exp .) ]
  ! SAME            [ reduce using rule 67 (exp -> exp DIFFERENT exp .) ]
  ! AND             [ reduce using rule 67 (exp -> exp DIFFERENT exp .) ]
  ! OR              [ reduce using rule 67 (exp -> exp DIFFERENT exp .) ]


state 192

    (68) exp -> exp SAME exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 68 (exp -> exp SAME exp .)
    PARENCLOSE      reduce using rule 68 (exp -> exp SAME exp .)
    COLON           reduce using rule 68 (exp -> exp SAME exp .)
    BRACECLOSE      reduce using rule 68 (exp -> exp SAME exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! GREATHERTHAN    [ reduce using rule 68 (exp -> exp SAME exp .) ]
  ! LESSTHAN        [ reduce using rule 68 (exp -> exp SAME exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 68 (exp -> exp SAME exp .) ]
  ! LESSEQUAL       [ reduce using rule 68 (exp -> exp SAME exp .) ]
  ! DIFFERENT       [ reduce using rule 68 (exp -> exp SAME exp .) ]
  ! SAME            [ reduce using rule 68 (exp -> exp SAME exp .) ]
  ! AND             [ reduce using rule 68 (exp -> exp SAME exp .) ]
  ! OR              [ reduce using rule 68 (exp -> exp SAME exp .) ]


state 193

    (69) exp -> exp AND exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 69 (exp -> exp AND exp .)
    PARENCLOSE      reduce using rule 69 (exp -> exp AND exp .)
    COLON           reduce using rule 69 (exp -> exp AND exp .)
    BRACECLOSE      reduce using rule 69 (exp -> exp AND exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! GREATHERTHAN    [ reduce using rule 69 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 69 (exp -> exp AND exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 69 (exp -> exp AND exp .) ]
  ! LESSEQUAL       [ reduce using rule 69 (exp -> exp AND exp .) ]
  ! DIFFERENT       [ reduce using rule 69 (exp -> exp AND exp .) ]
  ! SAME            [ reduce using rule 69 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 69 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 69 (exp -> exp AND exp .) ]


state 194

    (70) exp -> exp OR exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

  ! shift/reduce conflict for GREATHERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATHEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for SAME resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 70 (exp -> exp OR exp .)
    PARENCLOSE      reduce using rule 70 (exp -> exp OR exp .)
    COLON           reduce using rule 70 (exp -> exp OR exp .)
    BRACECLOSE      reduce using rule 70 (exp -> exp OR exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151

  ! GREATHERTHAN    [ reduce using rule 70 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 70 (exp -> exp OR exp .) ]
  ! GREATHEREQUAL   [ reduce using rule 70 (exp -> exp OR exp .) ]
  ! LESSEQUAL       [ reduce using rule 70 (exp -> exp OR exp .) ]
  ! DIFFERENT       [ reduce using rule 70 (exp -> exp OR exp .) ]
  ! SAME            [ reduce using rule 70 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 70 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 70 (exp -> exp OR exp .) ]


state 195

    (73) m_expp -> PLUS appendPLUS . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    m_exp                          shift and go to state 227
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 196

    (76) appendPLUS -> empty .

    PARENOPEN       reduce using rule 76 (appendPLUS -> empty .)
    ID              reduce using rule 76 (appendPLUS -> empty .)
    CTEINT          reduce using rule 76 (appendPLUS -> empty .)
    CTFLOAT         reduce using rule 76 (appendPLUS -> empty .)


state 197

    (74) m_expp -> MINUS appendMINUS . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    m_exp                          shift and go to state 228
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 198

    (77) appendMINUS -> empty .

    PARENOPEN       reduce using rule 77 (appendMINUS -> empty .)
    ID              reduce using rule 77 (appendMINUS -> empty .)
    CTEINT          reduce using rule 77 (appendMINUS -> empty .)
    CTFLOAT         reduce using rule 77 (appendMINUS -> empty .)


state 199

    (81) termino -> MULTIPLY appendMULTIPLY . t
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    t                              shift and go to state 229
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 200

    (78) appendMULTIPLY -> empty .

    PARENOPEN       reduce using rule 78 (appendMULTIPLY -> empty .)
    ID              reduce using rule 78 (appendMULTIPLY -> empty .)
    CTEINT          reduce using rule 78 (appendMULTIPLY -> empty .)
    CTFLOAT         reduce using rule 78 (appendMULTIPLY -> empty .)


state 201

    (82) termino -> DIVIDE appendDIVIDE . t
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    t                              shift and go to state 230
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 202

    (79) appendDIVIDE -> empty .

    PARENOPEN       reduce using rule 79 (appendDIVIDE -> empty .)
    ID              reduce using rule 79 (appendDIVIDE -> empty .)
    CTEINT          reduce using rule 79 (appendDIVIDE -> empty .)
    CTFLOAT         reduce using rule 79 (appendDIVIDE -> empty .)


state 203

    (84) f -> PARENOPEN exp PARENCLOSE .

    MULTIPLY        reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    DIVIDE          reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    PLUS            reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    MINUS           reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    SEMICOLON       reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    GREATHERTHAN    reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    LESSTHAN        reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    GREATHEREQUAL   reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    LESSEQUAL       reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    DIFFERENT       reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    SAME            reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    AND             reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    OR              reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    PARENCLOSE      reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    COLON           reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)
    BRACECLOSE      reduce using rule 84 (f -> PARENOPEN exp PARENCLOSE .)


state 204

    (108) while_loop -> WHILE whileMigaja PARENOPEN exp . PARENCLOSE whileEval body whileEnd
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    PARENCLOSE      shift and go to state 231
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 205

    (112) for_loop -> FOR PARENOPEN for_assignment SEMICOLON . exp SEMICOLON for_assignment PARENCLOSE body
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 232
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 206

    (113) for_assignment -> variable EQUAL . exp
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    variable                       shift and go to state 111
    exp                            shift and go to state 233
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    call_func                      shift and go to state 112

state 207

    (115) max -> MAX PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 234


state 208

    (116) min -> MIN PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 235


state 209

    (117) sum -> SUM PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 236


state 210

    (123) normal -> NORMAL PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 237


state 211

    (119) param_dist -> variable COLON . param_dist
    (118) param_dist -> . variable
    (119) param_dist -> . variable COLON param_dist
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    variable                       shift and go to state 168
    param_dist                     shift and go to state 238

state 212

    (122) uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 239


state 213

    (121) poisson -> POISSON PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 240


state 214

    (120) binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 241


state 215

    (49) dec_variabless -> type dec_mvar SEMICOLON dec_variabless .

    IF              reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    PRINT           reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    READ            reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    ID              reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    PLOT            reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    RETURN          reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    WHILE           reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    FOR             reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    MAX             reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    MIN             reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    SUM             reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    NORMAL          reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    UNIFORME        reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    POISSON         reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    BINOMIAL        reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    INT             reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    FLOAT           reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    CHAR            reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)
    BRACKETCLOSE    reduce using rule 49 (dec_variabless -> type dec_mvar SEMICOLON dec_variabless .)


state 216

    (51) dec_mvar -> ID COLON dec_mvar .

    SEMICOLON       reduce using rule 51 (dec_mvar -> ID COLON dec_mvar .)


state 217

    (52) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE COLON dec_mvar
    (53) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (55) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE
    (56) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    BRACECLOSE      shift and go to state 242


state 218

    (15) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON . mvar
    (13) mvar -> . ID COLON mvar
    (14) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (15) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (16) mvar -> . ID
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 28

    mvar                           shift and go to state 243

state 219

    (93) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF . body ifEnd
    (94) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF . body cuadruploElse ELSE body ifEndElse
    (27) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 43

    body                           shift and go to state 244

state 220

    (95) cuadruploIF -> empty .

    BRACKETOPEN     reduce using rule 95 (cuadruploIF -> empty .)


state 221

    (99) writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .

    IF              reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    READ            reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    ID              reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    INT             reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 99 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)


state 222

    (101) writingg -> exp COLON writingg .

    PARENCLOSE      reduce using rule 101 (writingg -> exp COLON writingg .)


state 223

    (103) writingg -> auxString COLON writingg .

    PARENCLOSE      reduce using rule 103 (writingg -> auxString COLON writingg .)


state 224

    (60) call_funcc -> exp COLON call_funcc .

    PARENCLOSE      reduce using rule 60 (call_funcc -> exp COLON call_funcc .)


state 225

    (92) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN . exp BRACECLOSE
    (63) exp -> . exp GREATHERTHAN exp
    (64) exp -> . exp LESSTHAN exp
    (65) exp -> . exp GREATHEREQUAL exp
    (66) exp -> . exp LESSEQUAL exp
    (67) exp -> . exp DIFFERENT exp
    (68) exp -> . exp SAME exp
    (69) exp -> . exp AND exp
    (70) exp -> . exp OR exp
    (71) exp -> . m_exp
    (72) m_exp -> . t m_expp
    (80) t -> . f termino
    (84) f -> . PARENOPEN exp PARENCLOSE
    (85) f -> . ID
    (86) f -> . CTEINT
    (87) f -> . CTFLOAT
    (88) f -> . variable
    (89) f -> . call_func
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (58) call_func -> . ID PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 107
    ID              shift and go to state 108
    CTEINT          shift and go to state 109
    CTFLOAT         shift and go to state 110

    exp                            shift and go to state 245
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    variable                       shift and go to state 111
    call_func                      shift and go to state 112

state 226

    (62) graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 62 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)


state 227

    (73) m_expp -> PLUS appendPLUS m_exp .

    SEMICOLON       reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    GREATHERTHAN    reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    LESSTHAN        reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    GREATHEREQUAL   reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    LESSEQUAL       reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    DIFFERENT       reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    SAME            reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    AND             reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    OR              reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    PARENCLOSE      reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    COLON           reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)
    BRACECLOSE      reduce using rule 73 (m_expp -> PLUS appendPLUS m_exp .)


state 228

    (74) m_expp -> MINUS appendMINUS m_exp .

    SEMICOLON       reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    GREATHERTHAN    reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    LESSTHAN        reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    GREATHEREQUAL   reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    LESSEQUAL       reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    DIFFERENT       reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    SAME            reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    AND             reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    OR              reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    PARENCLOSE      reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    COLON           reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)
    BRACECLOSE      reduce using rule 74 (m_expp -> MINUS appendMINUS m_exp .)


state 229

    (81) termino -> MULTIPLY appendMULTIPLY t .

    PLUS            reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    MINUS           reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    SEMICOLON       reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    GREATHERTHAN    reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    LESSTHAN        reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    GREATHEREQUAL   reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    LESSEQUAL       reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    DIFFERENT       reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    SAME            reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    AND             reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    OR              reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    PARENCLOSE      reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    COLON           reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)
    BRACECLOSE      reduce using rule 81 (termino -> MULTIPLY appendMULTIPLY t .)


state 230

    (82) termino -> DIVIDE appendDIVIDE t .

    PLUS            reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    MINUS           reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    SEMICOLON       reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    GREATHERTHAN    reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    LESSTHAN        reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    GREATHEREQUAL   reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    LESSEQUAL       reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    DIFFERENT       reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    SAME            reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    AND             reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    OR              reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    PARENCLOSE      reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    COLON           reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)
    BRACECLOSE      reduce using rule 82 (termino -> DIVIDE appendDIVIDE t .)


state 231

    (108) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE . whileEval body whileEnd
    (110) whileEval -> . empty
    (124) empty -> .

    BRACKETOPEN     reduce using rule 124 (empty -> .)

    whileEval                      shift and go to state 246
    empty                          shift and go to state 247

state 232

    (112) for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp . SEMICOLON for_assignment PARENCLOSE body
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    SEMICOLON       shift and go to state 248
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 233

    (113) for_assignment -> variable EQUAL exp .
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    SEMICOLON       reduce using rule 113 (for_assignment -> variable EQUAL exp .)
    PARENCLOSE      reduce using rule 113 (for_assignment -> variable EQUAL exp .)
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 234

    (115) max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 115 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)


state 235

    (116) min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 116 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)


state 236

    (117) sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 117 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)


state 237

    (123) normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 123 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 238

    (119) param_dist -> variable COLON param_dist .

    PARENCLOSE      reduce using rule 119 (param_dist -> variable COLON param_dist .)


state 239

    (122) uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 122 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 240

    (121) poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 121 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 241

    (120) binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 120 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 242

    (52) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . COLON dec_mvar
    (53) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (55) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE .
    (56) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 250
    BRACEOPEN       shift and go to state 249
    SEMICOLON       reduce using rule 55 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE .)


state 243

    (15) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar .

    SEMICOLON       reduce using rule 15 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar .)


state 244

    (93) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body . ifEnd
    (94) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body . cuadruploElse ELSE body ifEndElse
    (96) ifEnd -> . empty
    (97) cuadruploElse -> . empty
    (124) empty -> .

    IF              reduce using rule 124 (empty -> .)
    PRINT           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    PLOT            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    FOR             reduce using rule 124 (empty -> .)
    MAX             reduce using rule 124 (empty -> .)
    MIN             reduce using rule 124 (empty -> .)
    SUM             reduce using rule 124 (empty -> .)
    NORMAL          reduce using rule 124 (empty -> .)
    UNIFORME        reduce using rule 124 (empty -> .)
    POISSON         reduce using rule 124 (empty -> .)
    BINOMIAL        reduce using rule 124 (empty -> .)
    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    CHAR            reduce using rule 124 (empty -> .)
    BRACKETCLOSE    reduce using rule 124 (empty -> .)
    ELSE            reduce using rule 124 (empty -> .)

    ifEnd                          shift and go to state 251
    cuadruploElse                  shift and go to state 252
    empty                          shift and go to state 253

state 245

    (92) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp . BRACECLOSE
    (63) exp -> exp . GREATHERTHAN exp
    (64) exp -> exp . LESSTHAN exp
    (65) exp -> exp . GREATHEREQUAL exp
    (66) exp -> exp . LESSEQUAL exp
    (67) exp -> exp . DIFFERENT exp
    (68) exp -> exp . SAME exp
    (69) exp -> exp . AND exp
    (70) exp -> exp . OR exp

    BRACECLOSE      shift and go to state 254
    GREATHERTHAN    shift and go to state 144
    LESSTHAN        shift and go to state 145
    GREATHEREQUAL   shift and go to state 146
    LESSEQUAL       shift and go to state 147
    DIFFERENT       shift and go to state 148
    SAME            shift and go to state 149
    AND             shift and go to state 150
    OR              shift and go to state 151


state 246

    (108) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval . body whileEnd
    (27) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 43

    body                           shift and go to state 255

state 247

    (110) whileEval -> empty .

    BRACKETOPEN     reduce using rule 110 (whileEval -> empty .)


state 248

    (112) for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON . for_assignment PARENCLOSE body
    (113) for_assignment -> . variable EQUAL exp
    (90) variable -> . ID
    (91) variable -> . ID BRACEOPEN exp BRACECLOSE
    (92) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 88

    for_assignment                 shift and go to state 256
    variable                       shift and go to state 163

state 249

    (53) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE COLON dec_mvar
    (56) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE

    CTEINT          shift and go to state 257


state 250

    (52) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON . dec_mvar
    (51) dec_mvar -> . ID COLON dec_mvar
    (52) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (53) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (54) dec_mvar -> . ID
    (55) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (56) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 124

    dec_mvar                       shift and go to state 258

state 251

    (93) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .

    IF              reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    PRINT           reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    READ            reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    ID              reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    PLOT            reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    RETURN          reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    WHILE           reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    FOR             reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    MAX             reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    MIN             reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    SUM             reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    NORMAL          reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    UNIFORME        reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    POISSON         reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    BINOMIAL        reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    INT             reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    FLOAT           reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    CHAR            reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    BRACKETCLOSE    reduce using rule 93 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)


state 252

    (94) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse . ELSE body ifEndElse

    ELSE            shift and go to state 259


state 253

    (96) ifEnd -> empty .
    (97) cuadruploElse -> empty .

    IF              reduce using rule 96 (ifEnd -> empty .)
    PRINT           reduce using rule 96 (ifEnd -> empty .)
    READ            reduce using rule 96 (ifEnd -> empty .)
    ID              reduce using rule 96 (ifEnd -> empty .)
    PLOT            reduce using rule 96 (ifEnd -> empty .)
    RETURN          reduce using rule 96 (ifEnd -> empty .)
    WHILE           reduce using rule 96 (ifEnd -> empty .)
    FOR             reduce using rule 96 (ifEnd -> empty .)
    MAX             reduce using rule 96 (ifEnd -> empty .)
    MIN             reduce using rule 96 (ifEnd -> empty .)
    SUM             reduce using rule 96 (ifEnd -> empty .)
    NORMAL          reduce using rule 96 (ifEnd -> empty .)
    UNIFORME        reduce using rule 96 (ifEnd -> empty .)
    POISSON         reduce using rule 96 (ifEnd -> empty .)
    BINOMIAL        reduce using rule 96 (ifEnd -> empty .)
    INT             reduce using rule 96 (ifEnd -> empty .)
    FLOAT           reduce using rule 96 (ifEnd -> empty .)
    CHAR            reduce using rule 96 (ifEnd -> empty .)
    BRACKETCLOSE    reduce using rule 96 (ifEnd -> empty .)
    ELSE            reduce using rule 97 (cuadruploElse -> empty .)


state 254

    (92) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .

    EQUAL           reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    COLON           reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    PARENCLOSE      reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    SEMICOLON       reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    MULTIPLY        reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    DIVIDE          reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    PLUS            reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    MINUS           reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    GREATHERTHAN    reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    LESSTHAN        reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    GREATHEREQUAL   reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    LESSEQUAL       reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    DIFFERENT       reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    SAME            reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    AND             reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    OR              reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    BRACECLOSE      reduce using rule 92 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)


state 255

    (108) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body . whileEnd
    (111) whileEnd -> . empty
    (124) empty -> .

    IF              reduce using rule 124 (empty -> .)
    PRINT           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    PLOT            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    FOR             reduce using rule 124 (empty -> .)
    MAX             reduce using rule 124 (empty -> .)
    MIN             reduce using rule 124 (empty -> .)
    SUM             reduce using rule 124 (empty -> .)
    NORMAL          reduce using rule 124 (empty -> .)
    UNIFORME        reduce using rule 124 (empty -> .)
    POISSON         reduce using rule 124 (empty -> .)
    BINOMIAL        reduce using rule 124 (empty -> .)
    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    CHAR            reduce using rule 124 (empty -> .)
    BRACKETCLOSE    reduce using rule 124 (empty -> .)

    whileEnd                       shift and go to state 260
    empty                          shift and go to state 261

state 256

    (112) for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment . PARENCLOSE body

    PARENCLOSE      shift and go to state 262


state 257

    (53) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE COLON dec_mvar
    (56) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE

    BRACECLOSE      shift and go to state 263


state 258

    (52) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .

    SEMICOLON       reduce using rule 52 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .)


state 259

    (94) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE . body ifEndElse
    (27) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 43

    body                           shift and go to state 264

state 260

    (108) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .

    IF              reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    PRINT           reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    READ            reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    ID              reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    PLOT            reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    RETURN          reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    WHILE           reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    FOR             reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    MAX             reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    MIN             reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    SUM             reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    NORMAL          reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    UNIFORME        reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    POISSON         reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    BINOMIAL        reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    INT             reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    FLOAT           reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    CHAR            reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    BRACKETCLOSE    reduce using rule 108 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)


state 261

    (111) whileEnd -> empty .

    IF              reduce using rule 111 (whileEnd -> empty .)
    PRINT           reduce using rule 111 (whileEnd -> empty .)
    READ            reduce using rule 111 (whileEnd -> empty .)
    ID              reduce using rule 111 (whileEnd -> empty .)
    PLOT            reduce using rule 111 (whileEnd -> empty .)
    RETURN          reduce using rule 111 (whileEnd -> empty .)
    WHILE           reduce using rule 111 (whileEnd -> empty .)
    FOR             reduce using rule 111 (whileEnd -> empty .)
    MAX             reduce using rule 111 (whileEnd -> empty .)
    MIN             reduce using rule 111 (whileEnd -> empty .)
    SUM             reduce using rule 111 (whileEnd -> empty .)
    NORMAL          reduce using rule 111 (whileEnd -> empty .)
    UNIFORME        reduce using rule 111 (whileEnd -> empty .)
    POISSON         reduce using rule 111 (whileEnd -> empty .)
    BINOMIAL        reduce using rule 111 (whileEnd -> empty .)
    INT             reduce using rule 111 (whileEnd -> empty .)
    FLOAT           reduce using rule 111 (whileEnd -> empty .)
    CHAR            reduce using rule 111 (whileEnd -> empty .)
    BRACKETCLOSE    reduce using rule 111 (whileEnd -> empty .)


state 262

    (112) for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE . body
    (27) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 43

    body                           shift and go to state 265

state 263

    (53) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE . COLON dec_mvar
    (56) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .

    COLON           shift and go to state 266
    SEMICOLON       reduce using rule 56 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .)


state 264

    (94) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body . ifEndElse
    (98) ifEndElse -> . empty
    (124) empty -> .

    IF              reduce using rule 124 (empty -> .)
    PRINT           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    PLOT            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    FOR             reduce using rule 124 (empty -> .)
    MAX             reduce using rule 124 (empty -> .)
    MIN             reduce using rule 124 (empty -> .)
    SUM             reduce using rule 124 (empty -> .)
    NORMAL          reduce using rule 124 (empty -> .)
    UNIFORME        reduce using rule 124 (empty -> .)
    POISSON         reduce using rule 124 (empty -> .)
    BINOMIAL        reduce using rule 124 (empty -> .)
    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    CHAR            reduce using rule 124 (empty -> .)
    BRACKETCLOSE    reduce using rule 124 (empty -> .)

    ifEndElse                      shift and go to state 267
    empty                          shift and go to state 268

state 265

    (112) for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .

    IF              reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    PRINT           reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    READ            reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    ID              reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    PLOT            reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    RETURN          reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    WHILE           reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    FOR             reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    MAX             reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    MIN             reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    SUM             reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    NORMAL          reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    UNIFORME        reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    POISSON         reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    BINOMIAL        reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    INT             reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    FLOAT           reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    CHAR            reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)
    BRACKETCLOSE    reduce using rule 112 (for_loop -> FOR PARENOPEN for_assignment SEMICOLON exp SEMICOLON for_assignment PARENCLOSE body .)


state 266

    (53) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON . dec_mvar
    (51) dec_mvar -> . ID COLON dec_mvar
    (52) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (53) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (54) dec_mvar -> . ID
    (55) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (56) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 124

    dec_mvar                       shift and go to state 269

state 267

    (94) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .

    IF              reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    PRINT           reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    READ            reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    ID              reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    PLOT            reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    RETURN          reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    WHILE           reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    FOR             reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    MAX             reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    MIN             reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    SUM             reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    NORMAL          reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    UNIFORME        reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    POISSON         reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    BINOMIAL        reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    INT             reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    FLOAT           reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    CHAR            reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    BRACKETCLOSE    reduce using rule 94 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)


state 268

    (98) ifEndElse -> empty .

    IF              reduce using rule 98 (ifEndElse -> empty .)
    PRINT           reduce using rule 98 (ifEndElse -> empty .)
    READ            reduce using rule 98 (ifEndElse -> empty .)
    ID              reduce using rule 98 (ifEndElse -> empty .)
    PLOT            reduce using rule 98 (ifEndElse -> empty .)
    RETURN          reduce using rule 98 (ifEndElse -> empty .)
    WHILE           reduce using rule 98 (ifEndElse -> empty .)
    FOR             reduce using rule 98 (ifEndElse -> empty .)
    MAX             reduce using rule 98 (ifEndElse -> empty .)
    MIN             reduce using rule 98 (ifEndElse -> empty .)
    SUM             reduce using rule 98 (ifEndElse -> empty .)
    NORMAL          reduce using rule 98 (ifEndElse -> empty .)
    UNIFORME        reduce using rule 98 (ifEndElse -> empty .)
    POISSON         reduce using rule 98 (ifEndElse -> empty .)
    BINOMIAL        reduce using rule 98 (ifEndElse -> empty .)
    INT             reduce using rule 98 (ifEndElse -> empty .)
    FLOAT           reduce using rule 98 (ifEndElse -> empty .)
    CHAR            reduce using rule 98 (ifEndElse -> empty .)
    BRACKETCLOSE    reduce using rule 98 (ifEndElse -> empty .)


state 269

    (53) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .

    SEMICOLON       reduce using rule 53 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 172 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 172 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 172 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 187 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 187 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 187 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 187 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 187 resolved as shift
WARNING: shift/reduce conflict for SAME in state 187 resolved as shift
WARNING: shift/reduce conflict for AND in state 187 resolved as shift
WARNING: shift/reduce conflict for OR in state 187 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 188 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 188 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 188 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 188 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 188 resolved as shift
WARNING: shift/reduce conflict for SAME in state 188 resolved as shift
WARNING: shift/reduce conflict for AND in state 188 resolved as shift
WARNING: shift/reduce conflict for OR in state 188 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 189 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 189 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 189 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 189 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 189 resolved as shift
WARNING: shift/reduce conflict for SAME in state 189 resolved as shift
WARNING: shift/reduce conflict for AND in state 189 resolved as shift
WARNING: shift/reduce conflict for OR in state 189 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 190 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 190 resolved as shift
WARNING: shift/reduce conflict for SAME in state 190 resolved as shift
WARNING: shift/reduce conflict for AND in state 190 resolved as shift
WARNING: shift/reduce conflict for OR in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 191 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 191 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 191 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 191 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 191 resolved as shift
WARNING: shift/reduce conflict for SAME in state 191 resolved as shift
WARNING: shift/reduce conflict for AND in state 191 resolved as shift
WARNING: shift/reduce conflict for OR in state 191 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 192 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 192 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 192 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 192 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 192 resolved as shift
WARNING: shift/reduce conflict for SAME in state 192 resolved as shift
WARNING: shift/reduce conflict for AND in state 192 resolved as shift
WARNING: shift/reduce conflict for OR in state 192 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 193 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 193 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 193 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 193 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 193 resolved as shift
WARNING: shift/reduce conflict for SAME in state 193 resolved as shift
WARNING: shift/reduce conflict for AND in state 193 resolved as shift
WARNING: shift/reduce conflict for OR in state 193 resolved as shift
WARNING: shift/reduce conflict for GREATHERTHAN in state 194 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 194 resolved as shift
WARNING: shift/reduce conflict for GREATHEREQUAL in state 194 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 194 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 194 resolved as shift
WARNING: shift/reduce conflict for SAME in state 194 resolved as shift
WARNING: shift/reduce conflict for AND in state 194 resolved as shift
WARNING: shift/reduce conflict for OR in state 194 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (bodyy -> statement)
WARNING: rejected rule (empty -> <empty>) in state 50
WARNING: reduce/reduce conflict in state 108 resolved using rule (f -> ID)
WARNING: rejected rule (variable -> ID) in state 108
