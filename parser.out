Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start_program
Rule 1     start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body end
Rule 2     start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body end
Rule 3     start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body end
Rule 4     start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body end
Rule 5     cuadruploMain -> empty
Rule 6     multiple_funcs -> dec_func
Rule 7     multiple_funcs -> dec_func multiple_funcs
Rule 8     main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
Rule 9     crearTablaMain -> empty
Rule 10    gotoMain -> empty
Rule 11    end -> empty
Rule 12    vars -> VAR varss
Rule 13    varss -> type guardarTipo mvar SEMICOLON varss
Rule 14    varss -> type guardarTipo mvar SEMICOLON
Rule 15    guardarTipo -> empty
Rule 16    mvar -> ID COLON mvar
Rule 17    mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
Rule 18    mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
Rule 19    mvar -> ID
Rule 20    mvar -> ID BRACEOPEN CTEINT BRACECLOSE
Rule 21    mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE
Rule 22    dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
Rule 23    dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
Rule 24    crearSymbolTable -> empty
Rule 25    exitFunc -> empty
Rule 26    param -> typeParam ID
Rule 27    param -> typeParam ID COLON param
Rule 28    param -> empty
Rule 29    typeParam -> INT
Rule 30    typeParam -> FLOAT
Rule 31    typeParam -> CHAR
Rule 32    type -> INT
Rule 33    type -> FLOAT
Rule 34    type -> CHAR
Rule 35    body -> BRACKETOPEN bodyy BRACKETCLOSE
Rule 36    bodyy -> statement
Rule 37    bodyy -> statement bodyy
Rule 38    bodyy -> empty
Rule 39    statement -> dec_variables
Rule 40    statement -> assignment
Rule 41    statement -> condition
Rule 42    statement -> writing
Rule 43    statement -> reading
Rule 44    statement -> call_func
Rule 45    statement -> graph
Rule 46    statement -> return
Rule 47    statement -> while_loop
Rule 48    statement -> for_loop
Rule 49    statement -> max
Rule 50    statement -> min
Rule 51    statement -> sum
Rule 52    statement -> normal
Rule 53    statement -> uniforme
Rule 54    statement -> poisson
Rule 55    statement -> binomial
Rule 56    dec_variables -> dec_variabless
Rule 57    dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless
Rule 58    dec_variabless -> type guardarTipo dec_mvar SEMICOLON
Rule 59    dec_mvar -> ID COLON dec_mvar
Rule 60    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
Rule 61    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
Rule 62    dec_mvar -> ID
Rule 63    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE
Rule 64    dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE
Rule 65    assignment -> variableAssignment EQUAL exp SEMICOLON
Rule 66    call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE
Rule 67    generarERA -> empty
Rule 68    call_funcc -> exp mandarParam
Rule 69    call_funcc -> exp mandarParam COLON call_funcc
Rule 70    call_funcc -> empty
Rule 71    mandarParam -> empty
Rule 72    graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON
Rule 73    exp -> expp
Rule 74    exp -> exp AND expp
Rule 75    exp -> exp OR expp
Rule 76    expp -> m_exp
Rule 77    expp -> expp GREATHERTHAN m_exp
Rule 78    expp -> expp LESSTHAN m_exp
Rule 79    expp -> expp GREATHEREQUAL m_exp
Rule 80    expp -> expp LESSEQUAL m_exp
Rule 81    expp -> expp DIFFERENT m_exp
Rule 82    expp -> expp SAME m_exp
Rule 83    m_exp -> termino
Rule 84    m_exp -> m_exp PLUS termino
Rule 85    m_exp -> m_exp MINUS termino
Rule 86    termino -> factor
Rule 87    termino -> termino MULTIPLY factor
Rule 88    termino -> termino DIVIDE factor
Rule 89    factor -> ID
Rule 90    factor -> CTEINT guardarConstanteInt
Rule 91    factor -> CTFLOAT guardarConstanteFloat
Rule 92    factor -> variable
Rule 93    factor -> call_func
Rule 94    factor -> PARENOPEN exp PARENCLOSE
Rule 95    guardarConstanteInt -> empty
Rule 96    guardarConstanteFloat -> empty
Rule 97    variable -> ID
Rule 98    variable -> ID BRACEOPEN exp BRACECLOSE
Rule 99    variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
Rule 100   variableAssignment -> ID
Rule 101   variableAssignment -> ID BRACEOPEN exp BRACECLOSE
Rule 102   variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
Rule 103   condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
Rule 104   condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
Rule 105   cuadruploIF -> empty
Rule 106   ifEnd -> empty
Rule 107   cuadruploElse -> empty
Rule 108   ifEndElse -> empty
Rule 109   writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
Rule 110   writingg -> exp
Rule 111   writingg -> exp COLON writingg
Rule 112   writingg -> auxString
Rule 113   writingg -> auxString COLON writingg
Rule 114   auxString -> CTESTRING
Rule 115   reading -> READ multivariables SEMICOLON
Rule 116   multivariables -> variable
Rule 117   multivariables -> variable COLON multivariables
Rule 118   while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
Rule 119   whileMigaja -> empty
Rule 120   whileEval -> empty
Rule 121   whileEnd -> empty
Rule 122   for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
Rule 123   guardarValorFor -> empty
Rule 124   forEnd -> empty
Rule 125   return -> RETURN exp SEMICOLON
Rule 126   max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON
Rule 127   min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON
Rule 128   sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON
Rule 129   param_dist -> variable
Rule 130   param_dist -> variable COLON param_dist
Rule 131   binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 132   poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 133   uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 134   normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
Rule 135   empty -> <empty>

Terminals, with rules where they appear

AND                  : 74
BINOMIAL             : 131
BRACECLOSE           : 17 18 18 20 21 21 60 61 61 63 64 64 98 99 99 101 102 102
BRACEOPEN            : 17 18 18 20 21 21 60 61 61 63 64 64 98 99 99 101 102 102
BRACKETCLOSE         : 35
BRACKETOPEN          : 35
CHAR                 : 31 34
COLON                : 16 17 18 27 59 60 61 69 111 113 117 130
CTEINT               : 17 18 18 20 21 21 60 61 61 63 64 64 90
CTESTRING            : 114
CTFLOAT              : 91
DIFFERENT            : 81
DIVIDE               : 88
ELSE                 : 104
EQUAL                : 65 122
FLOAT                : 30 33
FOR                  : 122
FUNCTION             : 22 23
GREATHEREQUAL        : 79
GREATHERTHAN         : 77
ID                   : 1 2 3 4 16 17 18 19 20 21 22 23 26 27 59 60 61 62 63 64 66 89 97 98 99 100 101 102 122
IF                   : 103 104
INT                  : 29 32
LESSEQUAL            : 80
LESSTHAN             : 78
MAIN                 : 8
MAX                  : 126
MIN                  : 127
MINUS                : 85
MULTIPLY             : 87
NORMAL               : 134
OR                   : 75
PARENCLOSE           : 8 22 23 66 72 94 103 104 109 118 122 126 127 128 131 132 133 134
PARENOPEN            : 8 22 23 66 72 94 103 104 109 118 122 126 127 128 131 132 133 134
PLOT                 : 72
PLUS                 : 84
POISSON              : 132
PRINT                : 109
PROGRAM              : 1 2 3 4
READ                 : 115
RETURN               : 125
SAME                 : 82
SEMICOLON            : 1 2 3 4 13 14 57 58 65 72 109 115 125 126 127 128 131 132 133 134
SUM                  : 128
TO                   : 122
UNIFORME             : 133
VAR                  : 12
VOID                 : 23
WHILE                : 118
error                : 

Nonterminals, with rules where they appear

assignment           : 40
auxString            : 112 113
binomial             : 55
body                 : 8 22 23 103 104 104 118 122
bodyy                : 35 37
call_func            : 44 93
call_funcc           : 66 69
condition            : 41
crearSymbolTable     : 22 23
crearTablaMain       : 8
cuadruploElse        : 104
cuadruploIF          : 103 104
cuadruploMain        : 1 2 3 4
dec_func             : 6 7
dec_mvar             : 57 58 59 60 61
dec_variables        : 39
dec_variabless       : 56 57
empty                : 5 9 10 11 15 24 25 28 38 67 70 71 95 96 105 106 107 108 119 120 121 123 124
end                  : 1 2 3 4
exitFunc             : 22 23
exp                  : 65 68 69 72 74 75 94 98 99 99 101 102 102 103 104 110 111 118 122 122 125 126 127 128
expp                 : 73 74 75 77 78 79 80 81 82
factor               : 86 87 88
forEnd               : 122
for_loop             : 48
generarERA           : 66
gotoMain             : 8
graph                : 45
guardarConstanteFloat : 91
guardarConstanteInt  : 90
guardarTipo          : 13 14 57 58
guardarValorFor      : 122
ifEnd                : 103
ifEndElse            : 104
m_exp                : 76 77 78 79 80 81 82 84 85
main_body            : 1 2 3 4
mandarParam          : 68 69
max                  : 49
min                  : 50
multiple_funcs       : 1 3 7
multivariables       : 115 117
mvar                 : 13 14 16 17 18
normal               : 52
param                : 22 23 27
param_dist           : 130 131 132 133 134
poisson              : 54
reading              : 43
return               : 46
start_program        : 0
statement            : 36 37
sum                  : 51
termino              : 83 84 85 87 88
type                 : 13 14 22 57 58
typeParam            : 26 27
uniforme             : 53
variable             : 92 116 117 129 130
variableAssignment   : 65
vars                 : 1 2
varss                : 12 13
whileEnd             : 118
whileEval            : 118
whileMigaja          : 118
while_loop           : 47
writing              : 42
writingg             : 109 111 113

Parsing method: LALR

state 0

    (0) S' -> . start_program
    (1) start_program -> . cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body end
    (2) start_program -> . cuadruploMain PROGRAM ID SEMICOLON vars main_body end
    (3) start_program -> . cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body end
    (4) start_program -> . cuadruploMain PROGRAM ID SEMICOLON main_body end
    (5) cuadruploMain -> . empty
    (135) empty -> .

    PROGRAM         reduce using rule 135 (empty -> .)

    start_program                  shift and go to state 1
    cuadruploMain                  shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start_program .



state 2

    (1) start_program -> cuadruploMain . PROGRAM ID SEMICOLON vars multiple_funcs main_body end
    (2) start_program -> cuadruploMain . PROGRAM ID SEMICOLON vars main_body end
    (3) start_program -> cuadruploMain . PROGRAM ID SEMICOLON multiple_funcs main_body end
    (4) start_program -> cuadruploMain . PROGRAM ID SEMICOLON main_body end

    PROGRAM         shift and go to state 4


state 3

    (5) cuadruploMain -> empty .

    PROGRAM         reduce using rule 5 (cuadruploMain -> empty .)


state 4

    (1) start_program -> cuadruploMain PROGRAM . ID SEMICOLON vars multiple_funcs main_body end
    (2) start_program -> cuadruploMain PROGRAM . ID SEMICOLON vars main_body end
    (3) start_program -> cuadruploMain PROGRAM . ID SEMICOLON multiple_funcs main_body end
    (4) start_program -> cuadruploMain PROGRAM . ID SEMICOLON main_body end

    ID              shift and go to state 5


state 5

    (1) start_program -> cuadruploMain PROGRAM ID . SEMICOLON vars multiple_funcs main_body end
    (2) start_program -> cuadruploMain PROGRAM ID . SEMICOLON vars main_body end
    (3) start_program -> cuadruploMain PROGRAM ID . SEMICOLON multiple_funcs main_body end
    (4) start_program -> cuadruploMain PROGRAM ID . SEMICOLON main_body end

    SEMICOLON       shift and go to state 6


state 6

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON . vars multiple_funcs main_body end
    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON . vars main_body end
    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON . multiple_funcs main_body end
    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON . main_body end
    (12) vars -> . VAR varss
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (22) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (23) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    VAR             shift and go to state 10
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 13

    vars                           shift and go to state 7
    multiple_funcs                 shift and go to state 8
    main_body                      shift and go to state 9
    dec_func                       shift and go to state 11

state 7

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars . multiple_funcs main_body end
    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars . main_body end
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (22) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (23) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 13

    multiple_funcs                 shift and go to state 14
    main_body                      shift and go to state 15
    dec_func                       shift and go to state 11

state 8

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs . main_body end
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body

    MAIN            shift and go to state 12

    main_body                      shift and go to state 16

state 9

    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body . end
    (11) end -> . empty
    (135) empty -> .

    $end            reduce using rule 135 (empty -> .)

    end                            shift and go to state 17
    empty                          shift and go to state 18

state 10

    (12) vars -> VAR . varss
    (13) varss -> . type guardarTipo mvar SEMICOLON varss
    (14) varss -> . type guardarTipo mvar SEMICOLON
    (32) type -> . INT
    (33) type -> . FLOAT
    (34) type -> . CHAR

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    varss                          shift and go to state 19
    type                           shift and go to state 20

state 11

    (6) multiple_funcs -> dec_func .
    (7) multiple_funcs -> dec_func . multiple_funcs
    (6) multiple_funcs -> . dec_func
    (7) multiple_funcs -> . dec_func multiple_funcs
    (22) dec_func -> . FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (23) dec_func -> . FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    MAIN            reduce using rule 6 (multiple_funcs -> dec_func .)
    FUNCTION        shift and go to state 13

    dec_func                       shift and go to state 11
    multiple_funcs                 shift and go to state 24

state 12

    (8) main_body -> MAIN . crearTablaMain PARENOPEN PARENCLOSE gotoMain body
    (9) crearTablaMain -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)

    crearTablaMain                 shift and go to state 25
    empty                          shift and go to state 26

state 13

    (22) dec_func -> FUNCTION . type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (23) dec_func -> FUNCTION . VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (32) type -> . INT
    (33) type -> . FLOAT
    (34) type -> . CHAR

    VOID            shift and go to state 28
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    type                           shift and go to state 27

state 14

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs . main_body end
    (8) main_body -> . MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body

    MAIN            shift and go to state 12

    main_body                      shift and go to state 29

state 15

    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body . end
    (11) end -> . empty
    (135) empty -> .

    $end            reduce using rule 135 (empty -> .)

    end                            shift and go to state 30
    empty                          shift and go to state 18

state 16

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body . end
    (11) end -> . empty
    (135) empty -> .

    $end            reduce using rule 135 (empty -> .)

    end                            shift and go to state 31
    empty                          shift and go to state 18

state 17

    (4) start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body end .

    $end            reduce using rule 4 (start_program -> cuadruploMain PROGRAM ID SEMICOLON main_body end .)


state 18

    (11) end -> empty .

    $end            reduce using rule 11 (end -> empty .)


state 19

    (12) vars -> VAR varss .

    MAIN            reduce using rule 12 (vars -> VAR varss .)
    FUNCTION        reduce using rule 12 (vars -> VAR varss .)


state 20

    (13) varss -> type . guardarTipo mvar SEMICOLON varss
    (14) varss -> type . guardarTipo mvar SEMICOLON
    (15) guardarTipo -> . empty
    (135) empty -> .

    ID              reduce using rule 135 (empty -> .)

    guardarTipo                    shift and go to state 32
    empty                          shift and go to state 33

state 21

    (32) type -> INT .

    ID              reduce using rule 32 (type -> INT .)


state 22

    (33) type -> FLOAT .

    ID              reduce using rule 33 (type -> FLOAT .)


state 23

    (34) type -> CHAR .

    ID              reduce using rule 34 (type -> CHAR .)


state 24

    (7) multiple_funcs -> dec_func multiple_funcs .

    MAIN            reduce using rule 7 (multiple_funcs -> dec_func multiple_funcs .)


state 25

    (8) main_body -> MAIN crearTablaMain . PARENOPEN PARENCLOSE gotoMain body

    PARENOPEN       shift and go to state 34


state 26

    (9) crearTablaMain -> empty .

    PARENOPEN       reduce using rule 9 (crearTablaMain -> empty .)


state 27

    (22) dec_func -> FUNCTION type . ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    ID              shift and go to state 35


state 28

    (23) dec_func -> FUNCTION VOID . ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc

    ID              shift and go to state 36


state 29

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body . end
    (11) end -> . empty
    (135) empty -> .

    $end            reduce using rule 135 (empty -> .)

    end                            shift and go to state 37
    empty                          shift and go to state 18

state 30

    (2) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body end .

    $end            reduce using rule 2 (start_program -> cuadruploMain PROGRAM ID SEMICOLON vars main_body end .)


state 31

    (3) start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body end .

    $end            reduce using rule 3 (start_program -> cuadruploMain PROGRAM ID SEMICOLON multiple_funcs main_body end .)


state 32

    (13) varss -> type guardarTipo . mvar SEMICOLON varss
    (14) varss -> type guardarTipo . mvar SEMICOLON
    (16) mvar -> . ID COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> . ID
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 39

    mvar                           shift and go to state 38

state 33

    (15) guardarTipo -> empty .

    ID              reduce using rule 15 (guardarTipo -> empty .)


state 34

    (8) main_body -> MAIN crearTablaMain PARENOPEN . PARENCLOSE gotoMain body

    PARENCLOSE      shift and go to state 40


state 35

    (22) dec_func -> FUNCTION type ID . crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (24) crearSymbolTable -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)

    crearSymbolTable               shift and go to state 41
    empty                          shift and go to state 42

state 36

    (23) dec_func -> FUNCTION VOID ID . crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc
    (24) crearSymbolTable -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)

    crearSymbolTable               shift and go to state 43
    empty                          shift and go to state 42

state 37

    (1) start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body end .

    $end            reduce using rule 1 (start_program -> cuadruploMain PROGRAM ID SEMICOLON vars multiple_funcs main_body end .)


state 38

    (13) varss -> type guardarTipo mvar . SEMICOLON varss
    (14) varss -> type guardarTipo mvar . SEMICOLON

    SEMICOLON       shift and go to state 44


state 39

    (16) mvar -> ID . COLON mvar
    (17) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> ID .
    (20) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 45
    BRACEOPEN       shift and go to state 46
    SEMICOLON       reduce using rule 19 (mvar -> ID .)


state 40

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE . gotoMain body
    (10) gotoMain -> . empty
    (135) empty -> .

    BRACKETOPEN     reduce using rule 135 (empty -> .)

    gotoMain                       shift and go to state 47
    empty                          shift and go to state 48

state 41

    (22) dec_func -> FUNCTION type ID crearSymbolTable . PARENOPEN param PARENCLOSE body exitFunc

    PARENOPEN       shift and go to state 49


state 42

    (24) crearSymbolTable -> empty .

    PARENOPEN       reduce using rule 24 (crearSymbolTable -> empty .)


state 43

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable . PARENOPEN param PARENCLOSE body exitFunc

    PARENOPEN       shift and go to state 50


state 44

    (13) varss -> type guardarTipo mvar SEMICOLON . varss
    (14) varss -> type guardarTipo mvar SEMICOLON .
    (13) varss -> . type guardarTipo mvar SEMICOLON varss
    (14) varss -> . type guardarTipo mvar SEMICOLON
    (32) type -> . INT
    (33) type -> . FLOAT
    (34) type -> . CHAR

    MAIN            reduce using rule 14 (varss -> type guardarTipo mvar SEMICOLON .)
    FUNCTION        reduce using rule 14 (varss -> type guardarTipo mvar SEMICOLON .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    type                           shift and go to state 20
    varss                          shift and go to state 51

state 45

    (16) mvar -> ID COLON . mvar
    (16) mvar -> . ID COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> . ID
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 39

    mvar                           shift and go to state 52

state 46

    (17) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE COLON mvar
    (18) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (20) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE
    (21) mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    CTEINT          shift and go to state 53


state 47

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain . body
    (35) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 54

state 48

    (10) gotoMain -> empty .

    BRACKETOPEN     reduce using rule 10 (gotoMain -> empty .)


state 49

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN . param PARENCLOSE body exitFunc
    (26) param -> . typeParam ID
    (27) param -> . typeParam ID COLON param
    (28) param -> . empty
    (29) typeParam -> . INT
    (30) typeParam -> . FLOAT
    (31) typeParam -> . CHAR
    (135) empty -> .

    INT             shift and go to state 59
    FLOAT           shift and go to state 60
    CHAR            shift and go to state 61
    PARENCLOSE      reduce using rule 135 (empty -> .)

    param                          shift and go to state 56
    typeParam                      shift and go to state 57
    empty                          shift and go to state 58

state 50

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN . param PARENCLOSE body exitFunc
    (26) param -> . typeParam ID
    (27) param -> . typeParam ID COLON param
    (28) param -> . empty
    (29) typeParam -> . INT
    (30) typeParam -> . FLOAT
    (31) typeParam -> . CHAR
    (135) empty -> .

    INT             shift and go to state 59
    FLOAT           shift and go to state 60
    CHAR            shift and go to state 61
    PARENCLOSE      reduce using rule 135 (empty -> .)

    param                          shift and go to state 62
    typeParam                      shift and go to state 57
    empty                          shift and go to state 58

state 51

    (13) varss -> type guardarTipo mvar SEMICOLON varss .

    MAIN            reduce using rule 13 (varss -> type guardarTipo mvar SEMICOLON varss .)
    FUNCTION        reduce using rule 13 (varss -> type guardarTipo mvar SEMICOLON varss .)


state 52

    (16) mvar -> ID COLON mvar .

    SEMICOLON       reduce using rule 16 (mvar -> ID COLON mvar .)


state 53

    (17) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE COLON mvar
    (18) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (20) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE
    (21) mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    BRACECLOSE      shift and go to state 63


state 54

    (8) main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body .

    $end            reduce using rule 8 (main_body -> MAIN crearTablaMain PARENOPEN PARENCLOSE gotoMain body .)


state 55

    (35) body -> BRACKETOPEN . bodyy BRACKETCLOSE
    (36) bodyy -> . statement
    (37) bodyy -> . statement bodyy
    (38) bodyy -> . empty
    (39) statement -> . dec_variables
    (40) statement -> . assignment
    (41) statement -> . condition
    (42) statement -> . writing
    (43) statement -> . reading
    (44) statement -> . call_func
    (45) statement -> . graph
    (46) statement -> . return
    (47) statement -> . while_loop
    (48) statement -> . for_loop
    (49) statement -> . max
    (50) statement -> . min
    (51) statement -> . sum
    (52) statement -> . normal
    (53) statement -> . uniforme
    (54) statement -> . poisson
    (55) statement -> . binomial
    (135) empty -> .
    (56) dec_variables -> . dec_variabless
    (65) assignment -> . variableAssignment EQUAL exp SEMICOLON
    (103) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (109) writing -> . PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
    (115) reading -> . READ multivariables SEMICOLON
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE
    (72) graph -> . PLOT PARENOPEN exp PARENCLOSE SEMICOLON
    (125) return -> . RETURN exp SEMICOLON
    (118) while_loop -> . WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (122) for_loop -> . FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
    (126) max -> . MAX PARENOPEN exp PARENCLOSE SEMICOLON
    (127) min -> . MIN PARENOPEN exp PARENCLOSE SEMICOLON
    (128) sum -> . SUM PARENOPEN exp PARENCLOSE SEMICOLON
    (134) normal -> . NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (133) uniforme -> . UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
    (132) poisson -> . POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
    (131) binomial -> . BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (57) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (58) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (100) variableAssignment -> . ID
    (101) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE
    (102) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (32) type -> . INT
    (33) type -> . FLOAT
    (34) type -> . CHAR

    BRACKETCLOSE    reduce using rule 135 (empty -> .)
    IF              shift and go to state 86
    PRINT           shift and go to state 87
    READ            shift and go to state 88
    ID              shift and go to state 89
    PLOT            shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    MAX             shift and go to state 94
    MIN             shift and go to state 95
    SUM             shift and go to state 96
    NORMAL          shift and go to state 97
    UNIFORME        shift and go to state 98
    POISSON         shift and go to state 99
    BINOMIAL        shift and go to state 100
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    bodyy                          shift and go to state 64
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    dec_variables                  shift and go to state 67
    assignment                     shift and go to state 68
    condition                      shift and go to state 69
    writing                        shift and go to state 70
    reading                        shift and go to state 71
    call_func                      shift and go to state 72
    graph                          shift and go to state 73
    return                         shift and go to state 74
    while_loop                     shift and go to state 75
    for_loop                       shift and go to state 76
    max                            shift and go to state 77
    min                            shift and go to state 78
    sum                            shift and go to state 79
    normal                         shift and go to state 80
    uniforme                       shift and go to state 81
    poisson                        shift and go to state 82
    binomial                       shift and go to state 83
    dec_variabless                 shift and go to state 84
    variableAssignment             shift and go to state 85
    type                           shift and go to state 101

state 56

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param . PARENCLOSE body exitFunc

    PARENCLOSE      shift and go to state 102


state 57

    (26) param -> typeParam . ID
    (27) param -> typeParam . ID COLON param

    ID              shift and go to state 103


state 58

    (28) param -> empty .

    PARENCLOSE      reduce using rule 28 (param -> empty .)


state 59

    (29) typeParam -> INT .

    ID              reduce using rule 29 (typeParam -> INT .)


state 60

    (30) typeParam -> FLOAT .

    ID              reduce using rule 30 (typeParam -> FLOAT .)


state 61

    (31) typeParam -> CHAR .

    ID              reduce using rule 31 (typeParam -> CHAR .)


state 62

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param . PARENCLOSE body exitFunc

    PARENCLOSE      shift and go to state 104


state 63

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . COLON mvar
    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (20) mvar -> ID BRACEOPEN CTEINT BRACECLOSE .
    (21) mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 106
    BRACEOPEN       shift and go to state 105
    SEMICOLON       reduce using rule 20 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE .)


state 64

    (35) body -> BRACKETOPEN bodyy . BRACKETCLOSE

    BRACKETCLOSE    shift and go to state 107


state 65

    (36) bodyy -> statement .
    (37) bodyy -> statement . bodyy
    (36) bodyy -> . statement
    (37) bodyy -> . statement bodyy
    (38) bodyy -> . empty
    (39) statement -> . dec_variables
    (40) statement -> . assignment
    (41) statement -> . condition
    (42) statement -> . writing
    (43) statement -> . reading
    (44) statement -> . call_func
    (45) statement -> . graph
    (46) statement -> . return
    (47) statement -> . while_loop
    (48) statement -> . for_loop
    (49) statement -> . max
    (50) statement -> . min
    (51) statement -> . sum
    (52) statement -> . normal
    (53) statement -> . uniforme
    (54) statement -> . poisson
    (55) statement -> . binomial
    (135) empty -> .
    (56) dec_variables -> . dec_variabless
    (65) assignment -> . variableAssignment EQUAL exp SEMICOLON
    (103) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> . IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (109) writing -> . PRINT PARENOPEN writingg PARENCLOSE SEMICOLON
    (115) reading -> . READ multivariables SEMICOLON
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE
    (72) graph -> . PLOT PARENOPEN exp PARENCLOSE SEMICOLON
    (125) return -> . RETURN exp SEMICOLON
    (118) while_loop -> . WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (122) for_loop -> . FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd
    (126) max -> . MAX PARENOPEN exp PARENCLOSE SEMICOLON
    (127) min -> . MIN PARENOPEN exp PARENCLOSE SEMICOLON
    (128) sum -> . SUM PARENOPEN exp PARENCLOSE SEMICOLON
    (134) normal -> . NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (133) uniforme -> . UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON
    (132) poisson -> . POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON
    (131) binomial -> . BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON
    (57) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (58) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (100) variableAssignment -> . ID
    (101) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE
    (102) variableAssignment -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (32) type -> . INT
    (33) type -> . FLOAT
    (34) type -> . CHAR

  ! reduce/reduce conflict for BRACKETCLOSE resolved using rule 36 (bodyy -> statement .)
    BRACKETCLOSE    reduce using rule 36 (bodyy -> statement .)
    IF              shift and go to state 86
    PRINT           shift and go to state 87
    READ            shift and go to state 88
    ID              shift and go to state 89
    PLOT            shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93
    MAX             shift and go to state 94
    MIN             shift and go to state 95
    SUM             shift and go to state 96
    NORMAL          shift and go to state 97
    UNIFORME        shift and go to state 98
    POISSON         shift and go to state 99
    BINOMIAL        shift and go to state 100
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

  ! BRACKETCLOSE    [ reduce using rule 135 (empty -> .) ]

    statement                      shift and go to state 65
    bodyy                          shift and go to state 108
    empty                          shift and go to state 66
    dec_variables                  shift and go to state 67
    assignment                     shift and go to state 68
    condition                      shift and go to state 69
    writing                        shift and go to state 70
    reading                        shift and go to state 71
    call_func                      shift and go to state 72
    graph                          shift and go to state 73
    return                         shift and go to state 74
    while_loop                     shift and go to state 75
    for_loop                       shift and go to state 76
    max                            shift and go to state 77
    min                            shift and go to state 78
    sum                            shift and go to state 79
    normal                         shift and go to state 80
    uniforme                       shift and go to state 81
    poisson                        shift and go to state 82
    binomial                       shift and go to state 83
    dec_variabless                 shift and go to state 84
    variableAssignment             shift and go to state 85
    type                           shift and go to state 101

state 66

    (38) bodyy -> empty .

    BRACKETCLOSE    reduce using rule 38 (bodyy -> empty .)


state 67

    (39) statement -> dec_variables .

    IF              reduce using rule 39 (statement -> dec_variables .)
    PRINT           reduce using rule 39 (statement -> dec_variables .)
    READ            reduce using rule 39 (statement -> dec_variables .)
    ID              reduce using rule 39 (statement -> dec_variables .)
    PLOT            reduce using rule 39 (statement -> dec_variables .)
    RETURN          reduce using rule 39 (statement -> dec_variables .)
    WHILE           reduce using rule 39 (statement -> dec_variables .)
    FOR             reduce using rule 39 (statement -> dec_variables .)
    MAX             reduce using rule 39 (statement -> dec_variables .)
    MIN             reduce using rule 39 (statement -> dec_variables .)
    SUM             reduce using rule 39 (statement -> dec_variables .)
    NORMAL          reduce using rule 39 (statement -> dec_variables .)
    UNIFORME        reduce using rule 39 (statement -> dec_variables .)
    POISSON         reduce using rule 39 (statement -> dec_variables .)
    BINOMIAL        reduce using rule 39 (statement -> dec_variables .)
    INT             reduce using rule 39 (statement -> dec_variables .)
    FLOAT           reduce using rule 39 (statement -> dec_variables .)
    CHAR            reduce using rule 39 (statement -> dec_variables .)
    BRACKETCLOSE    reduce using rule 39 (statement -> dec_variables .)


state 68

    (40) statement -> assignment .

    IF              reduce using rule 40 (statement -> assignment .)
    PRINT           reduce using rule 40 (statement -> assignment .)
    READ            reduce using rule 40 (statement -> assignment .)
    ID              reduce using rule 40 (statement -> assignment .)
    PLOT            reduce using rule 40 (statement -> assignment .)
    RETURN          reduce using rule 40 (statement -> assignment .)
    WHILE           reduce using rule 40 (statement -> assignment .)
    FOR             reduce using rule 40 (statement -> assignment .)
    MAX             reduce using rule 40 (statement -> assignment .)
    MIN             reduce using rule 40 (statement -> assignment .)
    SUM             reduce using rule 40 (statement -> assignment .)
    NORMAL          reduce using rule 40 (statement -> assignment .)
    UNIFORME        reduce using rule 40 (statement -> assignment .)
    POISSON         reduce using rule 40 (statement -> assignment .)
    BINOMIAL        reduce using rule 40 (statement -> assignment .)
    INT             reduce using rule 40 (statement -> assignment .)
    FLOAT           reduce using rule 40 (statement -> assignment .)
    CHAR            reduce using rule 40 (statement -> assignment .)
    BRACKETCLOSE    reduce using rule 40 (statement -> assignment .)


state 69

    (41) statement -> condition .

    IF              reduce using rule 41 (statement -> condition .)
    PRINT           reduce using rule 41 (statement -> condition .)
    READ            reduce using rule 41 (statement -> condition .)
    ID              reduce using rule 41 (statement -> condition .)
    PLOT            reduce using rule 41 (statement -> condition .)
    RETURN          reduce using rule 41 (statement -> condition .)
    WHILE           reduce using rule 41 (statement -> condition .)
    FOR             reduce using rule 41 (statement -> condition .)
    MAX             reduce using rule 41 (statement -> condition .)
    MIN             reduce using rule 41 (statement -> condition .)
    SUM             reduce using rule 41 (statement -> condition .)
    NORMAL          reduce using rule 41 (statement -> condition .)
    UNIFORME        reduce using rule 41 (statement -> condition .)
    POISSON         reduce using rule 41 (statement -> condition .)
    BINOMIAL        reduce using rule 41 (statement -> condition .)
    INT             reduce using rule 41 (statement -> condition .)
    FLOAT           reduce using rule 41 (statement -> condition .)
    CHAR            reduce using rule 41 (statement -> condition .)
    BRACKETCLOSE    reduce using rule 41 (statement -> condition .)


state 70

    (42) statement -> writing .

    IF              reduce using rule 42 (statement -> writing .)
    PRINT           reduce using rule 42 (statement -> writing .)
    READ            reduce using rule 42 (statement -> writing .)
    ID              reduce using rule 42 (statement -> writing .)
    PLOT            reduce using rule 42 (statement -> writing .)
    RETURN          reduce using rule 42 (statement -> writing .)
    WHILE           reduce using rule 42 (statement -> writing .)
    FOR             reduce using rule 42 (statement -> writing .)
    MAX             reduce using rule 42 (statement -> writing .)
    MIN             reduce using rule 42 (statement -> writing .)
    SUM             reduce using rule 42 (statement -> writing .)
    NORMAL          reduce using rule 42 (statement -> writing .)
    UNIFORME        reduce using rule 42 (statement -> writing .)
    POISSON         reduce using rule 42 (statement -> writing .)
    BINOMIAL        reduce using rule 42 (statement -> writing .)
    INT             reduce using rule 42 (statement -> writing .)
    FLOAT           reduce using rule 42 (statement -> writing .)
    CHAR            reduce using rule 42 (statement -> writing .)
    BRACKETCLOSE    reduce using rule 42 (statement -> writing .)


state 71

    (43) statement -> reading .

    IF              reduce using rule 43 (statement -> reading .)
    PRINT           reduce using rule 43 (statement -> reading .)
    READ            reduce using rule 43 (statement -> reading .)
    ID              reduce using rule 43 (statement -> reading .)
    PLOT            reduce using rule 43 (statement -> reading .)
    RETURN          reduce using rule 43 (statement -> reading .)
    WHILE           reduce using rule 43 (statement -> reading .)
    FOR             reduce using rule 43 (statement -> reading .)
    MAX             reduce using rule 43 (statement -> reading .)
    MIN             reduce using rule 43 (statement -> reading .)
    SUM             reduce using rule 43 (statement -> reading .)
    NORMAL          reduce using rule 43 (statement -> reading .)
    UNIFORME        reduce using rule 43 (statement -> reading .)
    POISSON         reduce using rule 43 (statement -> reading .)
    BINOMIAL        reduce using rule 43 (statement -> reading .)
    INT             reduce using rule 43 (statement -> reading .)
    FLOAT           reduce using rule 43 (statement -> reading .)
    CHAR            reduce using rule 43 (statement -> reading .)
    BRACKETCLOSE    reduce using rule 43 (statement -> reading .)


state 72

    (44) statement -> call_func .

    IF              reduce using rule 44 (statement -> call_func .)
    PRINT           reduce using rule 44 (statement -> call_func .)
    READ            reduce using rule 44 (statement -> call_func .)
    ID              reduce using rule 44 (statement -> call_func .)
    PLOT            reduce using rule 44 (statement -> call_func .)
    RETURN          reduce using rule 44 (statement -> call_func .)
    WHILE           reduce using rule 44 (statement -> call_func .)
    FOR             reduce using rule 44 (statement -> call_func .)
    MAX             reduce using rule 44 (statement -> call_func .)
    MIN             reduce using rule 44 (statement -> call_func .)
    SUM             reduce using rule 44 (statement -> call_func .)
    NORMAL          reduce using rule 44 (statement -> call_func .)
    UNIFORME        reduce using rule 44 (statement -> call_func .)
    POISSON         reduce using rule 44 (statement -> call_func .)
    BINOMIAL        reduce using rule 44 (statement -> call_func .)
    INT             reduce using rule 44 (statement -> call_func .)
    FLOAT           reduce using rule 44 (statement -> call_func .)
    CHAR            reduce using rule 44 (statement -> call_func .)
    BRACKETCLOSE    reduce using rule 44 (statement -> call_func .)


state 73

    (45) statement -> graph .

    IF              reduce using rule 45 (statement -> graph .)
    PRINT           reduce using rule 45 (statement -> graph .)
    READ            reduce using rule 45 (statement -> graph .)
    ID              reduce using rule 45 (statement -> graph .)
    PLOT            reduce using rule 45 (statement -> graph .)
    RETURN          reduce using rule 45 (statement -> graph .)
    WHILE           reduce using rule 45 (statement -> graph .)
    FOR             reduce using rule 45 (statement -> graph .)
    MAX             reduce using rule 45 (statement -> graph .)
    MIN             reduce using rule 45 (statement -> graph .)
    SUM             reduce using rule 45 (statement -> graph .)
    NORMAL          reduce using rule 45 (statement -> graph .)
    UNIFORME        reduce using rule 45 (statement -> graph .)
    POISSON         reduce using rule 45 (statement -> graph .)
    BINOMIAL        reduce using rule 45 (statement -> graph .)
    INT             reduce using rule 45 (statement -> graph .)
    FLOAT           reduce using rule 45 (statement -> graph .)
    CHAR            reduce using rule 45 (statement -> graph .)
    BRACKETCLOSE    reduce using rule 45 (statement -> graph .)


state 74

    (46) statement -> return .

    IF              reduce using rule 46 (statement -> return .)
    PRINT           reduce using rule 46 (statement -> return .)
    READ            reduce using rule 46 (statement -> return .)
    ID              reduce using rule 46 (statement -> return .)
    PLOT            reduce using rule 46 (statement -> return .)
    RETURN          reduce using rule 46 (statement -> return .)
    WHILE           reduce using rule 46 (statement -> return .)
    FOR             reduce using rule 46 (statement -> return .)
    MAX             reduce using rule 46 (statement -> return .)
    MIN             reduce using rule 46 (statement -> return .)
    SUM             reduce using rule 46 (statement -> return .)
    NORMAL          reduce using rule 46 (statement -> return .)
    UNIFORME        reduce using rule 46 (statement -> return .)
    POISSON         reduce using rule 46 (statement -> return .)
    BINOMIAL        reduce using rule 46 (statement -> return .)
    INT             reduce using rule 46 (statement -> return .)
    FLOAT           reduce using rule 46 (statement -> return .)
    CHAR            reduce using rule 46 (statement -> return .)
    BRACKETCLOSE    reduce using rule 46 (statement -> return .)


state 75

    (47) statement -> while_loop .

    IF              reduce using rule 47 (statement -> while_loop .)
    PRINT           reduce using rule 47 (statement -> while_loop .)
    READ            reduce using rule 47 (statement -> while_loop .)
    ID              reduce using rule 47 (statement -> while_loop .)
    PLOT            reduce using rule 47 (statement -> while_loop .)
    RETURN          reduce using rule 47 (statement -> while_loop .)
    WHILE           reduce using rule 47 (statement -> while_loop .)
    FOR             reduce using rule 47 (statement -> while_loop .)
    MAX             reduce using rule 47 (statement -> while_loop .)
    MIN             reduce using rule 47 (statement -> while_loop .)
    SUM             reduce using rule 47 (statement -> while_loop .)
    NORMAL          reduce using rule 47 (statement -> while_loop .)
    UNIFORME        reduce using rule 47 (statement -> while_loop .)
    POISSON         reduce using rule 47 (statement -> while_loop .)
    BINOMIAL        reduce using rule 47 (statement -> while_loop .)
    INT             reduce using rule 47 (statement -> while_loop .)
    FLOAT           reduce using rule 47 (statement -> while_loop .)
    CHAR            reduce using rule 47 (statement -> while_loop .)
    BRACKETCLOSE    reduce using rule 47 (statement -> while_loop .)


state 76

    (48) statement -> for_loop .

    IF              reduce using rule 48 (statement -> for_loop .)
    PRINT           reduce using rule 48 (statement -> for_loop .)
    READ            reduce using rule 48 (statement -> for_loop .)
    ID              reduce using rule 48 (statement -> for_loop .)
    PLOT            reduce using rule 48 (statement -> for_loop .)
    RETURN          reduce using rule 48 (statement -> for_loop .)
    WHILE           reduce using rule 48 (statement -> for_loop .)
    FOR             reduce using rule 48 (statement -> for_loop .)
    MAX             reduce using rule 48 (statement -> for_loop .)
    MIN             reduce using rule 48 (statement -> for_loop .)
    SUM             reduce using rule 48 (statement -> for_loop .)
    NORMAL          reduce using rule 48 (statement -> for_loop .)
    UNIFORME        reduce using rule 48 (statement -> for_loop .)
    POISSON         reduce using rule 48 (statement -> for_loop .)
    BINOMIAL        reduce using rule 48 (statement -> for_loop .)
    INT             reduce using rule 48 (statement -> for_loop .)
    FLOAT           reduce using rule 48 (statement -> for_loop .)
    CHAR            reduce using rule 48 (statement -> for_loop .)
    BRACKETCLOSE    reduce using rule 48 (statement -> for_loop .)


state 77

    (49) statement -> max .

    IF              reduce using rule 49 (statement -> max .)
    PRINT           reduce using rule 49 (statement -> max .)
    READ            reduce using rule 49 (statement -> max .)
    ID              reduce using rule 49 (statement -> max .)
    PLOT            reduce using rule 49 (statement -> max .)
    RETURN          reduce using rule 49 (statement -> max .)
    WHILE           reduce using rule 49 (statement -> max .)
    FOR             reduce using rule 49 (statement -> max .)
    MAX             reduce using rule 49 (statement -> max .)
    MIN             reduce using rule 49 (statement -> max .)
    SUM             reduce using rule 49 (statement -> max .)
    NORMAL          reduce using rule 49 (statement -> max .)
    UNIFORME        reduce using rule 49 (statement -> max .)
    POISSON         reduce using rule 49 (statement -> max .)
    BINOMIAL        reduce using rule 49 (statement -> max .)
    INT             reduce using rule 49 (statement -> max .)
    FLOAT           reduce using rule 49 (statement -> max .)
    CHAR            reduce using rule 49 (statement -> max .)
    BRACKETCLOSE    reduce using rule 49 (statement -> max .)


state 78

    (50) statement -> min .

    IF              reduce using rule 50 (statement -> min .)
    PRINT           reduce using rule 50 (statement -> min .)
    READ            reduce using rule 50 (statement -> min .)
    ID              reduce using rule 50 (statement -> min .)
    PLOT            reduce using rule 50 (statement -> min .)
    RETURN          reduce using rule 50 (statement -> min .)
    WHILE           reduce using rule 50 (statement -> min .)
    FOR             reduce using rule 50 (statement -> min .)
    MAX             reduce using rule 50 (statement -> min .)
    MIN             reduce using rule 50 (statement -> min .)
    SUM             reduce using rule 50 (statement -> min .)
    NORMAL          reduce using rule 50 (statement -> min .)
    UNIFORME        reduce using rule 50 (statement -> min .)
    POISSON         reduce using rule 50 (statement -> min .)
    BINOMIAL        reduce using rule 50 (statement -> min .)
    INT             reduce using rule 50 (statement -> min .)
    FLOAT           reduce using rule 50 (statement -> min .)
    CHAR            reduce using rule 50 (statement -> min .)
    BRACKETCLOSE    reduce using rule 50 (statement -> min .)


state 79

    (51) statement -> sum .

    IF              reduce using rule 51 (statement -> sum .)
    PRINT           reduce using rule 51 (statement -> sum .)
    READ            reduce using rule 51 (statement -> sum .)
    ID              reduce using rule 51 (statement -> sum .)
    PLOT            reduce using rule 51 (statement -> sum .)
    RETURN          reduce using rule 51 (statement -> sum .)
    WHILE           reduce using rule 51 (statement -> sum .)
    FOR             reduce using rule 51 (statement -> sum .)
    MAX             reduce using rule 51 (statement -> sum .)
    MIN             reduce using rule 51 (statement -> sum .)
    SUM             reduce using rule 51 (statement -> sum .)
    NORMAL          reduce using rule 51 (statement -> sum .)
    UNIFORME        reduce using rule 51 (statement -> sum .)
    POISSON         reduce using rule 51 (statement -> sum .)
    BINOMIAL        reduce using rule 51 (statement -> sum .)
    INT             reduce using rule 51 (statement -> sum .)
    FLOAT           reduce using rule 51 (statement -> sum .)
    CHAR            reduce using rule 51 (statement -> sum .)
    BRACKETCLOSE    reduce using rule 51 (statement -> sum .)


state 80

    (52) statement -> normal .

    IF              reduce using rule 52 (statement -> normal .)
    PRINT           reduce using rule 52 (statement -> normal .)
    READ            reduce using rule 52 (statement -> normal .)
    ID              reduce using rule 52 (statement -> normal .)
    PLOT            reduce using rule 52 (statement -> normal .)
    RETURN          reduce using rule 52 (statement -> normal .)
    WHILE           reduce using rule 52 (statement -> normal .)
    FOR             reduce using rule 52 (statement -> normal .)
    MAX             reduce using rule 52 (statement -> normal .)
    MIN             reduce using rule 52 (statement -> normal .)
    SUM             reduce using rule 52 (statement -> normal .)
    NORMAL          reduce using rule 52 (statement -> normal .)
    UNIFORME        reduce using rule 52 (statement -> normal .)
    POISSON         reduce using rule 52 (statement -> normal .)
    BINOMIAL        reduce using rule 52 (statement -> normal .)
    INT             reduce using rule 52 (statement -> normal .)
    FLOAT           reduce using rule 52 (statement -> normal .)
    CHAR            reduce using rule 52 (statement -> normal .)
    BRACKETCLOSE    reduce using rule 52 (statement -> normal .)


state 81

    (53) statement -> uniforme .

    IF              reduce using rule 53 (statement -> uniforme .)
    PRINT           reduce using rule 53 (statement -> uniforme .)
    READ            reduce using rule 53 (statement -> uniforme .)
    ID              reduce using rule 53 (statement -> uniforme .)
    PLOT            reduce using rule 53 (statement -> uniforme .)
    RETURN          reduce using rule 53 (statement -> uniforme .)
    WHILE           reduce using rule 53 (statement -> uniforme .)
    FOR             reduce using rule 53 (statement -> uniforme .)
    MAX             reduce using rule 53 (statement -> uniforme .)
    MIN             reduce using rule 53 (statement -> uniforme .)
    SUM             reduce using rule 53 (statement -> uniforme .)
    NORMAL          reduce using rule 53 (statement -> uniforme .)
    UNIFORME        reduce using rule 53 (statement -> uniforme .)
    POISSON         reduce using rule 53 (statement -> uniforme .)
    BINOMIAL        reduce using rule 53 (statement -> uniforme .)
    INT             reduce using rule 53 (statement -> uniforme .)
    FLOAT           reduce using rule 53 (statement -> uniforme .)
    CHAR            reduce using rule 53 (statement -> uniforme .)
    BRACKETCLOSE    reduce using rule 53 (statement -> uniforme .)


state 82

    (54) statement -> poisson .

    IF              reduce using rule 54 (statement -> poisson .)
    PRINT           reduce using rule 54 (statement -> poisson .)
    READ            reduce using rule 54 (statement -> poisson .)
    ID              reduce using rule 54 (statement -> poisson .)
    PLOT            reduce using rule 54 (statement -> poisson .)
    RETURN          reduce using rule 54 (statement -> poisson .)
    WHILE           reduce using rule 54 (statement -> poisson .)
    FOR             reduce using rule 54 (statement -> poisson .)
    MAX             reduce using rule 54 (statement -> poisson .)
    MIN             reduce using rule 54 (statement -> poisson .)
    SUM             reduce using rule 54 (statement -> poisson .)
    NORMAL          reduce using rule 54 (statement -> poisson .)
    UNIFORME        reduce using rule 54 (statement -> poisson .)
    POISSON         reduce using rule 54 (statement -> poisson .)
    BINOMIAL        reduce using rule 54 (statement -> poisson .)
    INT             reduce using rule 54 (statement -> poisson .)
    FLOAT           reduce using rule 54 (statement -> poisson .)
    CHAR            reduce using rule 54 (statement -> poisson .)
    BRACKETCLOSE    reduce using rule 54 (statement -> poisson .)


state 83

    (55) statement -> binomial .

    IF              reduce using rule 55 (statement -> binomial .)
    PRINT           reduce using rule 55 (statement -> binomial .)
    READ            reduce using rule 55 (statement -> binomial .)
    ID              reduce using rule 55 (statement -> binomial .)
    PLOT            reduce using rule 55 (statement -> binomial .)
    RETURN          reduce using rule 55 (statement -> binomial .)
    WHILE           reduce using rule 55 (statement -> binomial .)
    FOR             reduce using rule 55 (statement -> binomial .)
    MAX             reduce using rule 55 (statement -> binomial .)
    MIN             reduce using rule 55 (statement -> binomial .)
    SUM             reduce using rule 55 (statement -> binomial .)
    NORMAL          reduce using rule 55 (statement -> binomial .)
    UNIFORME        reduce using rule 55 (statement -> binomial .)
    POISSON         reduce using rule 55 (statement -> binomial .)
    BINOMIAL        reduce using rule 55 (statement -> binomial .)
    INT             reduce using rule 55 (statement -> binomial .)
    FLOAT           reduce using rule 55 (statement -> binomial .)
    CHAR            reduce using rule 55 (statement -> binomial .)
    BRACKETCLOSE    reduce using rule 55 (statement -> binomial .)


state 84

    (56) dec_variables -> dec_variabless .

    IF              reduce using rule 56 (dec_variables -> dec_variabless .)
    PRINT           reduce using rule 56 (dec_variables -> dec_variabless .)
    READ            reduce using rule 56 (dec_variables -> dec_variabless .)
    ID              reduce using rule 56 (dec_variables -> dec_variabless .)
    PLOT            reduce using rule 56 (dec_variables -> dec_variabless .)
    RETURN          reduce using rule 56 (dec_variables -> dec_variabless .)
    WHILE           reduce using rule 56 (dec_variables -> dec_variabless .)
    FOR             reduce using rule 56 (dec_variables -> dec_variabless .)
    MAX             reduce using rule 56 (dec_variables -> dec_variabless .)
    MIN             reduce using rule 56 (dec_variables -> dec_variabless .)
    SUM             reduce using rule 56 (dec_variables -> dec_variabless .)
    NORMAL          reduce using rule 56 (dec_variables -> dec_variabless .)
    UNIFORME        reduce using rule 56 (dec_variables -> dec_variabless .)
    POISSON         reduce using rule 56 (dec_variables -> dec_variabless .)
    BINOMIAL        reduce using rule 56 (dec_variables -> dec_variabless .)
    INT             reduce using rule 56 (dec_variables -> dec_variabless .)
    FLOAT           reduce using rule 56 (dec_variables -> dec_variabless .)
    CHAR            reduce using rule 56 (dec_variables -> dec_variabless .)
    BRACKETCLOSE    reduce using rule 56 (dec_variables -> dec_variabless .)


state 85

    (65) assignment -> variableAssignment . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 109


state 86

    (103) condition -> IF . PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> IF . PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse

    PARENOPEN       shift and go to state 110


state 87

    (109) writing -> PRINT . PARENOPEN writingg PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 111


state 88

    (115) reading -> READ . multivariables SEMICOLON
    (116) multivariables -> . variable
    (117) multivariables -> . variable COLON multivariables
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 114

    multivariables                 shift and go to state 112
    variable                       shift and go to state 113

state 89

    (66) call_func -> ID . generarERA PARENOPEN call_funcc PARENCLOSE
    (100) variableAssignment -> ID .
    (101) variableAssignment -> ID . BRACEOPEN exp BRACECLOSE
    (102) variableAssignment -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (67) generarERA -> . empty
    (135) empty -> .

    EQUAL           reduce using rule 100 (variableAssignment -> ID .)
    BRACEOPEN       shift and go to state 116
    PARENOPEN       reduce using rule 135 (empty -> .)

    generarERA                     shift and go to state 115
    empty                          shift and go to state 117

state 90

    (72) graph -> PLOT . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 118


state 91

    (125) return -> RETURN . exp SEMICOLON
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 119
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 92

    (118) while_loop -> WHILE . whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd
    (119) whileMigaja -> . empty
    (135) empty -> .

    PARENOPEN       reduce using rule 135 (empty -> .)

    whileMigaja                    shift and go to state 130
    empty                          shift and go to state 131

state 93

    (122) for_loop -> FOR . PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd

    PARENOPEN       shift and go to state 132


state 94

    (126) max -> MAX . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 133


state 95

    (127) min -> MIN . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 134


state 96

    (128) sum -> SUM . PARENOPEN exp PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 135


state 97

    (134) normal -> NORMAL . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 136


state 98

    (133) uniforme -> UNIFORME . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 137


state 99

    (132) poisson -> POISSON . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 138


state 100

    (131) binomial -> BINOMIAL . PARENOPEN param_dist PARENCLOSE SEMICOLON

    PARENOPEN       shift and go to state 139


state 101

    (57) dec_variabless -> type . guardarTipo dec_mvar SEMICOLON dec_variabless
    (58) dec_variabless -> type . guardarTipo dec_mvar SEMICOLON
    (15) guardarTipo -> . empty
    (135) empty -> .

    ID              reduce using rule 135 (empty -> .)

    guardarTipo                    shift and go to state 140
    empty                          shift and go to state 33

state 102

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE . body exitFunc
    (35) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 141

state 103

    (26) param -> typeParam ID .
    (27) param -> typeParam ID . COLON param

    PARENCLOSE      reduce using rule 26 (param -> typeParam ID .)
    COLON           shift and go to state 142


state 104

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE . body exitFunc
    (35) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 143

state 105

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE COLON mvar
    (21) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE

    CTEINT          shift and go to state 144


state 106

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON . mvar
    (16) mvar -> . ID COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> . ID
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 39

    mvar                           shift and go to state 145

state 107

    (35) body -> BRACKETOPEN bodyy BRACKETCLOSE .

    $end            reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FUNCTION        reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MAIN            reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    ELSE            reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    IF              reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    PRINT           reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    READ            reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    ID              reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    PLOT            reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    RETURN          reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    WHILE           reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FOR             reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MAX             reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    MIN             reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    SUM             reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    NORMAL          reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    UNIFORME        reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    POISSON         reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    BINOMIAL        reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    INT             reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    FLOAT           reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    CHAR            reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)
    BRACKETCLOSE    reduce using rule 35 (body -> BRACKETOPEN bodyy BRACKETCLOSE .)


state 108

    (37) bodyy -> statement bodyy .

    BRACKETCLOSE    reduce using rule 37 (bodyy -> statement bodyy .)


state 109

    (65) assignment -> variableAssignment EQUAL . exp SEMICOLON
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 146
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 110

    (103) condition -> IF PARENOPEN . exp PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> IF PARENOPEN . exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 147
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 111

    (109) writing -> PRINT PARENOPEN . writingg PARENCLOSE SEMICOLON
    (110) writingg -> . exp
    (111) writingg -> . exp COLON writingg
    (112) writingg -> . auxString
    (113) writingg -> . auxString COLON writingg
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (114) auxString -> . CTESTRING
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 151
    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    writingg                       shift and go to state 148
    exp                            shift and go to state 149
    auxString                      shift and go to state 150
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 112

    (115) reading -> READ multivariables . SEMICOLON

    SEMICOLON       shift and go to state 152


state 113

    (116) multivariables -> variable .
    (117) multivariables -> variable . COLON multivariables

    SEMICOLON       reduce using rule 116 (multivariables -> variable .)
    COLON           shift and go to state 153


state 114

    (97) variable -> ID .
    (98) variable -> ID . BRACEOPEN exp BRACECLOSE
    (99) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    COLON           reduce using rule 97 (variable -> ID .)
    SEMICOLON       reduce using rule 97 (variable -> ID .)
    PARENCLOSE      reduce using rule 97 (variable -> ID .)
    BRACEOPEN       shift and go to state 154


state 115

    (66) call_func -> ID generarERA . PARENOPEN call_funcc PARENCLOSE

    PARENOPEN       shift and go to state 155


state 116

    (101) variableAssignment -> ID BRACEOPEN . exp BRACECLOSE
    (102) variableAssignment -> ID BRACEOPEN . exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 156
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 117

    (67) generarERA -> empty .

    PARENOPEN       reduce using rule 67 (generarERA -> empty .)


state 118

    (72) graph -> PLOT PARENOPEN . exp PARENCLOSE SEMICOLON
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 157
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 119

    (125) return -> RETURN exp . SEMICOLON
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    SEMICOLON       shift and go to state 158
    AND             shift and go to state 159
    OR              shift and go to state 160


state 120

    (73) exp -> expp .
    (77) expp -> expp . GREATHERTHAN m_exp
    (78) expp -> expp . LESSTHAN m_exp
    (79) expp -> expp . GREATHEREQUAL m_exp
    (80) expp -> expp . LESSEQUAL m_exp
    (81) expp -> expp . DIFFERENT m_exp
    (82) expp -> expp . SAME m_exp

    SEMICOLON       reduce using rule 73 (exp -> expp .)
    AND             reduce using rule 73 (exp -> expp .)
    OR              reduce using rule 73 (exp -> expp .)
    PARENCLOSE      reduce using rule 73 (exp -> expp .)
    COLON           reduce using rule 73 (exp -> expp .)
    BRACECLOSE      reduce using rule 73 (exp -> expp .)
    TO              reduce using rule 73 (exp -> expp .)
    GREATHERTHAN    shift and go to state 161
    LESSTHAN        shift and go to state 162
    GREATHEREQUAL   shift and go to state 163
    LESSEQUAL       shift and go to state 164
    DIFFERENT       shift and go to state 165
    SAME            shift and go to state 166


state 121

    (76) expp -> m_exp .
    (84) m_exp -> m_exp . PLUS termino
    (85) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 76 (expp -> m_exp .)
    LESSTHAN        reduce using rule 76 (expp -> m_exp .)
    GREATHEREQUAL   reduce using rule 76 (expp -> m_exp .)
    LESSEQUAL       reduce using rule 76 (expp -> m_exp .)
    DIFFERENT       reduce using rule 76 (expp -> m_exp .)
    SAME            reduce using rule 76 (expp -> m_exp .)
    SEMICOLON       reduce using rule 76 (expp -> m_exp .)
    AND             reduce using rule 76 (expp -> m_exp .)
    OR              reduce using rule 76 (expp -> m_exp .)
    PARENCLOSE      reduce using rule 76 (expp -> m_exp .)
    COLON           reduce using rule 76 (expp -> m_exp .)
    BRACECLOSE      reduce using rule 76 (expp -> m_exp .)
    TO              reduce using rule 76 (expp -> m_exp .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 122

    (83) m_exp -> termino .
    (87) termino -> termino . MULTIPLY factor
    (88) termino -> termino . DIVIDE factor

    PLUS            reduce using rule 83 (m_exp -> termino .)
    MINUS           reduce using rule 83 (m_exp -> termino .)
    GREATHERTHAN    reduce using rule 83 (m_exp -> termino .)
    LESSTHAN        reduce using rule 83 (m_exp -> termino .)
    GREATHEREQUAL   reduce using rule 83 (m_exp -> termino .)
    LESSEQUAL       reduce using rule 83 (m_exp -> termino .)
    DIFFERENT       reduce using rule 83 (m_exp -> termino .)
    SAME            reduce using rule 83 (m_exp -> termino .)
    SEMICOLON       reduce using rule 83 (m_exp -> termino .)
    AND             reduce using rule 83 (m_exp -> termino .)
    OR              reduce using rule 83 (m_exp -> termino .)
    PARENCLOSE      reduce using rule 83 (m_exp -> termino .)
    COLON           reduce using rule 83 (m_exp -> termino .)
    BRACECLOSE      reduce using rule 83 (m_exp -> termino .)
    TO              reduce using rule 83 (m_exp -> termino .)
    MULTIPLY        shift and go to state 169
    DIVIDE          shift and go to state 170


state 123

    (86) termino -> factor .

    MULTIPLY        reduce using rule 86 (termino -> factor .)
    DIVIDE          reduce using rule 86 (termino -> factor .)
    PLUS            reduce using rule 86 (termino -> factor .)
    MINUS           reduce using rule 86 (termino -> factor .)
    GREATHERTHAN    reduce using rule 86 (termino -> factor .)
    LESSTHAN        reduce using rule 86 (termino -> factor .)
    GREATHEREQUAL   reduce using rule 86 (termino -> factor .)
    LESSEQUAL       reduce using rule 86 (termino -> factor .)
    DIFFERENT       reduce using rule 86 (termino -> factor .)
    SAME            reduce using rule 86 (termino -> factor .)
    SEMICOLON       reduce using rule 86 (termino -> factor .)
    AND             reduce using rule 86 (termino -> factor .)
    OR              reduce using rule 86 (termino -> factor .)
    PARENCLOSE      reduce using rule 86 (termino -> factor .)
    COLON           reduce using rule 86 (termino -> factor .)
    BRACECLOSE      reduce using rule 86 (termino -> factor .)
    TO              reduce using rule 86 (termino -> factor .)


state 124

    (89) factor -> ID .
    (97) variable -> ID .
    (98) variable -> ID . BRACEOPEN exp BRACECLOSE
    (99) variable -> ID . BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> ID . generarERA PARENOPEN call_funcc PARENCLOSE
    (67) generarERA -> . empty
    (135) empty -> .

  ! reduce/reduce conflict for MULTIPLY resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for GREATHERTHAN resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for GREATHEREQUAL resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for SAME resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for PARENCLOSE resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for BRACECLOSE resolved using rule 89 (factor -> ID .)
  ! reduce/reduce conflict for TO resolved using rule 89 (factor -> ID .)
    MULTIPLY        reduce using rule 89 (factor -> ID .)
    DIVIDE          reduce using rule 89 (factor -> ID .)
    PLUS            reduce using rule 89 (factor -> ID .)
    MINUS           reduce using rule 89 (factor -> ID .)
    GREATHERTHAN    reduce using rule 89 (factor -> ID .)
    LESSTHAN        reduce using rule 89 (factor -> ID .)
    GREATHEREQUAL   reduce using rule 89 (factor -> ID .)
    LESSEQUAL       reduce using rule 89 (factor -> ID .)
    DIFFERENT       reduce using rule 89 (factor -> ID .)
    SAME            reduce using rule 89 (factor -> ID .)
    SEMICOLON       reduce using rule 89 (factor -> ID .)
    AND             reduce using rule 89 (factor -> ID .)
    OR              reduce using rule 89 (factor -> ID .)
    PARENCLOSE      reduce using rule 89 (factor -> ID .)
    COLON           reduce using rule 89 (factor -> ID .)
    BRACECLOSE      reduce using rule 89 (factor -> ID .)
    TO              reduce using rule 89 (factor -> ID .)
    BRACEOPEN       shift and go to state 154
    PARENOPEN       reduce using rule 135 (empty -> .)

  ! MULTIPLY        [ reduce using rule 97 (variable -> ID .) ]
  ! DIVIDE          [ reduce using rule 97 (variable -> ID .) ]
  ! PLUS            [ reduce using rule 97 (variable -> ID .) ]
  ! MINUS           [ reduce using rule 97 (variable -> ID .) ]
  ! GREATHERTHAN    [ reduce using rule 97 (variable -> ID .) ]
  ! LESSTHAN        [ reduce using rule 97 (variable -> ID .) ]
  ! GREATHEREQUAL   [ reduce using rule 97 (variable -> ID .) ]
  ! LESSEQUAL       [ reduce using rule 97 (variable -> ID .) ]
  ! DIFFERENT       [ reduce using rule 97 (variable -> ID .) ]
  ! SAME            [ reduce using rule 97 (variable -> ID .) ]
  ! SEMICOLON       [ reduce using rule 97 (variable -> ID .) ]
  ! AND             [ reduce using rule 97 (variable -> ID .) ]
  ! OR              [ reduce using rule 97 (variable -> ID .) ]
  ! PARENCLOSE      [ reduce using rule 97 (variable -> ID .) ]
  ! COLON           [ reduce using rule 97 (variable -> ID .) ]
  ! BRACECLOSE      [ reduce using rule 97 (variable -> ID .) ]
  ! TO              [ reduce using rule 97 (variable -> ID .) ]

    generarERA                     shift and go to state 115
    empty                          shift and go to state 117

state 125

    (90) factor -> CTEINT . guardarConstanteInt
    (95) guardarConstanteInt -> . empty
    (135) empty -> .

    MULTIPLY        reduce using rule 135 (empty -> .)
    DIVIDE          reduce using rule 135 (empty -> .)
    PLUS            reduce using rule 135 (empty -> .)
    MINUS           reduce using rule 135 (empty -> .)
    GREATHERTHAN    reduce using rule 135 (empty -> .)
    LESSTHAN        reduce using rule 135 (empty -> .)
    GREATHEREQUAL   reduce using rule 135 (empty -> .)
    LESSEQUAL       reduce using rule 135 (empty -> .)
    DIFFERENT       reduce using rule 135 (empty -> .)
    SAME            reduce using rule 135 (empty -> .)
    SEMICOLON       reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENCLOSE      reduce using rule 135 (empty -> .)
    COLON           reduce using rule 135 (empty -> .)
    BRACECLOSE      reduce using rule 135 (empty -> .)
    TO              reduce using rule 135 (empty -> .)

    guardarConstanteInt            shift and go to state 171
    empty                          shift and go to state 172

state 126

    (91) factor -> CTFLOAT . guardarConstanteFloat
    (96) guardarConstanteFloat -> . empty
    (135) empty -> .

    MULTIPLY        reduce using rule 135 (empty -> .)
    DIVIDE          reduce using rule 135 (empty -> .)
    PLUS            reduce using rule 135 (empty -> .)
    MINUS           reduce using rule 135 (empty -> .)
    GREATHERTHAN    reduce using rule 135 (empty -> .)
    LESSTHAN        reduce using rule 135 (empty -> .)
    GREATHEREQUAL   reduce using rule 135 (empty -> .)
    LESSEQUAL       reduce using rule 135 (empty -> .)
    DIFFERENT       reduce using rule 135 (empty -> .)
    SAME            reduce using rule 135 (empty -> .)
    SEMICOLON       reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    PARENCLOSE      reduce using rule 135 (empty -> .)
    COLON           reduce using rule 135 (empty -> .)
    BRACECLOSE      reduce using rule 135 (empty -> .)
    TO              reduce using rule 135 (empty -> .)

    guardarConstanteFloat          shift and go to state 173
    empty                          shift and go to state 174

state 127

    (92) factor -> variable .

    MULTIPLY        reduce using rule 92 (factor -> variable .)
    DIVIDE          reduce using rule 92 (factor -> variable .)
    PLUS            reduce using rule 92 (factor -> variable .)
    MINUS           reduce using rule 92 (factor -> variable .)
    GREATHERTHAN    reduce using rule 92 (factor -> variable .)
    LESSTHAN        reduce using rule 92 (factor -> variable .)
    GREATHEREQUAL   reduce using rule 92 (factor -> variable .)
    LESSEQUAL       reduce using rule 92 (factor -> variable .)
    DIFFERENT       reduce using rule 92 (factor -> variable .)
    SAME            reduce using rule 92 (factor -> variable .)
    SEMICOLON       reduce using rule 92 (factor -> variable .)
    AND             reduce using rule 92 (factor -> variable .)
    OR              reduce using rule 92 (factor -> variable .)
    PARENCLOSE      reduce using rule 92 (factor -> variable .)
    COLON           reduce using rule 92 (factor -> variable .)
    BRACECLOSE      reduce using rule 92 (factor -> variable .)
    TO              reduce using rule 92 (factor -> variable .)


state 128

    (93) factor -> call_func .

    MULTIPLY        reduce using rule 93 (factor -> call_func .)
    DIVIDE          reduce using rule 93 (factor -> call_func .)
    PLUS            reduce using rule 93 (factor -> call_func .)
    MINUS           reduce using rule 93 (factor -> call_func .)
    GREATHERTHAN    reduce using rule 93 (factor -> call_func .)
    LESSTHAN        reduce using rule 93 (factor -> call_func .)
    GREATHEREQUAL   reduce using rule 93 (factor -> call_func .)
    LESSEQUAL       reduce using rule 93 (factor -> call_func .)
    DIFFERENT       reduce using rule 93 (factor -> call_func .)
    SAME            reduce using rule 93 (factor -> call_func .)
    SEMICOLON       reduce using rule 93 (factor -> call_func .)
    AND             reduce using rule 93 (factor -> call_func .)
    OR              reduce using rule 93 (factor -> call_func .)
    PARENCLOSE      reduce using rule 93 (factor -> call_func .)
    COLON           reduce using rule 93 (factor -> call_func .)
    BRACECLOSE      reduce using rule 93 (factor -> call_func .)
    TO              reduce using rule 93 (factor -> call_func .)


state 129

    (94) factor -> PARENOPEN . exp PARENCLOSE
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 175
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 130

    (118) while_loop -> WHILE whileMigaja . PARENOPEN exp PARENCLOSE whileEval body whileEnd

    PARENOPEN       shift and go to state 176


state 131

    (119) whileMigaja -> empty .

    PARENOPEN       reduce using rule 119 (whileMigaja -> empty .)


state 132

    (122) for_loop -> FOR PARENOPEN . ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd

    ID              shift and go to state 177


state 133

    (126) max -> MAX PARENOPEN . exp PARENCLOSE SEMICOLON
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 178
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 134

    (127) min -> MIN PARENOPEN . exp PARENCLOSE SEMICOLON
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 179
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 135

    (128) sum -> SUM PARENOPEN . exp PARENCLOSE SEMICOLON
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 180
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 136

    (134) normal -> NORMAL PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 114

    param_dist                     shift and go to state 181
    variable                       shift and go to state 182

state 137

    (133) uniforme -> UNIFORME PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 114

    param_dist                     shift and go to state 183
    variable                       shift and go to state 182

state 138

    (132) poisson -> POISSON PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 114

    param_dist                     shift and go to state 184
    variable                       shift and go to state 182

state 139

    (131) binomial -> BINOMIAL PARENOPEN . param_dist PARENCLOSE SEMICOLON
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 114

    param_dist                     shift and go to state 185
    variable                       shift and go to state 182

state 140

    (57) dec_variabless -> type guardarTipo . dec_mvar SEMICOLON dec_variabless
    (58) dec_variabless -> type guardarTipo . dec_mvar SEMICOLON
    (59) dec_mvar -> . ID COLON dec_mvar
    (60) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (62) dec_mvar -> . ID
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (64) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 187

    dec_mvar                       shift and go to state 186

state 141

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body . exitFunc
    (25) exitFunc -> . empty
    (135) empty -> .

    FUNCTION        reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)

    exitFunc                       shift and go to state 188
    empty                          shift and go to state 189

state 142

    (27) param -> typeParam ID COLON . param
    (26) param -> . typeParam ID
    (27) param -> . typeParam ID COLON param
    (28) param -> . empty
    (29) typeParam -> . INT
    (30) typeParam -> . FLOAT
    (31) typeParam -> . CHAR
    (135) empty -> .

    INT             shift and go to state 59
    FLOAT           shift and go to state 60
    CHAR            shift and go to state 61
    PARENCLOSE      reduce using rule 135 (empty -> .)

    typeParam                      shift and go to state 57
    param                          shift and go to state 190
    empty                          shift and go to state 58

state 143

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body . exitFunc
    (25) exitFunc -> . empty
    (135) empty -> .

    FUNCTION        reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)

    exitFunc                       shift and go to state 191
    empty                          shift and go to state 189

state 144

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE COLON mvar
    (21) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE

    BRACECLOSE      shift and go to state 192


state 145

    (17) mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar .

    SEMICOLON       reduce using rule 17 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON mvar .)


state 146

    (65) assignment -> variableAssignment EQUAL exp . SEMICOLON
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    SEMICOLON       shift and go to state 193
    AND             shift and go to state 159
    OR              shift and go to state 160


state 147

    (103) condition -> IF PARENOPEN exp . PARENCLOSE cuadruploIF body ifEnd
    (104) condition -> IF PARENOPEN exp . PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 194
    AND             shift and go to state 159
    OR              shift and go to state 160


state 148

    (109) writing -> PRINT PARENOPEN writingg . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 195


state 149

    (110) writingg -> exp .
    (111) writingg -> exp . COLON writingg
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      reduce using rule 110 (writingg -> exp .)
    COLON           shift and go to state 196
    AND             shift and go to state 159
    OR              shift and go to state 160


state 150

    (112) writingg -> auxString .
    (113) writingg -> auxString . COLON writingg

    PARENCLOSE      reduce using rule 112 (writingg -> auxString .)
    COLON           shift and go to state 197


state 151

    (114) auxString -> CTESTRING .

    COLON           reduce using rule 114 (auxString -> CTESTRING .)
    PARENCLOSE      reduce using rule 114 (auxString -> CTESTRING .)


state 152

    (115) reading -> READ multivariables SEMICOLON .

    IF              reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    PRINT           reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    READ            reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    ID              reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    PLOT            reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    RETURN          reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    WHILE           reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    FOR             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    MAX             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    MIN             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    SUM             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    NORMAL          reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    UNIFORME        reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    POISSON         reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    BINOMIAL        reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    INT             reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    FLOAT           reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    CHAR            reduce using rule 115 (reading -> READ multivariables SEMICOLON .)
    BRACKETCLOSE    reduce using rule 115 (reading -> READ multivariables SEMICOLON .)


state 153

    (117) multivariables -> variable COLON . multivariables
    (116) multivariables -> . variable
    (117) multivariables -> . variable COLON multivariables
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 114

    variable                       shift and go to state 113
    multivariables                 shift and go to state 198

state 154

    (98) variable -> ID BRACEOPEN . exp BRACECLOSE
    (99) variable -> ID BRACEOPEN . exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 199
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 155

    (66) call_func -> ID generarERA PARENOPEN . call_funcc PARENCLOSE
    (68) call_funcc -> . exp mandarParam
    (69) call_funcc -> . exp mandarParam COLON call_funcc
    (70) call_funcc -> . empty
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (135) empty -> .
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    PARENCLOSE      reduce using rule 135 (empty -> .)
    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    call_funcc                     shift and go to state 200
    exp                            shift and go to state 201
    empty                          shift and go to state 202
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 156

    (101) variableAssignment -> ID BRACEOPEN exp . BRACECLOSE
    (102) variableAssignment -> ID BRACEOPEN exp . BRACECLOSE BRACEOPEN exp BRACECLOSE
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    BRACECLOSE      shift and go to state 203
    AND             shift and go to state 159
    OR              shift and go to state 160


state 157

    (72) graph -> PLOT PARENOPEN exp . PARENCLOSE SEMICOLON
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 204
    AND             shift and go to state 159
    OR              shift and go to state 160


state 158

    (125) return -> RETURN exp SEMICOLON .

    IF              reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    READ            reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    ID              reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    PLOT            reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    MAX             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    MIN             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    SUM             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    NORMAL          reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    UNIFORME        reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    POISSON         reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    BINOMIAL        reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    INT             reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    FLOAT           reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    CHAR            reduce using rule 125 (return -> RETURN exp SEMICOLON .)
    BRACKETCLOSE    reduce using rule 125 (return -> RETURN exp SEMICOLON .)


state 159

    (74) exp -> exp AND . expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    expp                           shift and go to state 205
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 160

    (75) exp -> exp OR . expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    expp                           shift and go to state 206
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 161

    (77) expp -> expp GREATHERTHAN . m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    m_exp                          shift and go to state 207
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 162

    (78) expp -> expp LESSTHAN . m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    m_exp                          shift and go to state 208
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 163

    (79) expp -> expp GREATHEREQUAL . m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    m_exp                          shift and go to state 209
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 164

    (80) expp -> expp LESSEQUAL . m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    m_exp                          shift and go to state 210
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 165

    (81) expp -> expp DIFFERENT . m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    m_exp                          shift and go to state 211
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 166

    (82) expp -> expp SAME . m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    m_exp                          shift and go to state 212
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 167

    (84) m_exp -> m_exp PLUS . termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    termino                        shift and go to state 213
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 168

    (85) m_exp -> m_exp MINUS . termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    termino                        shift and go to state 214
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 169

    (87) termino -> termino MULTIPLY . factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    factor                         shift and go to state 215
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 170

    (88) termino -> termino DIVIDE . factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    factor                         shift and go to state 216
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 171

    (90) factor -> CTEINT guardarConstanteInt .

    MULTIPLY        reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    DIVIDE          reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    PLUS            reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    MINUS           reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    GREATHERTHAN    reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    LESSTHAN        reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    GREATHEREQUAL   reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    LESSEQUAL       reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    DIFFERENT       reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    SAME            reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    SEMICOLON       reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    AND             reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    OR              reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    PARENCLOSE      reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    COLON           reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    BRACECLOSE      reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)
    TO              reduce using rule 90 (factor -> CTEINT guardarConstanteInt .)


state 172

    (95) guardarConstanteInt -> empty .

    MULTIPLY        reduce using rule 95 (guardarConstanteInt -> empty .)
    DIVIDE          reduce using rule 95 (guardarConstanteInt -> empty .)
    PLUS            reduce using rule 95 (guardarConstanteInt -> empty .)
    MINUS           reduce using rule 95 (guardarConstanteInt -> empty .)
    GREATHERTHAN    reduce using rule 95 (guardarConstanteInt -> empty .)
    LESSTHAN        reduce using rule 95 (guardarConstanteInt -> empty .)
    GREATHEREQUAL   reduce using rule 95 (guardarConstanteInt -> empty .)
    LESSEQUAL       reduce using rule 95 (guardarConstanteInt -> empty .)
    DIFFERENT       reduce using rule 95 (guardarConstanteInt -> empty .)
    SAME            reduce using rule 95 (guardarConstanteInt -> empty .)
    SEMICOLON       reduce using rule 95 (guardarConstanteInt -> empty .)
    AND             reduce using rule 95 (guardarConstanteInt -> empty .)
    OR              reduce using rule 95 (guardarConstanteInt -> empty .)
    PARENCLOSE      reduce using rule 95 (guardarConstanteInt -> empty .)
    COLON           reduce using rule 95 (guardarConstanteInt -> empty .)
    BRACECLOSE      reduce using rule 95 (guardarConstanteInt -> empty .)
    TO              reduce using rule 95 (guardarConstanteInt -> empty .)


state 173

    (91) factor -> CTFLOAT guardarConstanteFloat .

    MULTIPLY        reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    DIVIDE          reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    PLUS            reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    MINUS           reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    GREATHERTHAN    reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    LESSTHAN        reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    GREATHEREQUAL   reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    LESSEQUAL       reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    DIFFERENT       reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    SAME            reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    SEMICOLON       reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    AND             reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    OR              reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    PARENCLOSE      reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    COLON           reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    BRACECLOSE      reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)
    TO              reduce using rule 91 (factor -> CTFLOAT guardarConstanteFloat .)


state 174

    (96) guardarConstanteFloat -> empty .

    MULTIPLY        reduce using rule 96 (guardarConstanteFloat -> empty .)
    DIVIDE          reduce using rule 96 (guardarConstanteFloat -> empty .)
    PLUS            reduce using rule 96 (guardarConstanteFloat -> empty .)
    MINUS           reduce using rule 96 (guardarConstanteFloat -> empty .)
    GREATHERTHAN    reduce using rule 96 (guardarConstanteFloat -> empty .)
    LESSTHAN        reduce using rule 96 (guardarConstanteFloat -> empty .)
    GREATHEREQUAL   reduce using rule 96 (guardarConstanteFloat -> empty .)
    LESSEQUAL       reduce using rule 96 (guardarConstanteFloat -> empty .)
    DIFFERENT       reduce using rule 96 (guardarConstanteFloat -> empty .)
    SAME            reduce using rule 96 (guardarConstanteFloat -> empty .)
    SEMICOLON       reduce using rule 96 (guardarConstanteFloat -> empty .)
    AND             reduce using rule 96 (guardarConstanteFloat -> empty .)
    OR              reduce using rule 96 (guardarConstanteFloat -> empty .)
    PARENCLOSE      reduce using rule 96 (guardarConstanteFloat -> empty .)
    COLON           reduce using rule 96 (guardarConstanteFloat -> empty .)
    BRACECLOSE      reduce using rule 96 (guardarConstanteFloat -> empty .)
    TO              reduce using rule 96 (guardarConstanteFloat -> empty .)


state 175

    (94) factor -> PARENOPEN exp . PARENCLOSE
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 217
    AND             shift and go to state 159
    OR              shift and go to state 160


state 176

    (118) while_loop -> WHILE whileMigaja PARENOPEN . exp PARENCLOSE whileEval body whileEnd
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 218
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 177

    (122) for_loop -> FOR PARENOPEN ID . EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd

    EQUAL           shift and go to state 219


state 178

    (126) max -> MAX PARENOPEN exp . PARENCLOSE SEMICOLON
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 220
    AND             shift and go to state 159
    OR              shift and go to state 160


state 179

    (127) min -> MIN PARENOPEN exp . PARENCLOSE SEMICOLON
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 221
    AND             shift and go to state 159
    OR              shift and go to state 160


state 180

    (128) sum -> SUM PARENOPEN exp . PARENCLOSE SEMICOLON
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 222
    AND             shift and go to state 159
    OR              shift and go to state 160


state 181

    (134) normal -> NORMAL PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 223


state 182

    (129) param_dist -> variable .
    (130) param_dist -> variable . COLON param_dist

    PARENCLOSE      reduce using rule 129 (param_dist -> variable .)
    COLON           shift and go to state 224


state 183

    (133) uniforme -> UNIFORME PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 225


state 184

    (132) poisson -> POISSON PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 226


state 185

    (131) binomial -> BINOMIAL PARENOPEN param_dist . PARENCLOSE SEMICOLON

    PARENCLOSE      shift and go to state 227


state 186

    (57) dec_variabless -> type guardarTipo dec_mvar . SEMICOLON dec_variabless
    (58) dec_variabless -> type guardarTipo dec_mvar . SEMICOLON

    SEMICOLON       shift and go to state 228


state 187

    (59) dec_mvar -> ID . COLON dec_mvar
    (60) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (62) dec_mvar -> ID .
    (63) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE
    (64) dec_mvar -> ID . BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 229
    BRACEOPEN       shift and go to state 230
    SEMICOLON       reduce using rule 62 (dec_mvar -> ID .)


state 188

    (22) dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .

    FUNCTION        reduce using rule 22 (dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .)
    MAIN            reduce using rule 22 (dec_func -> FUNCTION type ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .)


state 189

    (25) exitFunc -> empty .

    FUNCTION        reduce using rule 25 (exitFunc -> empty .)
    MAIN            reduce using rule 25 (exitFunc -> empty .)


state 190

    (27) param -> typeParam ID COLON param .

    PARENCLOSE      reduce using rule 27 (param -> typeParam ID COLON param .)


state 191

    (23) dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .

    FUNCTION        reduce using rule 23 (dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .)
    MAIN            reduce using rule 23 (dec_func -> FUNCTION VOID ID crearSymbolTable PARENOPEN param PARENCLOSE body exitFunc .)


state 192

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE . COLON mvar
    (21) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .

    COLON           shift and go to state 231
    SEMICOLON       reduce using rule 21 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .)


state 193

    (65) assignment -> variableAssignment EQUAL exp SEMICOLON .

    IF              reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    READ            reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    ID              reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    PLOT            reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    FOR             reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    MAX             reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    MIN             reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    SUM             reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    NORMAL          reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    UNIFORME        reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    POISSON         reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    BINOMIAL        reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    INT             reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    FLOAT           reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    CHAR            reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)
    BRACKETCLOSE    reduce using rule 65 (assignment -> variableAssignment EQUAL exp SEMICOLON .)


state 194

    (103) condition -> IF PARENOPEN exp PARENCLOSE . cuadruploIF body ifEnd
    (104) condition -> IF PARENOPEN exp PARENCLOSE . cuadruploIF body cuadruploElse ELSE body ifEndElse
    (105) cuadruploIF -> . empty
    (135) empty -> .

    BRACKETOPEN     reduce using rule 135 (empty -> .)

    cuadruploIF                    shift and go to state 232
    empty                          shift and go to state 233

state 195

    (109) writing -> PRINT PARENOPEN writingg PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 234


state 196

    (111) writingg -> exp COLON . writingg
    (110) writingg -> . exp
    (111) writingg -> . exp COLON writingg
    (112) writingg -> . auxString
    (113) writingg -> . auxString COLON writingg
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (114) auxString -> . CTESTRING
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 151
    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 149
    writingg                       shift and go to state 235
    auxString                      shift and go to state 150
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 197

    (113) writingg -> auxString COLON . writingg
    (110) writingg -> . exp
    (111) writingg -> . exp COLON writingg
    (112) writingg -> . auxString
    (113) writingg -> . auxString COLON writingg
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (114) auxString -> . CTESTRING
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    CTESTRING       shift and go to state 151
    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    auxString                      shift and go to state 150
    writingg                       shift and go to state 236
    exp                            shift and go to state 149
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 198

    (117) multivariables -> variable COLON multivariables .

    SEMICOLON       reduce using rule 117 (multivariables -> variable COLON multivariables .)


state 199

    (98) variable -> ID BRACEOPEN exp . BRACECLOSE
    (99) variable -> ID BRACEOPEN exp . BRACECLOSE BRACEOPEN exp BRACECLOSE
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    BRACECLOSE      shift and go to state 237
    AND             shift and go to state 159
    OR              shift and go to state 160


state 200

    (66) call_func -> ID generarERA PARENOPEN call_funcc . PARENCLOSE

    PARENCLOSE      shift and go to state 238


state 201

    (68) call_funcc -> exp . mandarParam
    (69) call_funcc -> exp . mandarParam COLON call_funcc
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp
    (71) mandarParam -> . empty
    (135) empty -> .

    AND             shift and go to state 159
    OR              shift and go to state 160
    COLON           reduce using rule 135 (empty -> .)
    PARENCLOSE      reduce using rule 135 (empty -> .)

    mandarParam                    shift and go to state 239
    empty                          shift and go to state 240

state 202

    (70) call_funcc -> empty .

    PARENCLOSE      reduce using rule 70 (call_funcc -> empty .)


state 203

    (101) variableAssignment -> ID BRACEOPEN exp BRACECLOSE .
    (102) variableAssignment -> ID BRACEOPEN exp BRACECLOSE . BRACEOPEN exp BRACECLOSE

    EQUAL           reduce using rule 101 (variableAssignment -> ID BRACEOPEN exp BRACECLOSE .)
    BRACEOPEN       shift and go to state 241


state 204

    (72) graph -> PLOT PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 242


state 205

    (74) exp -> exp AND expp .
    (77) expp -> expp . GREATHERTHAN m_exp
    (78) expp -> expp . LESSTHAN m_exp
    (79) expp -> expp . GREATHEREQUAL m_exp
    (80) expp -> expp . LESSEQUAL m_exp
    (81) expp -> expp . DIFFERENT m_exp
    (82) expp -> expp . SAME m_exp

    SEMICOLON       reduce using rule 74 (exp -> exp AND expp .)
    AND             reduce using rule 74 (exp -> exp AND expp .)
    OR              reduce using rule 74 (exp -> exp AND expp .)
    PARENCLOSE      reduce using rule 74 (exp -> exp AND expp .)
    COLON           reduce using rule 74 (exp -> exp AND expp .)
    BRACECLOSE      reduce using rule 74 (exp -> exp AND expp .)
    TO              reduce using rule 74 (exp -> exp AND expp .)
    GREATHERTHAN    shift and go to state 161
    LESSTHAN        shift and go to state 162
    GREATHEREQUAL   shift and go to state 163
    LESSEQUAL       shift and go to state 164
    DIFFERENT       shift and go to state 165
    SAME            shift and go to state 166


state 206

    (75) exp -> exp OR expp .
    (77) expp -> expp . GREATHERTHAN m_exp
    (78) expp -> expp . LESSTHAN m_exp
    (79) expp -> expp . GREATHEREQUAL m_exp
    (80) expp -> expp . LESSEQUAL m_exp
    (81) expp -> expp . DIFFERENT m_exp
    (82) expp -> expp . SAME m_exp

    SEMICOLON       reduce using rule 75 (exp -> exp OR expp .)
    AND             reduce using rule 75 (exp -> exp OR expp .)
    OR              reduce using rule 75 (exp -> exp OR expp .)
    PARENCLOSE      reduce using rule 75 (exp -> exp OR expp .)
    COLON           reduce using rule 75 (exp -> exp OR expp .)
    BRACECLOSE      reduce using rule 75 (exp -> exp OR expp .)
    TO              reduce using rule 75 (exp -> exp OR expp .)
    GREATHERTHAN    shift and go to state 161
    LESSTHAN        shift and go to state 162
    GREATHEREQUAL   shift and go to state 163
    LESSEQUAL       shift and go to state 164
    DIFFERENT       shift and go to state 165
    SAME            shift and go to state 166


state 207

    (77) expp -> expp GREATHERTHAN m_exp .
    (84) m_exp -> m_exp . PLUS termino
    (85) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    LESSTHAN        reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    GREATHEREQUAL   reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    LESSEQUAL       reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    DIFFERENT       reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    SAME            reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    SEMICOLON       reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    AND             reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    OR              reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    PARENCLOSE      reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    COLON           reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    BRACECLOSE      reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    TO              reduce using rule 77 (expp -> expp GREATHERTHAN m_exp .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 208

    (78) expp -> expp LESSTHAN m_exp .
    (84) m_exp -> m_exp . PLUS termino
    (85) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    LESSTHAN        reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    GREATHEREQUAL   reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    LESSEQUAL       reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    DIFFERENT       reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    SAME            reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    SEMICOLON       reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    AND             reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    OR              reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    PARENCLOSE      reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    COLON           reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    BRACECLOSE      reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    TO              reduce using rule 78 (expp -> expp LESSTHAN m_exp .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 209

    (79) expp -> expp GREATHEREQUAL m_exp .
    (84) m_exp -> m_exp . PLUS termino
    (85) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    LESSTHAN        reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    GREATHEREQUAL   reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    LESSEQUAL       reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    DIFFERENT       reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    SAME            reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    SEMICOLON       reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    AND             reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    OR              reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    PARENCLOSE      reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    COLON           reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    BRACECLOSE      reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    TO              reduce using rule 79 (expp -> expp GREATHEREQUAL m_exp .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 210

    (80) expp -> expp LESSEQUAL m_exp .
    (84) m_exp -> m_exp . PLUS termino
    (85) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    LESSTHAN        reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    GREATHEREQUAL   reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    LESSEQUAL       reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    DIFFERENT       reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    SAME            reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    SEMICOLON       reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    AND             reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    OR              reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    PARENCLOSE      reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    COLON           reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    BRACECLOSE      reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    TO              reduce using rule 80 (expp -> expp LESSEQUAL m_exp .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 211

    (81) expp -> expp DIFFERENT m_exp .
    (84) m_exp -> m_exp . PLUS termino
    (85) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    LESSTHAN        reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    GREATHEREQUAL   reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    LESSEQUAL       reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    DIFFERENT       reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    SAME            reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    SEMICOLON       reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    AND             reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    OR              reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    PARENCLOSE      reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    COLON           reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    BRACECLOSE      reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    TO              reduce using rule 81 (expp -> expp DIFFERENT m_exp .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 212

    (82) expp -> expp SAME m_exp .
    (84) m_exp -> m_exp . PLUS termino
    (85) m_exp -> m_exp . MINUS termino

    GREATHERTHAN    reduce using rule 82 (expp -> expp SAME m_exp .)
    LESSTHAN        reduce using rule 82 (expp -> expp SAME m_exp .)
    GREATHEREQUAL   reduce using rule 82 (expp -> expp SAME m_exp .)
    LESSEQUAL       reduce using rule 82 (expp -> expp SAME m_exp .)
    DIFFERENT       reduce using rule 82 (expp -> expp SAME m_exp .)
    SAME            reduce using rule 82 (expp -> expp SAME m_exp .)
    SEMICOLON       reduce using rule 82 (expp -> expp SAME m_exp .)
    AND             reduce using rule 82 (expp -> expp SAME m_exp .)
    OR              reduce using rule 82 (expp -> expp SAME m_exp .)
    PARENCLOSE      reduce using rule 82 (expp -> expp SAME m_exp .)
    COLON           reduce using rule 82 (expp -> expp SAME m_exp .)
    BRACECLOSE      reduce using rule 82 (expp -> expp SAME m_exp .)
    TO              reduce using rule 82 (expp -> expp SAME m_exp .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 213

    (84) m_exp -> m_exp PLUS termino .
    (87) termino -> termino . MULTIPLY factor
    (88) termino -> termino . DIVIDE factor

    PLUS            reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    MINUS           reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    GREATHERTHAN    reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    LESSTHAN        reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    GREATHEREQUAL   reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    LESSEQUAL       reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    DIFFERENT       reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    SAME            reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    SEMICOLON       reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    AND             reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    OR              reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    PARENCLOSE      reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    COLON           reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    BRACECLOSE      reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    TO              reduce using rule 84 (m_exp -> m_exp PLUS termino .)
    MULTIPLY        shift and go to state 169
    DIVIDE          shift and go to state 170


state 214

    (85) m_exp -> m_exp MINUS termino .
    (87) termino -> termino . MULTIPLY factor
    (88) termino -> termino . DIVIDE factor

    PLUS            reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    MINUS           reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    GREATHERTHAN    reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    LESSTHAN        reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    GREATHEREQUAL   reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    LESSEQUAL       reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    DIFFERENT       reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    SAME            reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    SEMICOLON       reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    AND             reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    OR              reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    PARENCLOSE      reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    COLON           reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    BRACECLOSE      reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    TO              reduce using rule 85 (m_exp -> m_exp MINUS termino .)
    MULTIPLY        shift and go to state 169
    DIVIDE          shift and go to state 170


state 215

    (87) termino -> termino MULTIPLY factor .

    MULTIPLY        reduce using rule 87 (termino -> termino MULTIPLY factor .)
    DIVIDE          reduce using rule 87 (termino -> termino MULTIPLY factor .)
    PLUS            reduce using rule 87 (termino -> termino MULTIPLY factor .)
    MINUS           reduce using rule 87 (termino -> termino MULTIPLY factor .)
    GREATHERTHAN    reduce using rule 87 (termino -> termino MULTIPLY factor .)
    LESSTHAN        reduce using rule 87 (termino -> termino MULTIPLY factor .)
    GREATHEREQUAL   reduce using rule 87 (termino -> termino MULTIPLY factor .)
    LESSEQUAL       reduce using rule 87 (termino -> termino MULTIPLY factor .)
    DIFFERENT       reduce using rule 87 (termino -> termino MULTIPLY factor .)
    SAME            reduce using rule 87 (termino -> termino MULTIPLY factor .)
    SEMICOLON       reduce using rule 87 (termino -> termino MULTIPLY factor .)
    AND             reduce using rule 87 (termino -> termino MULTIPLY factor .)
    OR              reduce using rule 87 (termino -> termino MULTIPLY factor .)
    PARENCLOSE      reduce using rule 87 (termino -> termino MULTIPLY factor .)
    COLON           reduce using rule 87 (termino -> termino MULTIPLY factor .)
    BRACECLOSE      reduce using rule 87 (termino -> termino MULTIPLY factor .)
    TO              reduce using rule 87 (termino -> termino MULTIPLY factor .)


state 216

    (88) termino -> termino DIVIDE factor .

    MULTIPLY        reduce using rule 88 (termino -> termino DIVIDE factor .)
    DIVIDE          reduce using rule 88 (termino -> termino DIVIDE factor .)
    PLUS            reduce using rule 88 (termino -> termino DIVIDE factor .)
    MINUS           reduce using rule 88 (termino -> termino DIVIDE factor .)
    GREATHERTHAN    reduce using rule 88 (termino -> termino DIVIDE factor .)
    LESSTHAN        reduce using rule 88 (termino -> termino DIVIDE factor .)
    GREATHEREQUAL   reduce using rule 88 (termino -> termino DIVIDE factor .)
    LESSEQUAL       reduce using rule 88 (termino -> termino DIVIDE factor .)
    DIFFERENT       reduce using rule 88 (termino -> termino DIVIDE factor .)
    SAME            reduce using rule 88 (termino -> termino DIVIDE factor .)
    SEMICOLON       reduce using rule 88 (termino -> termino DIVIDE factor .)
    AND             reduce using rule 88 (termino -> termino DIVIDE factor .)
    OR              reduce using rule 88 (termino -> termino DIVIDE factor .)
    PARENCLOSE      reduce using rule 88 (termino -> termino DIVIDE factor .)
    COLON           reduce using rule 88 (termino -> termino DIVIDE factor .)
    BRACECLOSE      reduce using rule 88 (termino -> termino DIVIDE factor .)
    TO              reduce using rule 88 (termino -> termino DIVIDE factor .)


state 217

    (94) factor -> PARENOPEN exp PARENCLOSE .

    MULTIPLY        reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    DIVIDE          reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    PLUS            reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    MINUS           reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    GREATHERTHAN    reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    LESSTHAN        reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    GREATHEREQUAL   reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    LESSEQUAL       reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    DIFFERENT       reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    SAME            reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    SEMICOLON       reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    AND             reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    OR              reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    PARENCLOSE      reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    COLON           reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    BRACECLOSE      reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)
    TO              reduce using rule 94 (factor -> PARENOPEN exp PARENCLOSE .)


state 218

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp . PARENCLOSE whileEval body whileEnd
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 243
    AND             shift and go to state 159
    OR              shift and go to state 160


state 219

    (122) for_loop -> FOR PARENOPEN ID EQUAL . exp guardarValorFor TO exp PARENCLOSE body forEnd
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 244
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 220

    (126) max -> MAX PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 245


state 221

    (127) min -> MIN PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 246


state 222

    (128) sum -> SUM PARENOPEN exp PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 247


state 223

    (134) normal -> NORMAL PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 248


state 224

    (130) param_dist -> variable COLON . param_dist
    (129) param_dist -> . variable
    (130) param_dist -> . variable COLON param_dist
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE

    ID              shift and go to state 114

    variable                       shift and go to state 182
    param_dist                     shift and go to state 249

state 225

    (133) uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 250


state 226

    (132) poisson -> POISSON PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 251


state 227

    (131) binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE . SEMICOLON

    SEMICOLON       shift and go to state 252


state 228

    (57) dec_variabless -> type guardarTipo dec_mvar SEMICOLON . dec_variabless
    (58) dec_variabless -> type guardarTipo dec_mvar SEMICOLON .
    (57) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON dec_variabless
    (58) dec_variabless -> . type guardarTipo dec_mvar SEMICOLON
    (32) type -> . INT
    (33) type -> . FLOAT
    (34) type -> . CHAR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    IF              reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    PRINT           reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    READ            reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    ID              reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    PLOT            reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    RETURN          reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    WHILE           reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    FOR             reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    MAX             reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    MIN             reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    SUM             reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    NORMAL          reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    UNIFORME        reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    POISSON         reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    BINOMIAL        reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    BRACKETCLOSE    reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

  ! INT             [ reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]
  ! CHAR            [ reduce using rule 58 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON .) ]

    type                           shift and go to state 101
    dec_variabless                 shift and go to state 253

state 229

    (59) dec_mvar -> ID COLON . dec_mvar
    (59) dec_mvar -> . ID COLON dec_mvar
    (60) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (62) dec_mvar -> . ID
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (64) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 187

    dec_mvar                       shift and go to state 254

state 230

    (60) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE
    (64) dec_mvar -> ID BRACEOPEN . CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    CTEINT          shift and go to state 255


state 231

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON . mvar
    (16) mvar -> . ID COLON mvar
    (17) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (18) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar
    (19) mvar -> . ID
    (20) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (21) mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 39

    mvar                           shift and go to state 256

state 232

    (103) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF . body ifEnd
    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF . body cuadruploElse ELSE body ifEndElse
    (35) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 257

state 233

    (105) cuadruploIF -> empty .

    BRACKETOPEN     reduce using rule 105 (cuadruploIF -> empty .)


state 234

    (109) writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .

    IF              reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    READ            reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    ID              reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    INT             reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 109 (writing -> PRINT PARENOPEN writingg PARENCLOSE SEMICOLON .)


state 235

    (111) writingg -> exp COLON writingg .

    PARENCLOSE      reduce using rule 111 (writingg -> exp COLON writingg .)


state 236

    (113) writingg -> auxString COLON writingg .

    PARENCLOSE      reduce using rule 113 (writingg -> auxString COLON writingg .)


state 237

    (98) variable -> ID BRACEOPEN exp BRACECLOSE .
    (99) variable -> ID BRACEOPEN exp BRACECLOSE . BRACEOPEN exp BRACECLOSE

    COLON           reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    SEMICOLON       reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    MULTIPLY        reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    DIVIDE          reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    PLUS            reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    MINUS           reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    GREATHERTHAN    reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    LESSTHAN        reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    GREATHEREQUAL   reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    LESSEQUAL       reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    DIFFERENT       reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    SAME            reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    AND             reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    OR              reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    PARENCLOSE      reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    BRACECLOSE      reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    TO              reduce using rule 98 (variable -> ID BRACEOPEN exp BRACECLOSE .)
    BRACEOPEN       shift and go to state 258


state 238

    (66) call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .

    IF              reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    PRINT           reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    READ            reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    ID              reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    PLOT            reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    RETURN          reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    WHILE           reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    FOR             reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    MAX             reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    MIN             reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    SUM             reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    NORMAL          reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    UNIFORME        reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    POISSON         reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    BINOMIAL        reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    INT             reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    FLOAT           reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    CHAR            reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    BRACKETCLOSE    reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    MULTIPLY        reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    DIVIDE          reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    PLUS            reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    MINUS           reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    GREATHERTHAN    reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    LESSTHAN        reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    GREATHEREQUAL   reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    LESSEQUAL       reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    DIFFERENT       reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    SAME            reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    SEMICOLON       reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    AND             reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    OR              reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    PARENCLOSE      reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    COLON           reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    BRACECLOSE      reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)
    TO              reduce using rule 66 (call_func -> ID generarERA PARENOPEN call_funcc PARENCLOSE .)


state 239

    (68) call_funcc -> exp mandarParam .
    (69) call_funcc -> exp mandarParam . COLON call_funcc

    PARENCLOSE      reduce using rule 68 (call_funcc -> exp mandarParam .)
    COLON           shift and go to state 259


state 240

    (71) mandarParam -> empty .

    COLON           reduce using rule 71 (mandarParam -> empty .)
    PARENCLOSE      reduce using rule 71 (mandarParam -> empty .)


state 241

    (102) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN . exp BRACECLOSE
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 260
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 242

    (72) graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 72 (graph -> PLOT PARENOPEN exp PARENCLOSE SEMICOLON .)


state 243

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE . whileEval body whileEnd
    (120) whileEval -> . empty
    (135) empty -> .

    BRACKETOPEN     reduce using rule 135 (empty -> .)

    whileEval                      shift and go to state 261
    empty                          shift and go to state 262

state 244

    (122) for_loop -> FOR PARENOPEN ID EQUAL exp . guardarValorFor TO exp PARENCLOSE body forEnd
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp
    (123) guardarValorFor -> . empty
    (135) empty -> .

    AND             shift and go to state 159
    OR              shift and go to state 160
    TO              reduce using rule 135 (empty -> .)

    guardarValorFor                shift and go to state 263
    empty                          shift and go to state 264

state 245

    (126) max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 126 (max -> MAX PARENOPEN exp PARENCLOSE SEMICOLON .)


state 246

    (127) min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 127 (min -> MIN PARENOPEN exp PARENCLOSE SEMICOLON .)


state 247

    (128) sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .

    IF              reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    READ            reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    ID              reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    INT             reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 128 (sum -> SUM PARENOPEN exp PARENCLOSE SEMICOLON .)


state 248

    (134) normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 134 (normal -> NORMAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 249

    (130) param_dist -> variable COLON param_dist .

    PARENCLOSE      reduce using rule 130 (param_dist -> variable COLON param_dist .)


state 250

    (133) uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 133 (uniforme -> UNIFORME PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 251

    (132) poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 132 (poisson -> POISSON PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 252

    (131) binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .

    IF              reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PRINT           reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    READ            reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    ID              reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    PLOT            reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    RETURN          reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    WHILE           reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FOR             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MAX             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    MIN             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    SUM             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    NORMAL          reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    UNIFORME        reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    POISSON         reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BINOMIAL        reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    INT             reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    FLOAT           reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    CHAR            reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)
    BRACKETCLOSE    reduce using rule 131 (binomial -> BINOMIAL PARENOPEN param_dist PARENCLOSE SEMICOLON .)


state 253

    (57) dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .

    IF              reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    PRINT           reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    READ            reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    ID              reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    PLOT            reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    RETURN          reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    WHILE           reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    FOR             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    MAX             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    MIN             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    SUM             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    NORMAL          reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    UNIFORME        reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    POISSON         reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    BINOMIAL        reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    INT             reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    FLOAT           reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    CHAR            reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)
    BRACKETCLOSE    reduce using rule 57 (dec_variabless -> type guardarTipo dec_mvar SEMICOLON dec_variabless .)


state 254

    (59) dec_mvar -> ID COLON dec_mvar .

    SEMICOLON       reduce using rule 59 (dec_mvar -> ID COLON dec_mvar .)


state 255

    (60) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE
    (64) dec_mvar -> ID BRACEOPEN CTEINT . BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    BRACECLOSE      shift and go to state 265


state 256

    (18) mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar .

    SEMICOLON       reduce using rule 18 (mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON mvar .)


state 257

    (103) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body . ifEnd
    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body . cuadruploElse ELSE body ifEndElse
    (106) ifEnd -> . empty
    (107) cuadruploElse -> . empty
    (135) empty -> .

    IF              reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ            reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    PLOT            reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    MAX             reduce using rule 135 (empty -> .)
    MIN             reduce using rule 135 (empty -> .)
    SUM             reduce using rule 135 (empty -> .)
    NORMAL          reduce using rule 135 (empty -> .)
    UNIFORME        reduce using rule 135 (empty -> .)
    POISSON         reduce using rule 135 (empty -> .)
    BINOMIAL        reduce using rule 135 (empty -> .)
    INT             reduce using rule 135 (empty -> .)
    FLOAT           reduce using rule 135 (empty -> .)
    CHAR            reduce using rule 135 (empty -> .)
    BRACKETCLOSE    reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)

    ifEnd                          shift and go to state 266
    cuadruploElse                  shift and go to state 267
    empty                          shift and go to state 268

state 258

    (99) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN . exp BRACECLOSE
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 269
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 259

    (69) call_funcc -> exp mandarParam COLON . call_funcc
    (68) call_funcc -> . exp mandarParam
    (69) call_funcc -> . exp mandarParam COLON call_funcc
    (70) call_funcc -> . empty
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (135) empty -> .
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    PARENCLOSE      reduce using rule 135 (empty -> .)
    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 201
    call_funcc                     shift and go to state 270
    empty                          shift and go to state 202
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 260

    (102) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp . BRACECLOSE
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    BRACECLOSE      shift and go to state 271
    AND             shift and go to state 159
    OR              shift and go to state 160


state 261

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval . body whileEnd
    (35) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 272

state 262

    (120) whileEval -> empty .

    BRACKETOPEN     reduce using rule 120 (whileEval -> empty .)


state 263

    (122) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor . TO exp PARENCLOSE body forEnd

    TO              shift and go to state 273


state 264

    (123) guardarValorFor -> empty .

    TO              reduce using rule 123 (guardarValorFor -> empty .)


state 265

    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . COLON dec_mvar
    (61) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (63) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE .
    (64) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE . BRACEOPEN CTEINT BRACECLOSE

    COLON           shift and go to state 275
    BRACEOPEN       shift and go to state 274
    SEMICOLON       reduce using rule 63 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE .)


state 266

    (103) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .

    IF              reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    PRINT           reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    READ            reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    ID              reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    PLOT            reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    RETURN          reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    WHILE           reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    FOR             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    MAX             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    MIN             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    SUM             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    NORMAL          reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    UNIFORME        reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    POISSON         reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    BINOMIAL        reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    INT             reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    FLOAT           reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    CHAR            reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)
    BRACKETCLOSE    reduce using rule 103 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body ifEnd .)


state 267

    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse . ELSE body ifEndElse

    ELSE            shift and go to state 276


state 268

    (106) ifEnd -> empty .
    (107) cuadruploElse -> empty .

    IF              reduce using rule 106 (ifEnd -> empty .)
    PRINT           reduce using rule 106 (ifEnd -> empty .)
    READ            reduce using rule 106 (ifEnd -> empty .)
    ID              reduce using rule 106 (ifEnd -> empty .)
    PLOT            reduce using rule 106 (ifEnd -> empty .)
    RETURN          reduce using rule 106 (ifEnd -> empty .)
    WHILE           reduce using rule 106 (ifEnd -> empty .)
    FOR             reduce using rule 106 (ifEnd -> empty .)
    MAX             reduce using rule 106 (ifEnd -> empty .)
    MIN             reduce using rule 106 (ifEnd -> empty .)
    SUM             reduce using rule 106 (ifEnd -> empty .)
    NORMAL          reduce using rule 106 (ifEnd -> empty .)
    UNIFORME        reduce using rule 106 (ifEnd -> empty .)
    POISSON         reduce using rule 106 (ifEnd -> empty .)
    BINOMIAL        reduce using rule 106 (ifEnd -> empty .)
    INT             reduce using rule 106 (ifEnd -> empty .)
    FLOAT           reduce using rule 106 (ifEnd -> empty .)
    CHAR            reduce using rule 106 (ifEnd -> empty .)
    BRACKETCLOSE    reduce using rule 106 (ifEnd -> empty .)
    ELSE            reduce using rule 107 (cuadruploElse -> empty .)


state 269

    (99) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp . BRACECLOSE
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    BRACECLOSE      shift and go to state 277
    AND             shift and go to state 159
    OR              shift and go to state 160


state 270

    (69) call_funcc -> exp mandarParam COLON call_funcc .

    PARENCLOSE      reduce using rule 69 (call_funcc -> exp mandarParam COLON call_funcc .)


state 271

    (102) variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .

    EQUAL           reduce using rule 102 (variableAssignment -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)


state 272

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body . whileEnd
    (121) whileEnd -> . empty
    (135) empty -> .

    IF              reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ            reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    PLOT            reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    MAX             reduce using rule 135 (empty -> .)
    MIN             reduce using rule 135 (empty -> .)
    SUM             reduce using rule 135 (empty -> .)
    NORMAL          reduce using rule 135 (empty -> .)
    UNIFORME        reduce using rule 135 (empty -> .)
    POISSON         reduce using rule 135 (empty -> .)
    BINOMIAL        reduce using rule 135 (empty -> .)
    INT             reduce using rule 135 (empty -> .)
    FLOAT           reduce using rule 135 (empty -> .)
    CHAR            reduce using rule 135 (empty -> .)
    BRACKETCLOSE    reduce using rule 135 (empty -> .)

    whileEnd                       shift and go to state 278
    empty                          shift and go to state 279

state 273

    (122) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO . exp PARENCLOSE body forEnd
    (73) exp -> . expp
    (74) exp -> . exp AND expp
    (75) exp -> . exp OR expp
    (76) expp -> . m_exp
    (77) expp -> . expp GREATHERTHAN m_exp
    (78) expp -> . expp LESSTHAN m_exp
    (79) expp -> . expp GREATHEREQUAL m_exp
    (80) expp -> . expp LESSEQUAL m_exp
    (81) expp -> . expp DIFFERENT m_exp
    (82) expp -> . expp SAME m_exp
    (83) m_exp -> . termino
    (84) m_exp -> . m_exp PLUS termino
    (85) m_exp -> . m_exp MINUS termino
    (86) termino -> . factor
    (87) termino -> . termino MULTIPLY factor
    (88) termino -> . termino DIVIDE factor
    (89) factor -> . ID
    (90) factor -> . CTEINT guardarConstanteInt
    (91) factor -> . CTFLOAT guardarConstanteFloat
    (92) factor -> . variable
    (93) factor -> . call_func
    (94) factor -> . PARENOPEN exp PARENCLOSE
    (97) variable -> . ID
    (98) variable -> . ID BRACEOPEN exp BRACECLOSE
    (99) variable -> . ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE
    (66) call_func -> . ID generarERA PARENOPEN call_funcc PARENCLOSE

    ID              shift and go to state 124
    CTEINT          shift and go to state 125
    CTFLOAT         shift and go to state 126
    PARENOPEN       shift and go to state 129

    exp                            shift and go to state 280
    expp                           shift and go to state 120
    m_exp                          shift and go to state 121
    termino                        shift and go to state 122
    factor                         shift and go to state 123
    variable                       shift and go to state 127
    call_func                      shift and go to state 128

state 274

    (61) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE COLON dec_mvar
    (64) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN . CTEINT BRACECLOSE

    CTEINT          shift and go to state 281


state 275

    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON . dec_mvar
    (59) dec_mvar -> . ID COLON dec_mvar
    (60) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (62) dec_mvar -> . ID
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (64) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 187

    dec_mvar                       shift and go to state 282

state 276

    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE . body ifEndElse
    (35) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 283

state 277

    (99) variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .

    COLON           reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    SEMICOLON       reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    MULTIPLY        reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    DIVIDE          reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    PLUS            reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    MINUS           reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    GREATHERTHAN    reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    LESSTHAN        reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    GREATHEREQUAL   reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    LESSEQUAL       reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    DIFFERENT       reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    SAME            reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    AND             reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    OR              reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    PARENCLOSE      reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    BRACECLOSE      reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)
    TO              reduce using rule 99 (variable -> ID BRACEOPEN exp BRACECLOSE BRACEOPEN exp BRACECLOSE .)


state 278

    (118) while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .

    IF              reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    PRINT           reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    READ            reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    ID              reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    PLOT            reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    RETURN          reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    WHILE           reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    FOR             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    MAX             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    MIN             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    SUM             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    NORMAL          reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    UNIFORME        reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    POISSON         reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    BINOMIAL        reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    INT             reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    FLOAT           reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    CHAR            reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)
    BRACKETCLOSE    reduce using rule 118 (while_loop -> WHILE whileMigaja PARENOPEN exp PARENCLOSE whileEval body whileEnd .)


state 279

    (121) whileEnd -> empty .

    IF              reduce using rule 121 (whileEnd -> empty .)
    PRINT           reduce using rule 121 (whileEnd -> empty .)
    READ            reduce using rule 121 (whileEnd -> empty .)
    ID              reduce using rule 121 (whileEnd -> empty .)
    PLOT            reduce using rule 121 (whileEnd -> empty .)
    RETURN          reduce using rule 121 (whileEnd -> empty .)
    WHILE           reduce using rule 121 (whileEnd -> empty .)
    FOR             reduce using rule 121 (whileEnd -> empty .)
    MAX             reduce using rule 121 (whileEnd -> empty .)
    MIN             reduce using rule 121 (whileEnd -> empty .)
    SUM             reduce using rule 121 (whileEnd -> empty .)
    NORMAL          reduce using rule 121 (whileEnd -> empty .)
    UNIFORME        reduce using rule 121 (whileEnd -> empty .)
    POISSON         reduce using rule 121 (whileEnd -> empty .)
    BINOMIAL        reduce using rule 121 (whileEnd -> empty .)
    INT             reduce using rule 121 (whileEnd -> empty .)
    FLOAT           reduce using rule 121 (whileEnd -> empty .)
    CHAR            reduce using rule 121 (whileEnd -> empty .)
    BRACKETCLOSE    reduce using rule 121 (whileEnd -> empty .)


state 280

    (122) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp . PARENCLOSE body forEnd
    (74) exp -> exp . AND expp
    (75) exp -> exp . OR expp

    PARENCLOSE      shift and go to state 284
    AND             shift and go to state 159
    OR              shift and go to state 160


state 281

    (61) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE COLON dec_mvar
    (64) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT . BRACECLOSE

    BRACECLOSE      shift and go to state 285


state 282

    (60) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .

    SEMICOLON       reduce using rule 60 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .)


state 283

    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body . ifEndElse
    (108) ifEndElse -> . empty
    (135) empty -> .

    IF              reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ            reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    PLOT            reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    MAX             reduce using rule 135 (empty -> .)
    MIN             reduce using rule 135 (empty -> .)
    SUM             reduce using rule 135 (empty -> .)
    NORMAL          reduce using rule 135 (empty -> .)
    UNIFORME        reduce using rule 135 (empty -> .)
    POISSON         reduce using rule 135 (empty -> .)
    BINOMIAL        reduce using rule 135 (empty -> .)
    INT             reduce using rule 135 (empty -> .)
    FLOAT           reduce using rule 135 (empty -> .)
    CHAR            reduce using rule 135 (empty -> .)
    BRACKETCLOSE    reduce using rule 135 (empty -> .)

    ifEndElse                      shift and go to state 286
    empty                          shift and go to state 287

state 284

    (122) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE . body forEnd
    (35) body -> . BRACKETOPEN bodyy BRACKETCLOSE

    BRACKETOPEN     shift and go to state 55

    body                           shift and go to state 288

state 285

    (61) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE . COLON dec_mvar
    (64) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .

    COLON           shift and go to state 289
    SEMICOLON       reduce using rule 64 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE .)


state 286

    (104) condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .

    IF              reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    PRINT           reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    READ            reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    ID              reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    PLOT            reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    RETURN          reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    WHILE           reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    FOR             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    MAX             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    MIN             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    SUM             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    NORMAL          reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    UNIFORME        reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    POISSON         reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    BINOMIAL        reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    INT             reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    FLOAT           reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    CHAR            reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)
    BRACKETCLOSE    reduce using rule 104 (condition -> IF PARENOPEN exp PARENCLOSE cuadruploIF body cuadruploElse ELSE body ifEndElse .)


state 287

    (108) ifEndElse -> empty .

    IF              reduce using rule 108 (ifEndElse -> empty .)
    PRINT           reduce using rule 108 (ifEndElse -> empty .)
    READ            reduce using rule 108 (ifEndElse -> empty .)
    ID              reduce using rule 108 (ifEndElse -> empty .)
    PLOT            reduce using rule 108 (ifEndElse -> empty .)
    RETURN          reduce using rule 108 (ifEndElse -> empty .)
    WHILE           reduce using rule 108 (ifEndElse -> empty .)
    FOR             reduce using rule 108 (ifEndElse -> empty .)
    MAX             reduce using rule 108 (ifEndElse -> empty .)
    MIN             reduce using rule 108 (ifEndElse -> empty .)
    SUM             reduce using rule 108 (ifEndElse -> empty .)
    NORMAL          reduce using rule 108 (ifEndElse -> empty .)
    UNIFORME        reduce using rule 108 (ifEndElse -> empty .)
    POISSON         reduce using rule 108 (ifEndElse -> empty .)
    BINOMIAL        reduce using rule 108 (ifEndElse -> empty .)
    INT             reduce using rule 108 (ifEndElse -> empty .)
    FLOAT           reduce using rule 108 (ifEndElse -> empty .)
    CHAR            reduce using rule 108 (ifEndElse -> empty .)
    BRACKETCLOSE    reduce using rule 108 (ifEndElse -> empty .)


state 288

    (122) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body . forEnd
    (124) forEnd -> . empty
    (135) empty -> .

    IF              reduce using rule 135 (empty -> .)
    PRINT           reduce using rule 135 (empty -> .)
    READ            reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    PLOT            reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    MAX             reduce using rule 135 (empty -> .)
    MIN             reduce using rule 135 (empty -> .)
    SUM             reduce using rule 135 (empty -> .)
    NORMAL          reduce using rule 135 (empty -> .)
    UNIFORME        reduce using rule 135 (empty -> .)
    POISSON         reduce using rule 135 (empty -> .)
    BINOMIAL        reduce using rule 135 (empty -> .)
    INT             reduce using rule 135 (empty -> .)
    FLOAT           reduce using rule 135 (empty -> .)
    CHAR            reduce using rule 135 (empty -> .)
    BRACKETCLOSE    reduce using rule 135 (empty -> .)

    forEnd                         shift and go to state 290
    empty                          shift and go to state 291

state 289

    (61) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON . dec_mvar
    (59) dec_mvar -> . ID COLON dec_mvar
    (60) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (61) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar
    (62) dec_mvar -> . ID
    (63) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE
    (64) dec_mvar -> . ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE

    ID              shift and go to state 187

    dec_mvar                       shift and go to state 292

state 290

    (122) for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .

    IF              reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    PRINT           reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    READ            reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    ID              reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    PLOT            reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    RETURN          reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    WHILE           reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    FOR             reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    MAX             reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    MIN             reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    SUM             reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    NORMAL          reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    UNIFORME        reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    POISSON         reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    BINOMIAL        reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    INT             reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    FLOAT           reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    CHAR            reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)
    BRACKETCLOSE    reduce using rule 122 (for_loop -> FOR PARENOPEN ID EQUAL exp guardarValorFor TO exp PARENCLOSE body forEnd .)


state 291

    (124) forEnd -> empty .

    IF              reduce using rule 124 (forEnd -> empty .)
    PRINT           reduce using rule 124 (forEnd -> empty .)
    READ            reduce using rule 124 (forEnd -> empty .)
    ID              reduce using rule 124 (forEnd -> empty .)
    PLOT            reduce using rule 124 (forEnd -> empty .)
    RETURN          reduce using rule 124 (forEnd -> empty .)
    WHILE           reduce using rule 124 (forEnd -> empty .)
    FOR             reduce using rule 124 (forEnd -> empty .)
    MAX             reduce using rule 124 (forEnd -> empty .)
    MIN             reduce using rule 124 (forEnd -> empty .)
    SUM             reduce using rule 124 (forEnd -> empty .)
    NORMAL          reduce using rule 124 (forEnd -> empty .)
    UNIFORME        reduce using rule 124 (forEnd -> empty .)
    POISSON         reduce using rule 124 (forEnd -> empty .)
    BINOMIAL        reduce using rule 124 (forEnd -> empty .)
    INT             reduce using rule 124 (forEnd -> empty .)
    FLOAT           reduce using rule 124 (forEnd -> empty .)
    CHAR            reduce using rule 124 (forEnd -> empty .)
    BRACKETCLOSE    reduce using rule 124 (forEnd -> empty .)


state 292

    (61) dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .

    SEMICOLON       reduce using rule 61 (dec_mvar -> ID BRACEOPEN CTEINT BRACECLOSE BRACEOPEN CTEINT BRACECLOSE COLON dec_mvar .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 228 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 228 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 228 resolved as shift
WARNING: reduce/reduce conflict in state 65 resolved using rule (bodyy -> statement)
WARNING: rejected rule (empty -> <empty>) in state 65
WARNING: reduce/reduce conflict in state 124 resolved using rule (factor -> ID)
WARNING: rejected rule (variable -> ID) in state 124
